
trapapoul.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000025c  00800100  00003ea0  00003f34  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003ea0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003f2  0080035c  0080035c  00004190  2**0
                  ALLOC
  3 .stab         00014ca0  00000000  00000000  00004190  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00010648  00000000  00000000  00018e30  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00029478  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	69 c0       	rjmp	.+210    	; 0xd4 <__dtors_end>
       2:	00 00       	nop
       4:	30 c4       	rjmp	.+2144   	; 0x866 <__vector_1>
       6:	00 00       	nop
       8:	5b c4       	rjmp	.+2230   	; 0x8c0 <__vector_2>
       a:	00 00       	nop
       c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
       e:	00 00       	nop
      10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
      12:	00 00       	nop
      14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
      16:	00 00       	nop
      18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a9 c3       	rjmp	.+1874   	; 0x770 <__vector_7>
      1e:	00 00       	nop
      20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
      22:	00 00       	nop
      24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
      26:	00 00       	nop
      28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
      2e:	00 00       	nop
      30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 93 09 	jmp	0x1326	; 0x1326 <__vector_13>
      38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
      3e:	00 00       	nop
      40:	fa c4       	rjmp	.+2548   	; 0xa36 <__vector_16>
      42:	00 00       	nop
      44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
      46:	00 00       	nop
      48:	af c1       	rjmp	.+862    	; 0x3a8 <__vector_18>
      4a:	00 00       	nop
      4c:	df c1       	rjmp	.+958    	; 0x40c <__vector_19>
      4e:	00 00       	nop
      50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
      52:	00 00       	nop
      54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
      56:	00 00       	nop
      58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
      5e:	00 00       	nop
      60:	69 c7       	rjmp	.+3794   	; 0xf34 <__vector_24>
      62:	00 00       	nop
      64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
	...

00000068 <__trampolines_end>:
      68:	02 00       	.word	0x0002	; ????

00000069 <digital_pin_to_timer_PGM>:
      69:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
      79:	00 00 00 00                                         ....

0000007d <digital_pin_to_bit_mask_PGM>:
      7d:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8d:	04 08 10 20                                         ... 

00000091 <digital_pin_to_port_PGM>:
      91:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a1:	03 03 03 03                                         ....

000000a5 <port_to_input_PGM>:
      a5:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000af <port_to_output_PGM>:
      af:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b9 <port_to_mode_PGM>:
      b9:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

000000c4 <__ctors_start>:
      c4:	34 02       	muls	r19, r20
      c6:	ae 02       	muls	r26, r30
      c8:	8f 09       	sbc	r24, r15
      ca:	c5 0b       	sbc	r28, r21
      cc:	3a 11       	cpse	r19, r10
      ce:	cf 12       	cpse	r12, r31
      d0:	75 19       	sub	r23, r5

000000d2 <__ctors_end>:
      d2:	82 19       	sub	r24, r2

000000d4 <__dtors_end>:
      d4:	11 24       	eor	r1, r1
      d6:	1f be       	out	0x3f, r1	; 63
      d8:	cf ef       	ldi	r28, 0xFF	; 255
      da:	d8 e0       	ldi	r29, 0x08	; 8
      dc:	de bf       	out	0x3e, r29	; 62
      de:	cd bf       	out	0x3d, r28	; 61

000000e0 <__do_copy_data>:
      e0:	13 e0       	ldi	r17, 0x03	; 3
      e2:	a0 e0       	ldi	r26, 0x00	; 0
      e4:	b1 e0       	ldi	r27, 0x01	; 1
      e6:	e0 ea       	ldi	r30, 0xA0	; 160
      e8:	fe e3       	ldi	r31, 0x3E	; 62
      ea:	02 c0       	rjmp	.+4      	; 0xf0 <__do_copy_data+0x10>
      ec:	05 90       	lpm	r0, Z+
      ee:	0d 92       	st	X+, r0
      f0:	ac 35       	cpi	r26, 0x5C	; 92
      f2:	b1 07       	cpc	r27, r17
      f4:	d9 f7       	brne	.-10     	; 0xec <__do_copy_data+0xc>

000000f6 <__do_clear_bss>:
      f6:	27 e0       	ldi	r18, 0x07	; 7
      f8:	ac e5       	ldi	r26, 0x5C	; 92
      fa:	b3 e0       	ldi	r27, 0x03	; 3
      fc:	01 c0       	rjmp	.+2      	; 0x100 <.do_clear_bss_start>

000000fe <.do_clear_bss_loop>:
      fe:	1d 92       	st	X+, r1

00000100 <.do_clear_bss_start>:
     100:	ae 34       	cpi	r26, 0x4E	; 78
     102:	b2 07       	cpc	r27, r18
     104:	e1 f7       	brne	.-8      	; 0xfe <.do_clear_bss_loop>

00000106 <__do_global_ctors>:
     106:	10 e0       	ldi	r17, 0x00	; 0
     108:	c2 ed       	ldi	r28, 0xD2	; 210
     10a:	d0 e0       	ldi	r29, 0x00	; 0
     10c:	04 c0       	rjmp	.+8      	; 0x116 <__do_global_ctors+0x10>
     10e:	22 97       	sbiw	r28, 0x02	; 2
     110:	fe 01       	movw	r30, r28
     112:	0e 94 0f 1d 	call	0x3a1e	; 0x3a1e <__tablejump__>
     116:	c4 3c       	cpi	r28, 0xC4	; 196
     118:	d1 07       	cpc	r29, r17
     11a:	c9 f7       	brne	.-14     	; 0x10e <__do_global_ctors+0x8>
     11c:	80 d4       	rcall	.+2304   	; 0xa1e <main>
     11e:	0c 94 44 1f 	jmp	0x3e88	; 0x3e88 <__do_global_dtors>

00000122 <__bad_interrupt>:
     122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     124:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     126:	81 8d       	ldd	r24, Z+25	; 0x19
     128:	22 8d       	ldd	r18, Z+26	; 0x1a
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	80 5c       	subi	r24, 0xC0	; 192
     12e:	9f 4f       	sbci	r25, 0xFF	; 255
     130:	82 1b       	sub	r24, r18
     132:	91 09       	sbc	r25, r1
}
     134:	8f 73       	andi	r24, 0x3F	; 63
     136:	99 27       	eor	r25, r25
     138:	08 95       	ret

0000013a <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     13a:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     13c:	91 8d       	ldd	r25, Z+25	; 0x19
     13e:	82 8d       	ldd	r24, Z+26	; 0x1a
     140:	98 17       	cp	r25, r24
     142:	31 f0       	breq	.+12     	; 0x150 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     144:	82 8d       	ldd	r24, Z+26	; 0x1a
     146:	e8 0f       	add	r30, r24
     148:	f1 1d       	adc	r31, r1
     14a:	85 8d       	ldd	r24, Z+29	; 0x1d
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     150:	8f ef       	ldi	r24, 0xFF	; 255
     152:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     154:	08 95       	ret

00000156 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     156:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     158:	91 8d       	ldd	r25, Z+25	; 0x19
     15a:	82 8d       	ldd	r24, Z+26	; 0x1a
     15c:	98 17       	cp	r25, r24
     15e:	61 f0       	breq	.+24     	; 0x178 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     160:	82 8d       	ldd	r24, Z+26	; 0x1a
     162:	df 01       	movw	r26, r30
     164:	a8 0f       	add	r26, r24
     166:	b1 1d       	adc	r27, r1
     168:	5d 96       	adiw	r26, 0x1d	; 29
     16a:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     16c:	92 8d       	ldd	r25, Z+26	; 0x1a
     16e:	9f 5f       	subi	r25, 0xFF	; 255
     170:	9f 73       	andi	r25, 0x3F	; 63
     172:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     174:	90 e0       	ldi	r25, 0x00	; 0
     176:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     178:	8f ef       	ldi	r24, 0xFF	; 255
     17a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     17c:	08 95       	ret

0000017e <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     17e:	8b e2       	ldi	r24, 0x2B	; 43
     180:	92 e0       	ldi	r25, 0x02	; 2
     182:	89 2b       	or	r24, r25
     184:	41 f0       	breq	.+16     	; 0x196 <_Z14serialEventRunv+0x18>
     186:	80 e0       	ldi	r24, 0x00	; 0
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	89 2b       	or	r24, r25
     18c:	21 f0       	breq	.+8      	; 0x196 <_Z14serialEventRunv+0x18>
     18e:	63 d1       	rcall	.+710    	; 0x456 <_Z17Serial0_availablev>
     190:	81 11       	cpse	r24, r1
     192:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     196:	08 95       	ret

00000198 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     198:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     19a:	84 8d       	ldd	r24, Z+28	; 0x1c
     19c:	df 01       	movw	r26, r30
     19e:	a8 0f       	add	r26, r24
     1a0:	b1 1d       	adc	r27, r1
     1a2:	a3 5a       	subi	r26, 0xA3	; 163
     1a4:	bf 4f       	sbci	r27, 0xFF	; 255
     1a6:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     1a8:	84 8d       	ldd	r24, Z+28	; 0x1c
     1aa:	90 e0       	ldi	r25, 0x00	; 0
     1ac:	01 96       	adiw	r24, 0x01	; 1
     1ae:	8f 73       	andi	r24, 0x3F	; 63
     1b0:	99 27       	eor	r25, r25
     1b2:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     1b4:	a6 89       	ldd	r26, Z+22	; 0x16
     1b6:	b7 89       	ldd	r27, Z+23	; 0x17
     1b8:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
     1ba:	a0 89       	ldd	r26, Z+16	; 0x10
     1bc:	b1 89       	ldd	r27, Z+17	; 0x11
     1be:	8c 91       	ld	r24, X
     1c0:	80 64       	ori	r24, 0x40	; 64
     1c2:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
     1c4:	93 8d       	ldd	r25, Z+27	; 0x1b
     1c6:	84 8d       	ldd	r24, Z+28	; 0x1c
     1c8:	98 13       	cpse	r25, r24
     1ca:	06 c0       	rjmp	.+12     	; 0x1d8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     1cc:	02 88       	ldd	r0, Z+18	; 0x12
     1ce:	f3 89       	ldd	r31, Z+19	; 0x13
     1d0:	e0 2d       	mov	r30, r0
     1d2:	80 81       	ld	r24, Z
     1d4:	8f 7d       	andi	r24, 0xDF	; 223
     1d6:	80 83       	st	Z, r24
     1d8:	08 95       	ret

000001da <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     1da:	cf 93       	push	r28
     1dc:	df 93       	push	r29
     1de:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     1e0:	88 8d       	ldd	r24, Y+24	; 0x18
     1e2:	88 23       	and	r24, r24
     1e4:	c1 f0       	breq	.+48     	; 0x216 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     1e6:	ea 89       	ldd	r30, Y+18	; 0x12
     1e8:	fb 89       	ldd	r31, Y+19	; 0x13
     1ea:	80 81       	ld	r24, Z
     1ec:	85 fd       	sbrc	r24, 5
     1ee:	05 c0       	rjmp	.+10     	; 0x1fa <_ZN14HardwareSerial5flushEv+0x20>
     1f0:	a8 89       	ldd	r26, Y+16	; 0x10
     1f2:	b9 89       	ldd	r27, Y+17	; 0x11
     1f4:	8c 91       	ld	r24, X
     1f6:	86 fd       	sbrc	r24, 6
     1f8:	0e c0       	rjmp	.+28     	; 0x216 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     1fa:	0f b6       	in	r0, 0x3f	; 63
     1fc:	07 fc       	sbrc	r0, 7
     1fe:	f5 cf       	rjmp	.-22     	; 0x1ea <_ZN14HardwareSerial5flushEv+0x10>
     200:	80 81       	ld	r24, Z
     202:	85 ff       	sbrs	r24, 5
     204:	f2 cf       	rjmp	.-28     	; 0x1ea <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     206:	a8 89       	ldd	r26, Y+16	; 0x10
     208:	b9 89       	ldd	r27, Y+17	; 0x11
     20a:	8c 91       	ld	r24, X
     20c:	85 ff       	sbrs	r24, 5
     20e:	ed cf       	rjmp	.-38     	; 0x1ea <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     210:	ce 01       	movw	r24, r28
     212:	c2 df       	rcall	.-124    	; 0x198 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     214:	e8 cf       	rjmp	.-48     	; 0x1e6 <_ZN14HardwareSerial5flushEv+0xc>
     216:	df 91       	pop	r29
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     218:	cf 91       	pop	r28
     21a:	08 95       	ret

0000021c <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
     21c:	cf 92       	push	r12
     21e:	df 92       	push	r13
     220:	ff 92       	push	r15
     222:	0f 93       	push	r16
     224:	1f 93       	push	r17
     226:	cf 93       	push	r28
     228:	df 93       	push	r29
     22a:	1f 92       	push	r1
     22c:	cd b7       	in	r28, 0x3d	; 61
     22e:	de b7       	in	r29, 0x3e	; 62
     230:	6c 01       	movw	r12, r24
  _written = true;
     232:	81 e0       	ldi	r24, 0x01	; 1
     234:	d6 01       	movw	r26, r12
     236:	58 96       	adiw	r26, 0x18	; 24
     238:	8c 93       	st	X, r24
     23a:	58 97       	sbiw	r26, 0x18	; 24
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     23c:	5b 96       	adiw	r26, 0x1b	; 27
     23e:	9c 91       	ld	r25, X
     240:	5b 97       	sbiw	r26, 0x1b	; 27
     242:	5c 96       	adiw	r26, 0x1c	; 28
     244:	8c 91       	ld	r24, X
     246:	5c 97       	sbiw	r26, 0x1c	; 28
     248:	98 13       	cpse	r25, r24
     24a:	07 c0       	rjmp	.+14     	; 0x25a <_ZN14HardwareSerial5writeEh+0x3e>
     24c:	50 96       	adiw	r26, 0x10	; 16
     24e:	ed 91       	ld	r30, X+
     250:	fc 91       	ld	r31, X
     252:	51 97       	sbiw	r26, 0x11	; 17
     254:	80 81       	ld	r24, Z
     256:	85 fd       	sbrc	r24, 5
     258:	2d c0       	rjmp	.+90     	; 0x2b4 <_ZN14HardwareSerial5writeEh+0x98>
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     25a:	f6 01       	movw	r30, r12
     25c:	03 8d       	ldd	r16, Z+27	; 0x1b
     25e:	10 e0       	ldi	r17, 0x00	; 0
     260:	0f 5f       	subi	r16, 0xFF	; 255
     262:	1f 4f       	sbci	r17, 0xFF	; 255
     264:	0f 73       	andi	r16, 0x3F	; 63
     266:	11 27       	eor	r17, r17
     268:	f0 2e       	mov	r15, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     26a:	f6 01       	movw	r30, r12
     26c:	84 8d       	ldd	r24, Z+28	; 0x1c
     26e:	f8 12       	cpse	r15, r24
     270:	10 c0       	rjmp	.+32     	; 0x292 <_ZN14HardwareSerial5writeEh+0x76>
    if (bit_is_clear(SREG, SREG_I)) {
     272:	0f b6       	in	r0, 0x3f	; 63
     274:	07 fc       	sbrc	r0, 7
     276:	f9 cf       	rjmp	.-14     	; 0x26a <_ZN14HardwareSerial5writeEh+0x4e>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     278:	d6 01       	movw	r26, r12
     27a:	50 96       	adiw	r26, 0x10	; 16
     27c:	ed 91       	ld	r30, X+
     27e:	fc 91       	ld	r31, X
     280:	51 97       	sbiw	r26, 0x11	; 17
     282:	80 81       	ld	r24, Z
     284:	85 ff       	sbrs	r24, 5
     286:	f1 cf       	rjmp	.-30     	; 0x26a <_ZN14HardwareSerial5writeEh+0x4e>
	_tx_udr_empty_irq();
     288:	c6 01       	movw	r24, r12
     28a:	69 83       	std	Y+1, r22	; 0x01
     28c:	85 df       	rcall	.-246    	; 0x198 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     28e:	69 81       	ldd	r22, Y+1	; 0x01
     290:	ec cf       	rjmp	.-40     	; 0x26a <_ZN14HardwareSerial5writeEh+0x4e>
     292:	83 8d       	ldd	r24, Z+27	; 0x1b
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     294:	e8 0f       	add	r30, r24
     296:	f1 1d       	adc	r31, r1
     298:	e3 5a       	subi	r30, 0xA3	; 163
     29a:	ff 4f       	sbci	r31, 0xFF	; 255
     29c:	60 83       	st	Z, r22
     29e:	d6 01       	movw	r26, r12
  _tx_buffer_head = i;
     2a0:	5b 96       	adiw	r26, 0x1b	; 27
     2a2:	0c 93       	st	X, r16
     2a4:	5b 97       	sbiw	r26, 0x1b	; 27
     2a6:	52 96       	adiw	r26, 0x12	; 18
	
  sbi(*_ucsrb, UDRIE0);
     2a8:	ed 91       	ld	r30, X+
     2aa:	fc 91       	ld	r31, X
     2ac:	53 97       	sbiw	r26, 0x13	; 19
     2ae:	80 81       	ld	r24, Z
     2b0:	80 62       	ori	r24, 0x20	; 32
     2b2:	0c c0       	rjmp	.+24     	; 0x2cc <_ZN14HardwareSerial5writeEh+0xb0>
     2b4:	d6 01       	movw	r26, r12
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
     2b6:	56 96       	adiw	r26, 0x16	; 22
     2b8:	ed 91       	ld	r30, X+
     2ba:	fc 91       	ld	r31, X
     2bc:	57 97       	sbiw	r26, 0x17	; 23
     2be:	60 83       	st	Z, r22
     2c0:	50 96       	adiw	r26, 0x10	; 16
    sbi(*_ucsra, TXC0);
     2c2:	ed 91       	ld	r30, X+
     2c4:	fc 91       	ld	r31, X
     2c6:	51 97       	sbiw	r26, 0x11	; 17
     2c8:	80 81       	ld	r24, Z
     2ca:	80 64       	ori	r24, 0x40	; 64
     2cc:	80 83       	st	Z, r24
     2ce:	81 e0       	ldi	r24, 0x01	; 1
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	0f 90       	pop	r0
     2d4:	df 91       	pop	r29
     2d6:	cf 91       	pop	r28
     2d8:	1f 91       	pop	r17
     2da:	0f 91       	pop	r16
     2dc:	ff 90       	pop	r15
     2de:	df 90       	pop	r13
     2e0:	cf 90       	pop	r12
     2e2:	08 95       	ret

000002e4 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     2e4:	bf 92       	push	r11
     2e6:	cf 92       	push	r12
     2e8:	df 92       	push	r13
     2ea:	ef 92       	push	r14
     2ec:	ff 92       	push	r15
     2ee:	cf 93       	push	r28
     2f0:	df 93       	push	r29
     2f2:	ec 01       	movw	r28, r24
     2f4:	6a 01       	movw	r12, r20
     2f6:	7b 01       	movw	r14, r22
     2f8:	b2 2e       	mov	r11, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     2fa:	e8 89       	ldd	r30, Y+16	; 0x10
     2fc:	f9 89       	ldd	r31, Y+17	; 0x11
     2fe:	82 e0       	ldi	r24, 0x02	; 2
     300:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     302:	41 15       	cp	r20, r1
     304:	81 ee       	ldi	r24, 0xE1	; 225
     306:	58 07       	cpc	r21, r24
     308:	61 05       	cpc	r22, r1
     30a:	71 05       	cpc	r23, r1
     30c:	a1 f0       	breq	.+40     	; 0x336 <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     30e:	60 e0       	ldi	r22, 0x00	; 0
     310:	79 e0       	ldi	r23, 0x09	; 9
     312:	8d e3       	ldi	r24, 0x3D	; 61
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	a7 01       	movw	r20, r14
     318:	96 01       	movw	r18, r12
     31a:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <__udivmodsi4>
     31e:	21 50       	subi	r18, 0x01	; 1
     320:	31 09       	sbc	r19, r1
     322:	41 09       	sbc	r20, r1
     324:	51 09       	sbc	r21, r1
     326:	56 95       	lsr	r21
     328:	47 95       	ror	r20
     32a:	37 95       	ror	r19
     32c:	27 95       	ror	r18
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     32e:	21 15       	cp	r18, r1
     330:	80 e1       	ldi	r24, 0x10	; 16
     332:	38 07       	cpc	r19, r24
     334:	98 f0       	brcs	.+38     	; 0x35c <_ZN14HardwareSerial5beginEmh+0x78>
  {
    *_ucsra = 0;
     336:	e8 89       	ldd	r30, Y+16	; 0x10
     338:	f9 89       	ldd	r31, Y+17	; 0x11
     33a:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     33c:	60 e8       	ldi	r22, 0x80	; 128
     33e:	74 e8       	ldi	r23, 0x84	; 132
     340:	8e e1       	ldi	r24, 0x1E	; 30
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	a7 01       	movw	r20, r14
     346:	96 01       	movw	r18, r12
     348:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <__udivmodsi4>
     34c:	21 50       	subi	r18, 0x01	; 1
     34e:	31 09       	sbc	r19, r1
     350:	41 09       	sbc	r20, r1
     352:	51 09       	sbc	r21, r1
     354:	56 95       	lsr	r21
     356:	47 95       	ror	r20
     358:	37 95       	ror	r19
     35a:	27 95       	ror	r18
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     35c:	ec 85       	ldd	r30, Y+12	; 0x0c
     35e:	fd 85       	ldd	r31, Y+13	; 0x0d
     360:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     362:	ee 85       	ldd	r30, Y+14	; 0x0e
     364:	ff 85       	ldd	r31, Y+15	; 0x0f
     366:	20 83       	st	Z, r18

  _written = false;
     368:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     36a:	ec 89       	ldd	r30, Y+20	; 0x14
     36c:	fd 89       	ldd	r31, Y+21	; 0x15
     36e:	b0 82       	st	Z, r11
  
  sbi(*_ucsrb, RXEN0);
     370:	ea 89       	ldd	r30, Y+18	; 0x12
     372:	fb 89       	ldd	r31, Y+19	; 0x13
     374:	80 81       	ld	r24, Z
     376:	80 61       	ori	r24, 0x10	; 16
     378:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     37a:	ea 89       	ldd	r30, Y+18	; 0x12
     37c:	fb 89       	ldd	r31, Y+19	; 0x13
     37e:	80 81       	ld	r24, Z
     380:	88 60       	ori	r24, 0x08	; 8
     382:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     384:	ea 89       	ldd	r30, Y+18	; 0x12
     386:	fb 89       	ldd	r31, Y+19	; 0x13
     388:	80 81       	ld	r24, Z
     38a:	80 68       	ori	r24, 0x80	; 128
     38c:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     38e:	ea 89       	ldd	r30, Y+18	; 0x12
     390:	fb 89       	ldd	r31, Y+19	; 0x13
     392:	80 81       	ld	r24, Z
     394:	8f 7d       	andi	r24, 0xDF	; 223
     396:	80 83       	st	Z, r24
}
     398:	df 91       	pop	r29
     39a:	cf 91       	pop	r28
     39c:	ff 90       	pop	r15
     39e:	ef 90       	pop	r14
     3a0:	df 90       	pop	r13
     3a2:	cf 90       	pop	r12
     3a4:	bf 90       	pop	r11
     3a6:	08 95       	ret

000003a8 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     3a8:	1f 92       	push	r1
     3aa:	0f 92       	push	r0
     3ac:	0f b6       	in	r0, 0x3f	; 63
     3ae:	0f 92       	push	r0
     3b0:	11 24       	eor	r1, r1
     3b2:	2f 93       	push	r18
     3b4:	8f 93       	push	r24
     3b6:	9f 93       	push	r25
     3b8:	ef 93       	push	r30
     3ba:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     3bc:	e0 91 6c 03 	lds	r30, 0x036C
     3c0:	f0 91 6d 03 	lds	r31, 0x036D
     3c4:	80 81       	ld	r24, Z
     3c6:	e0 91 72 03 	lds	r30, 0x0372
     3ca:	f0 91 73 03 	lds	r31, 0x0373
     3ce:	82 fd       	sbrc	r24, 2
     3d0:	12 c0       	rjmp	.+36     	; 0x3f6 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     3d2:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     3d4:	80 91 75 03 	lds	r24, 0x0375
     3d8:	8f 5f       	subi	r24, 0xFF	; 255
     3da:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     3dc:	20 91 76 03 	lds	r18, 0x0376
     3e0:	82 17       	cp	r24, r18
     3e2:	51 f0       	breq	.+20     	; 0x3f8 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
     3e4:	e0 91 75 03 	lds	r30, 0x0375
     3e8:	f0 e0       	ldi	r31, 0x00	; 0
     3ea:	e4 5a       	subi	r30, 0xA4	; 164
     3ec:	fc 4f       	sbci	r31, 0xFC	; 252
     3ee:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     3f0:	80 93 75 03 	sts	0x0375, r24
     3f4:	01 c0       	rjmp	.+2      	; 0x3f8 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     3f6:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     3f8:	ff 91       	pop	r31
     3fa:	ef 91       	pop	r30
     3fc:	9f 91       	pop	r25
     3fe:	8f 91       	pop	r24
     400:	2f 91       	pop	r18
     402:	0f 90       	pop	r0
     404:	0f be       	out	0x3f, r0	; 63
     406:	0f 90       	pop	r0
     408:	1f 90       	pop	r1
     40a:	18 95       	reti

0000040c <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     40c:	1f 92       	push	r1
     40e:	0f 92       	push	r0
     410:	0f b6       	in	r0, 0x3f	; 63
     412:	0f 92       	push	r0
     414:	11 24       	eor	r1, r1
     416:	2f 93       	push	r18
     418:	3f 93       	push	r19
     41a:	4f 93       	push	r20
     41c:	5f 93       	push	r21
     41e:	6f 93       	push	r22
     420:	7f 93       	push	r23
     422:	8f 93       	push	r24
     424:	9f 93       	push	r25
     426:	af 93       	push	r26
     428:	bf 93       	push	r27
     42a:	ef 93       	push	r30
     42c:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     42e:	8c e5       	ldi	r24, 0x5C	; 92
     430:	93 e0       	ldi	r25, 0x03	; 3
     432:	b2 de       	rcall	.-668    	; 0x198 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     434:	ff 91       	pop	r31
}
     436:	ef 91       	pop	r30
     438:	bf 91       	pop	r27
     43a:	af 91       	pop	r26
     43c:	9f 91       	pop	r25
     43e:	8f 91       	pop	r24
     440:	7f 91       	pop	r23
     442:	6f 91       	pop	r22
     444:	5f 91       	pop	r21
     446:	4f 91       	pop	r20
     448:	3f 91       	pop	r19
     44a:	2f 91       	pop	r18
     44c:	0f 90       	pop	r0
     44e:	0f be       	out	0x3f, r0	; 63
     450:	0f 90       	pop	r0
     452:	1f 90       	pop	r1
     454:	18 95       	reti

00000456 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     456:	8c e5       	ldi	r24, 0x5C	; 92
     458:	93 e0       	ldi	r25, 0x03	; 3
     45a:	64 de       	rcall	.-824    	; 0x124 <_ZN14HardwareSerial9availableEv>
     45c:	21 e0       	ldi	r18, 0x01	; 1
     45e:	89 2b       	or	r24, r25
     460:	09 f4       	brne	.+2      	; 0x464 <_Z17Serial0_availablev+0xe>
     462:	20 e0       	ldi	r18, 0x00	; 0
     464:	82 2f       	mov	r24, r18
}
     466:	08 95       	ret

00000468 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     468:	10 92 5f 03 	sts	0x035F, r1
     46c:	10 92 5e 03 	sts	0x035E, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     470:	88 ee       	ldi	r24, 0xE8	; 232
     472:	93 e0       	ldi	r25, 0x03	; 3
     474:	a0 e0       	ldi	r26, 0x00	; 0
     476:	b0 e0       	ldi	r27, 0x00	; 0
     478:	80 93 60 03 	sts	0x0360, r24
     47c:	90 93 61 03 	sts	0x0361, r25
     480:	a0 93 62 03 	sts	0x0362, r26
     484:	b0 93 63 03 	sts	0x0363, r27
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     488:	80 e2       	ldi	r24, 0x20	; 32
     48a:	91 e0       	ldi	r25, 0x01	; 1
     48c:	90 93 5d 03 	sts	0x035D, r25
     490:	80 93 5c 03 	sts	0x035C, r24
     494:	85 ec       	ldi	r24, 0xC5	; 197
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	90 93 69 03 	sts	0x0369, r25
     49c:	80 93 68 03 	sts	0x0368, r24
     4a0:	84 ec       	ldi	r24, 0xC4	; 196
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	90 93 6b 03 	sts	0x036B, r25
     4a8:	80 93 6a 03 	sts	0x036A, r24
     4ac:	80 ec       	ldi	r24, 0xC0	; 192
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	90 93 6d 03 	sts	0x036D, r25
     4b4:	80 93 6c 03 	sts	0x036C, r24
     4b8:	81 ec       	ldi	r24, 0xC1	; 193
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	90 93 6f 03 	sts	0x036F, r25
     4c0:	80 93 6e 03 	sts	0x036E, r24
     4c4:	82 ec       	ldi	r24, 0xC2	; 194
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	90 93 71 03 	sts	0x0371, r25
     4cc:	80 93 70 03 	sts	0x0370, r24
     4d0:	86 ec       	ldi	r24, 0xC6	; 198
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	90 93 73 03 	sts	0x0373, r25
     4d8:	80 93 72 03 	sts	0x0372, r24
     4dc:	10 92 75 03 	sts	0x0375, r1
     4e0:	10 92 76 03 	sts	0x0376, r1
     4e4:	10 92 77 03 	sts	0x0377, r1
     4e8:	10 92 78 03 	sts	0x0378, r1
     4ec:	08 95       	ret

000004ee <_ZNK9IPAddress7printToER5Print>:
{
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
     4ee:	af 92       	push	r10
     4f0:	bf 92       	push	r11
     4f2:	cf 92       	push	r12
     4f4:	df 92       	push	r13
     4f6:	ef 92       	push	r14
     4f8:	ff 92       	push	r15
     4fa:	0f 93       	push	r16
     4fc:	1f 93       	push	r17
     4fe:	cf 93       	push	r28
     500:	df 93       	push	r29
     502:	6c 01       	movw	r12, r24
     504:	7b 01       	movw	r14, r22
    size_t n = 0;
    for (int i =0; i < 3; i++)
     506:	c0 e0       	ldi	r28, 0x00	; 0
     508:	d0 e0       	ldi	r29, 0x00	; 0
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
     50a:	00 e0       	ldi	r16, 0x00	; 0
     50c:	10 e0       	ldi	r17, 0x00	; 0
     50e:	f6 01       	movw	r30, r12
     510:	ec 0f       	add	r30, r28
     512:	fd 1f       	adc	r31, r29
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address.bytes[i], DEC);
     514:	4a e0       	ldi	r20, 0x0A	; 10
     516:	50 e0       	ldi	r21, 0x00	; 0
     518:	62 81       	ldd	r22, Z+2	; 0x02
     51a:	c7 01       	movw	r24, r14
     51c:	eb d0       	rcall	.+470    	; 0x6f4 <_ZN5Print5printEhi>
     51e:	5c 01       	movw	r10, r24
     520:	6e e2       	ldi	r22, 0x2E	; 46
        n += p.print('.');
     522:	c7 01       	movw	r24, r14
     524:	69 d0       	rcall	.+210    	; 0x5f8 <_ZN5Print5printEc>
     526:	8a 0d       	add	r24, r10
     528:	9b 1d       	adc	r25, r11
size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address.bytes[i], DEC);
     52a:	08 0f       	add	r16, r24
     52c:	19 1f       	adc	r17, r25
        n += p.print('.');
     52e:	21 96       	adiw	r28, 0x01	; 1
     530:	c3 30       	cpi	r28, 0x03	; 3
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
     532:	d1 05       	cpc	r29, r1
     534:	61 f7       	brne	.-40     	; 0x50e <_ZNK9IPAddress7printToER5Print+0x20>
     536:	4a e0       	ldi	r20, 0x0A	; 10
     538:	50 e0       	ldi	r21, 0x00	; 0
    {
        n += p.print(_address.bytes[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address.bytes[3], DEC);
     53a:	f6 01       	movw	r30, r12
     53c:	65 81       	ldd	r22, Z+5	; 0x05
     53e:	c7 01       	movw	r24, r14
     540:	d9 d0       	rcall	.+434    	; 0x6f4 <_ZN5Print5printEhi>
     542:	80 0f       	add	r24, r16
     544:	91 1f       	adc	r25, r17
     546:	df 91       	pop	r29
    return n;
}
     548:	cf 91       	pop	r28
     54a:	1f 91       	pop	r17
     54c:	0f 91       	pop	r16
     54e:	ff 90       	pop	r15
     550:	ef 90       	pop	r14
     552:	df 90       	pop	r13
     554:	cf 90       	pop	r12
     556:	bf 90       	pop	r11
     558:	af 90       	pop	r10
     55a:	08 95       	ret

0000055c <_GLOBAL__sub_I__ZN9IPAddressC2Ev>:
IPAddress::IPAddress()
{
    _address.dword = 0;
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
     55c:	80 e3       	ldi	r24, 0x30	; 48
     55e:	91 e0       	ldi	r25, 0x01	; 1
     560:	90 93 fa 03 	sts	0x03FA, r25
     564:	80 93 f9 03 	sts	0x03F9, r24
{
    _address.bytes[0] = first_octet;
     568:	10 92 fb 03 	sts	0x03FB, r1
    _address.bytes[1] = second_octet;
     56c:	10 92 fc 03 	sts	0x03FC, r1
    _address.bytes[2] = third_octet;
     570:	10 92 fd 03 	sts	0x03FD, r1
    _address.bytes[3] = fourth_octet;
     574:	10 92 fe 03 	sts	0x03FE, r1
     578:	08 95       	ret

0000057a <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     57a:	cf 92       	push	r12
     57c:	df 92       	push	r13
     57e:	ef 92       	push	r14
     580:	ff 92       	push	r15
     582:	0f 93       	push	r16
     584:	1f 93       	push	r17
     586:	cf 93       	push	r28
     588:	df 93       	push	r29
     58a:	6c 01       	movw	r12, r24
     58c:	7a 01       	movw	r14, r20
     58e:	eb 01       	movw	r28, r22
     590:	e6 0e       	add	r14, r22
     592:	f7 1e       	adc	r15, r23
  size_t n = 0;
     594:	00 e0       	ldi	r16, 0x00	; 0
     596:	10 e0       	ldi	r17, 0x00	; 0
  while (size--) {
     598:	ce 15       	cp	r28, r14
     59a:	df 05       	cpc	r29, r15
     59c:	61 f0       	breq	.+24     	; 0x5b6 <_ZN5Print5writeEPKhj+0x3c>
    n += write(*buffer++);
     59e:	69 91       	ld	r22, Y+
     5a0:	d6 01       	movw	r26, r12
     5a2:	ed 91       	ld	r30, X+
     5a4:	fc 91       	ld	r31, X
     5a6:	01 90       	ld	r0, Z+
     5a8:	f0 81       	ld	r31, Z
     5aa:	e0 2d       	mov	r30, r0
     5ac:	c6 01       	movw	r24, r12
     5ae:	09 95       	icall
     5b0:	08 0f       	add	r16, r24
     5b2:	19 1f       	adc	r17, r25
     5b4:	f1 cf       	rjmp	.-30     	; 0x598 <_ZN5Print5writeEPKhj+0x1e>
  }
  return n;
}
     5b6:	c8 01       	movw	r24, r16
     5b8:	df 91       	pop	r29
     5ba:	cf 91       	pop	r28
     5bc:	1f 91       	pop	r17
     5be:	0f 91       	pop	r16
     5c0:	ff 90       	pop	r15
     5c2:	ef 90       	pop	r14
     5c4:	df 90       	pop	r13
     5c6:	cf 90       	pop	r12
     5c8:	08 95       	ret

000005ca <_ZN5Print5writeEPKc>:
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
     5ca:	61 15       	cp	r22, r1
     5cc:	71 05       	cpc	r23, r1
     5ce:	81 f0       	breq	.+32     	; 0x5f0 <_ZN5Print5writeEPKc+0x26>
      return write((const uint8_t *)str, strlen(str));
     5d0:	db 01       	movw	r26, r22
     5d2:	0d 90       	ld	r0, X+
     5d4:	00 20       	and	r0, r0
     5d6:	e9 f7       	brne	.-6      	; 0x5d2 <_ZN5Print5writeEPKc+0x8>
     5d8:	ad 01       	movw	r20, r26
     5da:	41 50       	subi	r20, 0x01	; 1
     5dc:	51 09       	sbc	r21, r1
     5de:	46 1b       	sub	r20, r22
     5e0:	57 0b       	sbc	r21, r23
     5e2:	dc 01       	movw	r26, r24
     5e4:	ed 91       	ld	r30, X+
     5e6:	fc 91       	ld	r31, X
     5e8:	02 80       	ldd	r0, Z+2	; 0x02
     5ea:	f3 81       	ldd	r31, Z+3	; 0x03
     5ec:	e0 2d       	mov	r30, r0
     5ee:	09 94       	ijmp
    }
     5f0:	80 e0       	ldi	r24, 0x00	; 0
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	08 95       	ret

000005f6 <_ZN5Print5printEPKc>:
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     5f6:	e9 cf       	rjmp	.-46     	; 0x5ca <_ZN5Print5writeEPKc>

000005f8 <_ZN5Print5printEc>:
}

size_t Print::print(char c)
{
  return write(c);
     5f8:	dc 01       	movw	r26, r24
     5fa:	ed 91       	ld	r30, X+
     5fc:	fc 91       	ld	r31, X
     5fe:	01 90       	ld	r0, Z+
     600:	f0 81       	ld	r31, Z
     602:	e0 2d       	mov	r30, r0
     604:	09 94       	ijmp

00000606 <_ZN5Print7printlnEv>:
  return x.printTo(*this);
}

size_t Print::println(void)
{
  return write("\r\n");
     606:	62 e3       	ldi	r22, 0x32	; 50
     608:	71 e0       	ldi	r23, 0x01	; 1
     60a:	df cf       	rjmp	.-66     	; 0x5ca <_ZN5Print5writeEPKc>

0000060c <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
     60c:	0f 93       	push	r16
     60e:	1f 93       	push	r17
     610:	cf 93       	push	r28
     612:	df 93       	push	r29
     614:	ec 01       	movw	r28, r24
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     616:	d9 df       	rcall	.-78     	; 0x5ca <_ZN5Print5writeEPKc>
     618:	8c 01       	movw	r16, r24
     61a:	ce 01       	movw	r24, r28
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
     61c:	f4 df       	rcall	.-24     	; 0x606 <_ZN5Print7printlnEv>
     61e:	80 0f       	add	r24, r16
     620:	91 1f       	adc	r25, r17
  return n;
}
     622:	df 91       	pop	r29
     624:	cf 91       	pop	r28
     626:	1f 91       	pop	r17
     628:	0f 91       	pop	r16
     62a:	08 95       	ret

0000062c <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
     62c:	8f 92       	push	r8
     62e:	9f 92       	push	r9
     630:	af 92       	push	r10
     632:	bf 92       	push	r11
     634:	cf 92       	push	r12
     636:	df 92       	push	r13
     638:	ef 92       	push	r14
     63a:	ff 92       	push	r15
     63c:	0f 93       	push	r16
     63e:	1f 93       	push	r17
     640:	cf 93       	push	r28
     642:	df 93       	push	r29
     644:	cd b7       	in	r28, 0x3d	; 61
     646:	de b7       	in	r29, 0x3e	; 62
     648:	a1 97       	sbiw	r28, 0x21	; 33
     64a:	0f b6       	in	r0, 0x3f	; 63
     64c:	f8 94       	cli
     64e:	de bf       	out	0x3e, r29	; 62
     650:	0f be       	out	0x3f, r0	; 63
     652:	cd bf       	out	0x3d, r28	; 61
     654:	7c 01       	movw	r14, r24
     656:	c4 2e       	mov	r12, r20
     658:	e5 2f       	mov	r30, r21
     65a:	cb 01       	movw	r24, r22
     65c:	d2 2e       	mov	r13, r18
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     65e:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     660:	21 e0       	ldi	r18, 0x01	; 1
     662:	2d 15       	cp	r18, r13
     664:	10 f0       	brcs	.+4      	; 0x66a <_ZN5Print11printNumberEmh+0x3e>
     666:	2a e0       	ldi	r18, 0x0A	; 10
     668:	d2 2e       	mov	r13, r18
     66a:	8e 01       	movw	r16, r28
     66c:	0f 5d       	subi	r16, 0xDF	; 223
     66e:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    unsigned long m = n;
    n /= base;
     670:	8d 2c       	mov	r8, r13
     672:	91 2c       	mov	r9, r1
     674:	a1 2c       	mov	r10, r1
     676:	b1 2c       	mov	r11, r1
     678:	6c 2d       	mov	r22, r12
     67a:	7e 2f       	mov	r23, r30
     67c:	a5 01       	movw	r20, r10
     67e:	94 01       	movw	r18, r8
     680:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <__udivmodsi4>
    char c = m - base * n;
     684:	8c 2d       	mov	r24, r12
     686:	d2 9e       	mul	r13, r18
     688:	80 19       	sub	r24, r0
     68a:	11 24       	eor	r1, r1
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     68c:	01 50       	subi	r16, 0x01	; 1
     68e:	11 09       	sbc	r17, r1
     690:	8a 30       	cpi	r24, 0x0A	; 10
     692:	10 f4       	brcc	.+4      	; 0x698 <_ZN5Print11printNumberEmh+0x6c>
     694:	80 5d       	subi	r24, 0xD0	; 208
     696:	01 c0       	rjmp	.+2      	; 0x69a <_ZN5Print11printNumberEmh+0x6e>
     698:	89 5c       	subi	r24, 0xC9	; 201
     69a:	f8 01       	movw	r30, r16
     69c:	80 83       	st	Z, r24
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
     69e:	21 15       	cp	r18, r1
     6a0:	31 05       	cpc	r19, r1
     6a2:	41 05       	cpc	r20, r1
     6a4:	51 05       	cpc	r21, r1
     6a6:	21 f0       	breq	.+8      	; 0x6b0 <_ZN5Print11printNumberEmh+0x84>
    unsigned long m = n;
    n /= base;
     6a8:	c2 2e       	mov	r12, r18
     6aa:	e3 2f       	mov	r30, r19
     6ac:	ca 01       	movw	r24, r20
     6ae:	e4 cf       	rjmp	.-56     	; 0x678 <_ZN5Print11printNumberEmh+0x4c>
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
     6b0:	b8 01       	movw	r22, r16
     6b2:	c7 01       	movw	r24, r14
     6b4:	8a df       	rcall	.-236    	; 0x5ca <_ZN5Print5writeEPKc>
     6b6:	a1 96       	adiw	r28, 0x21	; 33
}
     6b8:	0f b6       	in	r0, 0x3f	; 63
     6ba:	f8 94       	cli
     6bc:	de bf       	out	0x3e, r29	; 62
     6be:	0f be       	out	0x3f, r0	; 63
     6c0:	cd bf       	out	0x3d, r28	; 61
     6c2:	df 91       	pop	r29
     6c4:	cf 91       	pop	r28
     6c6:	1f 91       	pop	r17
     6c8:	0f 91       	pop	r16
     6ca:	ff 90       	pop	r15
     6cc:	ef 90       	pop	r14
     6ce:	df 90       	pop	r13
     6d0:	cf 90       	pop	r12
     6d2:	bf 90       	pop	r11
     6d4:	af 90       	pop	r10
     6d6:	9f 90       	pop	r9
     6d8:	8f 90       	pop	r8
     6da:	08 95       	ret

000006dc <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
     6dc:	21 15       	cp	r18, r1
     6de:	31 05       	cpc	r19, r1
     6e0:	41 f4       	brne	.+16     	; 0x6f2 <_ZN5Print5printEmi+0x16>
     6e2:	dc 01       	movw	r26, r24
     6e4:	ed 91       	ld	r30, X+
     6e6:	fc 91       	ld	r31, X
     6e8:	01 90       	ld	r0, Z+
     6ea:	f0 81       	ld	r31, Z
     6ec:	e0 2d       	mov	r30, r0
     6ee:	64 2f       	mov	r22, r20
     6f0:	09 94       	ijmp
  else return printNumber(n, base);
     6f2:	9c cf       	rjmp	.-200    	; 0x62c <_ZN5Print11printNumberEmh>

000006f4 <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
     6f4:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
     6f6:	46 2f       	mov	r20, r22
     6f8:	50 e0       	ldi	r21, 0x00	; 0
     6fa:	60 e0       	ldi	r22, 0x00	; 0
     6fc:	70 e0       	ldi	r23, 0x00	; 0
     6fe:	ee cf       	rjmp	.-36     	; 0x6dc <_ZN5Print5printEmi>

00000700 <_ZN5Print5printEji>:
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
     700:	9a 01       	movw	r18, r20
  return print((unsigned long) n, base);
     702:	ab 01       	movw	r20, r22
     704:	60 e0       	ldi	r22, 0x00	; 0
     706:	70 e0       	ldi	r23, 0x00	; 0
     708:	e9 cf       	rjmp	.-46     	; 0x6dc <_ZN5Print5printEmi>

0000070a <_Z12disableTimerh>:
// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
  switch (_timer)
     70a:	81 30       	cpi	r24, 0x01	; 1
     70c:	39 f0       	breq	.+14     	; 0x71c <_Z12disableTimerh+0x12>
     70e:	18 f0       	brcs	.+6      	; 0x716 <_Z12disableTimerh+0xc>
     710:	82 30       	cpi	r24, 0x02	; 2
     712:	51 f0       	breq	.+20     	; 0x728 <_Z12disableTimerh+0x1e>
     714:	08 95       	ret
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
     716:	10 92 6e 00 	sts	0x006E, r1
      #elif defined(TIMSK)
        TIMSK = 0; // atmega32
      #endif
      break;
     71a:	08 95       	ret

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
     71c:	80 91 6f 00 	lds	r24, 0x006F
     720:	8d 7f       	andi	r24, 0xFD	; 253
     722:	80 93 6f 00 	sts	0x006F, r24
      break;
     726:	08 95       	ret
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
     728:	80 91 70 00 	lds	r24, 0x0070
     72c:	8d 7f       	andi	r24, 0xFD	; 253
     72e:	80 93 70 00 	sts	0x0070, r24
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
     732:	81 e0       	ldi	r24, 0x01	; 1
     734:	80 93 b0 00 	sts	0x00B0, r24
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
     738:	80 91 b1 00 	lds	r24, 0x00B1
     73c:	88 7f       	andi	r24, 0xF8	; 248
     73e:	84 60       	ori	r24, 0x04	; 4
     740:	80 93 b1 00 	sts	0x00B1, r24
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
     744:	10 92 b3 00 	sts	0x00B3, r1
     748:	08 95       	ret

0000074a <_Z6noToneh>:
  }
}


void noTone(uint8_t _pin)
{
     74a:	cf 93       	push	r28
     74c:	c8 2f       	mov	r28, r24
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
     74e:	80 91 0a 01 	lds	r24, 0x010A
     752:	8c 13       	cpse	r24, r28
     754:	07 c0       	rjmp	.+14     	; 0x764 <_Z6noToneh+0x1a>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
     756:	e8 e6       	ldi	r30, 0x68	; 104
     758:	f0 e0       	ldi	r31, 0x00	; 0
     75a:	84 91       	lpm	r24, Z
      tone_pins[i] = 255;
     75c:	9f ef       	ldi	r25, 0xFF	; 255
     75e:	90 93 0a 01 	sts	0x010A, r25
     762:	01 c0       	rjmp	.+2      	; 0x766 <_Z6noToneh+0x1c>
}


void noTone(uint8_t _pin)
{
  int8_t _timer = -1;
     764:	8f ef       	ldi	r24, 0xFF	; 255
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
      tone_pins[i] = 255;
    }
  }
  
  disableTimer(_timer);
     766:	d1 df       	rcall	.-94     	; 0x70a <_Z12disableTimerh>
     768:	60 e0       	ldi	r22, 0x00	; 0

  digitalWrite(_pin, 0);
     76a:	8c 2f       	mov	r24, r28
     76c:	cf 91       	pop	r28
}
     76e:	a9 c2       	rjmp	.+1362   	; 0xcc2 <digitalWrite>

00000770 <__vector_7>:
#endif


#ifdef USE_TIMER2
ISR(TIMER2_COMPA_vect)
{
     770:	1f 92       	push	r1
     772:	0f 92       	push	r0
     774:	0f b6       	in	r0, 0x3f	; 63
     776:	0f 92       	push	r0
     778:	11 24       	eor	r1, r1
     77a:	2f 93       	push	r18
     77c:	3f 93       	push	r19
     77e:	4f 93       	push	r20
     780:	5f 93       	push	r21
     782:	6f 93       	push	r22
     784:	7f 93       	push	r23
     786:	8f 93       	push	r24
     788:	9f 93       	push	r25
     78a:	af 93       	push	r26
     78c:	bf 93       	push	r27
     78e:	ef 93       	push	r30
     790:	ff 93       	push	r31

  if (timer2_toggle_count != 0)
     792:	80 91 02 04 	lds	r24, 0x0402
     796:	90 91 03 04 	lds	r25, 0x0403
     79a:	a0 91 04 04 	lds	r26, 0x0404
     79e:	b0 91 05 04 	lds	r27, 0x0405
     7a2:	89 2b       	or	r24, r25
     7a4:	8a 2b       	or	r24, r26
     7a6:	8b 2b       	or	r24, r27
     7a8:	51 f1       	breq	.+84     	; 0x7fe <__vector_7+0x8e>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
     7aa:	90 91 ff 03 	lds	r25, 0x03FF
     7ae:	e0 91 00 04 	lds	r30, 0x0400
     7b2:	f0 91 01 04 	lds	r31, 0x0401
     7b6:	80 81       	ld	r24, Z
     7b8:	89 27       	eor	r24, r25
     7ba:	80 83       	st	Z, r24

    if (timer2_toggle_count > 0)
     7bc:	80 91 02 04 	lds	r24, 0x0402
     7c0:	90 91 03 04 	lds	r25, 0x0403
     7c4:	a0 91 04 04 	lds	r26, 0x0404
     7c8:	b0 91 05 04 	lds	r27, 0x0405
     7cc:	18 16       	cp	r1, r24
     7ce:	19 06       	cpc	r1, r25
     7d0:	1a 06       	cpc	r1, r26
     7d2:	1b 06       	cpc	r1, r27
     7d4:	bc f4       	brge	.+46     	; 0x804 <__vector_7+0x94>
      timer2_toggle_count--;
     7d6:	80 91 02 04 	lds	r24, 0x0402
     7da:	90 91 03 04 	lds	r25, 0x0403
     7de:	a0 91 04 04 	lds	r26, 0x0404
     7e2:	b0 91 05 04 	lds	r27, 0x0405
     7e6:	01 97       	sbiw	r24, 0x01	; 1
     7e8:	a1 09       	sbc	r26, r1
     7ea:	b1 09       	sbc	r27, r1
     7ec:	80 93 02 04 	sts	0x0402, r24
     7f0:	90 93 03 04 	sts	0x0403, r25
     7f4:	a0 93 04 04 	sts	0x0404, r26
     7f8:	b0 93 05 04 	sts	0x0405, r27
     7fc:	03 c0       	rjmp	.+6      	; 0x804 <__vector_7+0x94>
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
     7fe:	80 91 0a 01 	lds	r24, 0x010A
     802:	a3 df       	rcall	.-186    	; 0x74a <_Z6noToneh>
     804:	ff 91       	pop	r31
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
     806:	ef 91       	pop	r30
     808:	bf 91       	pop	r27
     80a:	af 91       	pop	r26
     80c:	9f 91       	pop	r25
     80e:	8f 91       	pop	r24
     810:	7f 91       	pop	r23
     812:	6f 91       	pop	r22
     814:	5f 91       	pop	r21
     816:	4f 91       	pop	r20
     818:	3f 91       	pop	r19
     81a:	2f 91       	pop	r18
     81c:	0f 90       	pop	r0
     81e:	0f be       	out	0x3f, r0	; 63
     820:	0f 90       	pop	r0
     822:	1f 90       	pop	r1
     824:	18 95       	reti

00000826 <attachInterrupt>:

static volatile voidFuncPtr intFunc[EXTERNAL_NUM_INTERRUPTS];
// volatile static voidFuncPtr twiIntFunc;

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
     826:	82 30       	cpi	r24, 0x02	; 2
     828:	e8 f4       	brcc	.+58     	; 0x864 <attachInterrupt+0x3e>
    intFunc[interruptNum] = userFunc;
     82a:	e8 2f       	mov	r30, r24
     82c:	f0 e0       	ldi	r31, 0x00	; 0
     82e:	ee 0f       	add	r30, r30
     830:	ff 1f       	adc	r31, r31
     832:	ea 5f       	subi	r30, 0xFA	; 250
     834:	fb 4f       	sbci	r31, 0xFB	; 251
     836:	71 83       	std	Z+1, r23	; 0x01
     838:	60 83       	st	Z, r22
    // to the configuration bits in the hardware register, so we simply shift
    // the mode into place.
      
    // Enable the interrupt.
      
    switch (interruptNum) {
     83a:	81 30       	cpi	r24, 0x01	; 1
     83c:	41 f0       	breq	.+16     	; 0x84e <attachInterrupt+0x28>
      EIMSK |= (1 << INT7);
      break;
#else		
    case 0:
    #if defined(EICRA) && defined(ISC00) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
     83e:	80 91 69 00 	lds	r24, 0x0069
     842:	8c 7f       	andi	r24, 0xFC	; 252
     844:	84 2b       	or	r24, r20
     846:	80 93 69 00 	sts	0x0069, r24
      EIMSK |= (1 << INT0);
     84a:	e8 9a       	sbi	0x1d, 0	; 29
      MCUCR = (MCUCR & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
      GIMSK |= (1 << INT0);
    #else
      #error attachInterrupt not finished for this CPU (case 0)
    #endif
      break;
     84c:	08 95       	ret

    case 1:
    #if defined(EICRA) && defined(ISC10) && defined(ISC11) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
     84e:	80 91 69 00 	lds	r24, 0x0069
     852:	44 0f       	add	r20, r20
     854:	55 1f       	adc	r21, r21
     856:	44 0f       	add	r20, r20
     858:	55 1f       	adc	r21, r21
     85a:	83 7f       	andi	r24, 0xF3	; 243
     85c:	84 2b       	or	r24, r20
     85e:	80 93 69 00 	sts	0x0069, r24
      EIMSK |= (1 << INT1);
     862:	e9 9a       	sbi	0x1d, 1	; 29
     864:	08 95       	ret

00000866 <__vector_1>:
    intFunc[EXTERNAL_INT_7]();
}

#else

ISR(INT0_vect) {
     866:	1f 92       	push	r1
     868:	0f 92       	push	r0
     86a:	0f b6       	in	r0, 0x3f	; 63
     86c:	0f 92       	push	r0
     86e:	11 24       	eor	r1, r1
     870:	2f 93       	push	r18
     872:	3f 93       	push	r19
     874:	4f 93       	push	r20
     876:	5f 93       	push	r21
     878:	6f 93       	push	r22
     87a:	7f 93       	push	r23
     87c:	8f 93       	push	r24
     87e:	9f 93       	push	r25
     880:	af 93       	push	r26
     882:	bf 93       	push	r27
     884:	ef 93       	push	r30
     886:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_0])
     888:	80 91 06 04 	lds	r24, 0x0406
     88c:	90 91 07 04 	lds	r25, 0x0407
     890:	89 2b       	or	r24, r25
     892:	29 f0       	breq	.+10     	; 0x89e <__vector_1+0x38>
    intFunc[EXTERNAL_INT_0]();
     894:	e0 91 06 04 	lds	r30, 0x0406
     898:	f0 91 07 04 	lds	r31, 0x0407
     89c:	09 95       	icall
}
     89e:	ff 91       	pop	r31
     8a0:	ef 91       	pop	r30
     8a2:	bf 91       	pop	r27
     8a4:	af 91       	pop	r26
     8a6:	9f 91       	pop	r25
     8a8:	8f 91       	pop	r24
     8aa:	7f 91       	pop	r23
     8ac:	6f 91       	pop	r22
     8ae:	5f 91       	pop	r21
     8b0:	4f 91       	pop	r20
     8b2:	3f 91       	pop	r19
     8b4:	2f 91       	pop	r18
     8b6:	0f 90       	pop	r0
     8b8:	0f be       	out	0x3f, r0	; 63
     8ba:	0f 90       	pop	r0
     8bc:	1f 90       	pop	r1
     8be:	18 95       	reti

000008c0 <__vector_2>:

ISR(INT1_vect) {
     8c0:	1f 92       	push	r1
     8c2:	0f 92       	push	r0
     8c4:	0f b6       	in	r0, 0x3f	; 63
     8c6:	0f 92       	push	r0
     8c8:	11 24       	eor	r1, r1
     8ca:	2f 93       	push	r18
     8cc:	3f 93       	push	r19
     8ce:	4f 93       	push	r20
     8d0:	5f 93       	push	r21
     8d2:	6f 93       	push	r22
     8d4:	7f 93       	push	r23
     8d6:	8f 93       	push	r24
     8d8:	9f 93       	push	r25
     8da:	af 93       	push	r26
     8dc:	bf 93       	push	r27
     8de:	ef 93       	push	r30
     8e0:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_1])
     8e2:	80 91 08 04 	lds	r24, 0x0408
     8e6:	90 91 09 04 	lds	r25, 0x0409
     8ea:	89 2b       	or	r24, r25
     8ec:	29 f0       	breq	.+10     	; 0x8f8 <__vector_2+0x38>
    intFunc[EXTERNAL_INT_1]();
     8ee:	e0 91 08 04 	lds	r30, 0x0408
     8f2:	f0 91 09 04 	lds	r31, 0x0409
     8f6:	09 95       	icall
}
     8f8:	ff 91       	pop	r31
     8fa:	ef 91       	pop	r30
     8fc:	bf 91       	pop	r27
     8fe:	af 91       	pop	r26
     900:	9f 91       	pop	r25
     902:	8f 91       	pop	r24
     904:	7f 91       	pop	r23
     906:	6f 91       	pop	r22
     908:	5f 91       	pop	r21
     90a:	4f 91       	pop	r20
     90c:	3f 91       	pop	r19
     90e:	2f 91       	pop	r18
     910:	0f 90       	pop	r0
     912:	0f be       	out	0x3f, r0	; 63
     914:	0f 90       	pop	r0
     916:	1f 90       	pop	r1
     918:	18 95       	reti

0000091a <_ZN6StringD1Ev>:
	*this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
	free(buffer);
     91a:	fc 01       	movw	r30, r24
     91c:	80 81       	ld	r24, Z
     91e:	91 81       	ldd	r25, Z+1	; 0x01
     920:	0c 94 ab 1d 	jmp	0x3b56	; 0x3b56 <free>

00000924 <_ZN6String10invalidateEv>:
	capacity = 0;
	len = 0;
}

void String::invalidate(void)
{
     924:	cf 93       	push	r28
     926:	df 93       	push	r29
     928:	ec 01       	movw	r28, r24
	if (buffer) free(buffer);
     92a:	88 81       	ld	r24, Y
     92c:	99 81       	ldd	r25, Y+1	; 0x01
     92e:	00 97       	sbiw	r24, 0x00	; 0
     930:	11 f0       	breq	.+4      	; 0x936 <_ZN6String10invalidateEv+0x12>
     932:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <free>
	buffer = NULL;
     936:	19 82       	std	Y+1, r1	; 0x01
     938:	18 82       	st	Y, r1
	capacity = len = 0;
     93a:	1d 82       	std	Y+5, r1	; 0x05
     93c:	1c 82       	std	Y+4, r1	; 0x04
     93e:	1b 82       	std	Y+3, r1	; 0x03
     940:	1a 82       	std	Y+2, r1	; 0x02
}
     942:	df 91       	pop	r29
     944:	cf 91       	pop	r28
     946:	08 95       	ret

00000948 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	cf 93       	push	r28
     94e:	df 93       	push	r29
     950:	ec 01       	movw	r28, r24
     952:	8b 01       	movw	r16, r22
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
     954:	6f 5f       	subi	r22, 0xFF	; 255
     956:	7f 4f       	sbci	r23, 0xFF	; 255
     958:	88 81       	ld	r24, Y
     95a:	99 81       	ldd	r25, Y+1	; 0x01
     95c:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <realloc>
	if (newbuffer) {
     960:	00 97       	sbiw	r24, 0x00	; 0
     962:	31 f0       	breq	.+12     	; 0x970 <_ZN6String12changeBufferEj+0x28>
		buffer = newbuffer;
     964:	99 83       	std	Y+1, r25	; 0x01
     966:	88 83       	st	Y, r24
		capacity = maxStrLen;
     968:	1b 83       	std	Y+3, r17	; 0x03
     96a:	0a 83       	std	Y+2, r16	; 0x02
		return 1;
     96c:	81 e0       	ldi	r24, 0x01	; 1
     96e:	01 c0       	rjmp	.+2      	; 0x972 <_ZN6String12changeBufferEj+0x2a>
	}
	return 0;
     970:	80 e0       	ldi	r24, 0x00	; 0
}
     972:	df 91       	pop	r29
     974:	cf 91       	pop	r28
     976:	1f 91       	pop	r17
     978:	0f 91       	pop	r16
     97a:	08 95       	ret

0000097c <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
     97c:	cf 93       	push	r28
     97e:	df 93       	push	r29
     980:	ec 01       	movw	r28, r24
	if (buffer && capacity >= size) return 1;
     982:	88 81       	ld	r24, Y
     984:	99 81       	ldd	r25, Y+1	; 0x01
     986:	89 2b       	or	r24, r25
     988:	29 f0       	breq	.+10     	; 0x994 <_ZN6String7reserveEj+0x18>
     98a:	8a 81       	ldd	r24, Y+2	; 0x02
     98c:	9b 81       	ldd	r25, Y+3	; 0x03
     98e:	86 17       	cp	r24, r22
     990:	97 07       	cpc	r25, r23
     992:	58 f4       	brcc	.+22     	; 0x9aa <_ZN6String7reserveEj+0x2e>
	if (changeBuffer(size)) {
     994:	ce 01       	movw	r24, r28
     996:	d8 df       	rcall	.-80     	; 0x948 <_ZN6String12changeBufferEj>
     998:	88 23       	and	r24, r24
     99a:	41 f0       	breq	.+16     	; 0x9ac <_ZN6String7reserveEj+0x30>
     99c:	8c 81       	ldd	r24, Y+4	; 0x04
		if (len == 0) buffer[0] = 0;
     99e:	9d 81       	ldd	r25, Y+5	; 0x05
     9a0:	89 2b       	or	r24, r25
     9a2:	19 f4       	brne	.+6      	; 0x9aa <_ZN6String7reserveEj+0x2e>
     9a4:	e8 81       	ld	r30, Y
     9a6:	f9 81       	ldd	r31, Y+1	; 0x01
     9a8:	10 82       	st	Z, r1
     9aa:	81 e0       	ldi	r24, 0x01	; 1
     9ac:	df 91       	pop	r29
		return 1;
	}
	return 0;
}
     9ae:	cf 91       	pop	r28
     9b0:	08 95       	ret

000009b2 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
     9b2:	ef 92       	push	r14
     9b4:	ff 92       	push	r15
     9b6:	0f 93       	push	r16
     9b8:	1f 93       	push	r17
     9ba:	cf 93       	push	r28
     9bc:	df 93       	push	r29
     9be:	ec 01       	movw	r28, r24
     9c0:	7b 01       	movw	r14, r22
     9c2:	8a 01       	movw	r16, r20
	if (!reserve(length)) {
     9c4:	ba 01       	movw	r22, r20
     9c6:	da df       	rcall	.-76     	; 0x97c <_ZN6String7reserveEj>
     9c8:	81 11       	cpse	r24, r1
     9ca:	03 c0       	rjmp	.+6      	; 0x9d2 <_ZN6String4copyEPKcj+0x20>
     9cc:	ce 01       	movw	r24, r28
		invalidate();
     9ce:	aa df       	rcall	.-172    	; 0x924 <_ZN6String10invalidateEv>
     9d0:	07 c0       	rjmp	.+14     	; 0x9e0 <_ZN6String4copyEPKcj+0x2e>
     9d2:	1d 83       	std	Y+5, r17	; 0x05
		return *this;
     9d4:	0c 83       	std	Y+4, r16	; 0x04
	}
	len = length;
     9d6:	b7 01       	movw	r22, r14
     9d8:	88 81       	ld	r24, Y
	strcpy(buffer, cstr);
     9da:	99 81       	ldd	r25, Y+1	; 0x01
     9dc:	0e 94 06 1f 	call	0x3e0c	; 0x3e0c <strcpy>
     9e0:	ce 01       	movw	r24, r28
     9e2:	df 91       	pop	r29
	return *this;
}
     9e4:	cf 91       	pop	r28
     9e6:	1f 91       	pop	r17
     9e8:	0f 91       	pop	r16
     9ea:	ff 90       	pop	r15
     9ec:	ef 90       	pop	r14
     9ee:	08 95       	ret

000009f0 <_ZN6StringC1EPKc>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
     9f0:	fc 01       	movw	r30, r24
     9f2:	11 82       	std	Z+1, r1	; 0x01
     9f4:	10 82       	st	Z, r1
	capacity = 0;
     9f6:	13 82       	std	Z+3, r1	; 0x03
     9f8:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
     9fa:	15 82       	std	Z+5, r1	; 0x05
     9fc:	14 82       	std	Z+4, r1	; 0x04
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
     9fe:	61 15       	cp	r22, r1
     a00:	71 05       	cpc	r23, r1
     a02:	51 f0       	breq	.+20     	; 0xa18 <_ZN6StringC1EPKc+0x28>
     a04:	fb 01       	movw	r30, r22
     a06:	01 90       	ld	r0, Z+
     a08:	00 20       	and	r0, r0
     a0a:	e9 f7       	brne	.-6      	; 0xa06 <_ZN6StringC1EPKc+0x16>
     a0c:	af 01       	movw	r20, r30
     a0e:	41 50       	subi	r20, 0x01	; 1
     a10:	51 09       	sbc	r21, r1
     a12:	46 1b       	sub	r20, r22
     a14:	57 0b       	sbc	r21, r23
     a16:	cd cf       	rjmp	.-102    	; 0x9b2 <_ZN6String4copyEPKcj>
     a18:	08 95       	ret

00000a1a <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
     a1a:	08 95       	ret

00000a1c <initVariant>:
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
     a1c:	08 95       	ret

00000a1e <main>:

int main(void)
{
	init();
     a1e:	b4 d0       	rcall	.+360    	; 0xb88 <init>
     a20:	fd df       	rcall	.-6      	; 0xa1c <initVariant>

	initVariant();
     a22:	0e 94 07 14 	call	0x280e	; 0x280e <setup>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     a26:	cf eb       	ldi	r28, 0xBF	; 191
     a28:	d0 e0       	ldi	r29, 0x00	; 0
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     a2a:	0e 94 8a 1c 	call	0x3914	; 0x3914 <loop>
#endif
	
	setup();
    
	for (;;) {
		loop();
     a2e:	20 97       	sbiw	r28, 0x00	; 0
     a30:	e1 f3       	breq	.-8      	; 0xa2a <main+0xc>
		if (serialEventRun) serialEventRun();
     a32:	a5 db       	rcall	.-2230   	; 0x17e <_Z14serialEventRunv>
     a34:	fa cf       	rjmp	.-12     	; 0xa2a <main+0xc>

00000a36 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
     a36:	1f 92       	push	r1
     a38:	0f 92       	push	r0
     a3a:	0f b6       	in	r0, 0x3f	; 63
     a3c:	0f 92       	push	r0
     a3e:	11 24       	eor	r1, r1
     a40:	2f 93       	push	r18
     a42:	3f 93       	push	r19
     a44:	8f 93       	push	r24
     a46:	9f 93       	push	r25
     a48:	af 93       	push	r26
     a4a:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
     a4c:	80 91 0b 04 	lds	r24, 0x040B
     a50:	90 91 0c 04 	lds	r25, 0x040C
     a54:	a0 91 0d 04 	lds	r26, 0x040D
     a58:	b0 91 0e 04 	lds	r27, 0x040E
	unsigned char f = timer0_fract;
     a5c:	30 91 0a 04 	lds	r19, 0x040A

	m += MILLIS_INC;
	f += FRACT_INC;
     a60:	23 e0       	ldi	r18, 0x03	; 3
     a62:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
     a64:	2d 37       	cpi	r18, 0x7D	; 125
     a66:	20 f4       	brcc	.+8      	; 0xa70 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
     a68:	01 96       	adiw	r24, 0x01	; 1
     a6a:	a1 1d       	adc	r26, r1
     a6c:	b1 1d       	adc	r27, r1
     a6e:	05 c0       	rjmp	.+10     	; 0xa7a <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
     a70:	26 e8       	ldi	r18, 0x86	; 134
     a72:	23 0f       	add	r18, r19
		m += 1;
     a74:	02 96       	adiw	r24, 0x02	; 2
     a76:	a1 1d       	adc	r26, r1
     a78:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
     a7a:	20 93 0a 04 	sts	0x040A, r18
	timer0_millis = m;
     a7e:	80 93 0b 04 	sts	0x040B, r24
     a82:	90 93 0c 04 	sts	0x040C, r25
     a86:	a0 93 0d 04 	sts	0x040D, r26
     a8a:	b0 93 0e 04 	sts	0x040E, r27
	timer0_overflow_count++;
     a8e:	80 91 0f 04 	lds	r24, 0x040F
     a92:	90 91 10 04 	lds	r25, 0x0410
     a96:	a0 91 11 04 	lds	r26, 0x0411
     a9a:	b0 91 12 04 	lds	r27, 0x0412
     a9e:	01 96       	adiw	r24, 0x01	; 1
     aa0:	a1 1d       	adc	r26, r1
     aa2:	b1 1d       	adc	r27, r1
     aa4:	80 93 0f 04 	sts	0x040F, r24
     aa8:	90 93 10 04 	sts	0x0410, r25
     aac:	a0 93 11 04 	sts	0x0411, r26
     ab0:	b0 93 12 04 	sts	0x0412, r27
}
     ab4:	bf 91       	pop	r27
     ab6:	af 91       	pop	r26
     ab8:	9f 91       	pop	r25
     aba:	8f 91       	pop	r24
     abc:	3f 91       	pop	r19
     abe:	2f 91       	pop	r18
     ac0:	0f 90       	pop	r0
     ac2:	0f be       	out	0x3f, r0	; 63
     ac4:	0f 90       	pop	r0
     ac6:	1f 90       	pop	r1
     ac8:	18 95       	reti

00000aca <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
     aca:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
     acc:	f8 94       	cli
	m = timer0_millis;
     ace:	60 91 0b 04 	lds	r22, 0x040B
     ad2:	70 91 0c 04 	lds	r23, 0x040C
     ad6:	80 91 0d 04 	lds	r24, 0x040D
     ada:	90 91 0e 04 	lds	r25, 0x040E
	SREG = oldSREG;
     ade:	2f bf       	out	0x3f, r18	; 63

	return m;
}
     ae0:	08 95       	ret

00000ae2 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     ae2:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
     ae4:	f8 94       	cli
	m = timer0_overflow_count;
     ae6:	80 91 0f 04 	lds	r24, 0x040F
     aea:	90 91 10 04 	lds	r25, 0x0410
     aee:	a0 91 11 04 	lds	r26, 0x0411
     af2:	b0 91 12 04 	lds	r27, 0x0412
#if defined(TCNT0)
	t = TCNT0;
     af6:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     af8:	a8 9b       	sbis	0x15, 0	; 21
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <micros+0x24>
     afc:	2f 3f       	cpi	r18, 0xFF	; 255
     afe:	19 f0       	breq	.+6      	; 0xb06 <micros+0x24>
		m++;
     b00:	01 96       	adiw	r24, 0x01	; 1
     b02:	a1 1d       	adc	r26, r1
     b04:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     b06:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
     b08:	66 27       	eor	r22, r22
     b0a:	78 2f       	mov	r23, r24
     b0c:	89 2f       	mov	r24, r25
     b0e:	9a 2f       	mov	r25, r26
     b10:	62 0f       	add	r22, r18
     b12:	71 1d       	adc	r23, r1
     b14:	81 1d       	adc	r24, r1
     b16:	91 1d       	adc	r25, r1
     b18:	42 e0       	ldi	r20, 0x02	; 2
     b1a:	66 0f       	add	r22, r22
     b1c:	77 1f       	adc	r23, r23
     b1e:	88 1f       	adc	r24, r24
     b20:	99 1f       	adc	r25, r25
     b22:	4a 95       	dec	r20
     b24:	d1 f7       	brne	.-12     	; 0xb1a <micros+0x38>
}
     b26:	08 95       	ret

00000b28 <delay>:

void delay(unsigned long ms)
{
     b28:	cf 92       	push	r12
     b2a:	df 92       	push	r13
     b2c:	ef 92       	push	r14
     b2e:	ff 92       	push	r15
     b30:	cf 93       	push	r28
     b32:	df 93       	push	r29
     b34:	6b 01       	movw	r12, r22
     b36:	7c 01       	movw	r14, r24
	uint16_t start = (uint16_t)micros();
     b38:	d4 df       	rcall	.-88     	; 0xae2 <micros>
     b3a:	eb 01       	movw	r28, r22
     b3c:	c1 14       	cp	r12, r1

	while (ms > 0) {
     b3e:	d1 04       	cpc	r13, r1
     b40:	e1 04       	cpc	r14, r1
     b42:	f1 04       	cpc	r15, r1
     b44:	79 f0       	breq	.+30     	; 0xb64 <delay+0x3c>
     b46:	69 df       	rcall	.-302    	; 0xa1a <yield>
		yield();
     b48:	cc df       	rcall	.-104    	; 0xae2 <micros>
     b4a:	6c 1b       	sub	r22, r28
		if (((uint16_t)micros() - start) >= 1000) {
     b4c:	7d 0b       	sbc	r23, r29
     b4e:	68 3e       	cpi	r22, 0xE8	; 232
     b50:	73 40       	sbci	r23, 0x03	; 3
     b52:	a0 f3       	brcs	.-24     	; 0xb3c <delay+0x14>
     b54:	81 e0       	ldi	r24, 0x01	; 1
     b56:	c8 1a       	sub	r12, r24
     b58:	d1 08       	sbc	r13, r1
			ms--;
     b5a:	e1 08       	sbc	r14, r1
     b5c:	f1 08       	sbc	r15, r1
     b5e:	c8 51       	subi	r28, 0x18	; 24
     b60:	dc 4f       	sbci	r29, 0xFC	; 252
     b62:	ec cf       	rjmp	.-40     	; 0xb3c <delay+0x14>
			start += 1000;
     b64:	df 91       	pop	r29
     b66:	cf 91       	pop	r28
     b68:	ff 90       	pop	r15
		}
	}
}
     b6a:	ef 90       	pop	r14
     b6c:	df 90       	pop	r13
     b6e:	cf 90       	pop	r12
     b70:	08 95       	ret

00000b72 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
     b72:	82 30       	cpi	r24, 0x02	; 2
     b74:	91 05       	cpc	r25, r1
     b76:	38 f0       	brcs	.+14     	; 0xb86 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
     b78:	88 0f       	add	r24, r24
     b7a:	99 1f       	adc	r25, r25
     b7c:	88 0f       	add	r24, r24
     b7e:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
     b80:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	f1 f7       	brne	.-4      	; 0xb82 <delayMicroseconds+0x10>
     b86:	08 95       	ret

00000b88 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     b88:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     b8a:	84 b5       	in	r24, 0x24	; 36
     b8c:	82 60       	ori	r24, 0x02	; 2
     b8e:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     b90:	84 b5       	in	r24, 0x24	; 36
     b92:	81 60       	ori	r24, 0x01	; 1
     b94:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     b96:	85 b5       	in	r24, 0x25	; 37
     b98:	82 60       	ori	r24, 0x02	; 2
     b9a:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     b9c:	85 b5       	in	r24, 0x25	; 37
     b9e:	81 60       	ori	r24, 0x01	; 1
     ba0:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     ba2:	ee e6       	ldi	r30, 0x6E	; 110
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	80 81       	ld	r24, Z
     ba8:	81 60       	ori	r24, 0x01	; 1
     baa:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     bac:	e1 e8       	ldi	r30, 0x81	; 129
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     bb2:	80 81       	ld	r24, Z
     bb4:	82 60       	ori	r24, 0x02	; 2
     bb6:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     bb8:	80 81       	ld	r24, Z
     bba:	81 60       	ori	r24, 0x01	; 1
     bbc:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     bbe:	e0 e8       	ldi	r30, 0x80	; 128
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	80 81       	ld	r24, Z
     bc4:	81 60       	ori	r24, 0x01	; 1
     bc6:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     bc8:	e1 eb       	ldi	r30, 0xB1	; 177
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	80 81       	ld	r24, Z
     bce:	84 60       	ori	r24, 0x04	; 4
     bd0:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     bd2:	e0 eb       	ldi	r30, 0xB0	; 176
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	80 81       	ld	r24, Z
     bd8:	81 60       	ori	r24, 0x01	; 1
     bda:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     bdc:	ea e7       	ldi	r30, 0x7A	; 122
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	80 81       	ld	r24, Z
     be2:	84 60       	ori	r24, 0x04	; 4
     be4:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     be6:	80 81       	ld	r24, Z
     be8:	82 60       	ori	r24, 0x02	; 2
     bea:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     bec:	80 81       	ld	r24, Z
     bee:	81 60       	ori	r24, 0x01	; 1
     bf0:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     bf2:	80 81       	ld	r24, Z
     bf4:	80 68       	ori	r24, 0x80	; 128
     bf6:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     bf8:	10 92 c1 00 	sts	0x00C1, r1
     bfc:	08 95       	ret

00000bfe <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     bfe:	83 30       	cpi	r24, 0x03	; 3
     c00:	81 f0       	breq	.+32     	; 0xc22 <turnOffPWM+0x24>
     c02:	28 f4       	brcc	.+10     	; 0xc0e <turnOffPWM+0x10>
     c04:	81 30       	cpi	r24, 0x01	; 1
     c06:	99 f0       	breq	.+38     	; 0xc2e <turnOffPWM+0x30>
     c08:	82 30       	cpi	r24, 0x02	; 2
     c0a:	a1 f0       	breq	.+40     	; 0xc34 <turnOffPWM+0x36>
     c0c:	08 95       	ret
     c0e:	87 30       	cpi	r24, 0x07	; 7
     c10:	a9 f0       	breq	.+42     	; 0xc3c <turnOffPWM+0x3e>
     c12:	88 30       	cpi	r24, 0x08	; 8
     c14:	b9 f0       	breq	.+46     	; 0xc44 <turnOffPWM+0x46>
     c16:	84 30       	cpi	r24, 0x04	; 4
     c18:	d1 f4       	brne	.+52     	; 0xc4e <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     c1a:	80 91 80 00 	lds	r24, 0x0080
     c1e:	8f 7d       	andi	r24, 0xDF	; 223
     c20:	03 c0       	rjmp	.+6      	; 0xc28 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     c22:	80 91 80 00 	lds	r24, 0x0080
     c26:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     c28:	80 93 80 00 	sts	0x0080, r24
     c2c:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     c2e:	84 b5       	in	r24, 0x24	; 36
     c30:	8f 77       	andi	r24, 0x7F	; 127
     c32:	02 c0       	rjmp	.+4      	; 0xc38 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     c34:	84 b5       	in	r24, 0x24	; 36
     c36:	8f 7d       	andi	r24, 0xDF	; 223
     c38:	84 bd       	out	0x24, r24	; 36
     c3a:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     c3c:	80 91 b0 00 	lds	r24, 0x00B0
     c40:	8f 77       	andi	r24, 0x7F	; 127
     c42:	03 c0       	rjmp	.+6      	; 0xc4a <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     c44:	80 91 b0 00 	lds	r24, 0x00B0
     c48:	8f 7d       	andi	r24, 0xDF	; 223
     c4a:	80 93 b0 00 	sts	0x00B0, r24
     c4e:	08 95       	ret

00000c50 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     c50:	cf 93       	push	r28
     c52:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	fc 01       	movw	r30, r24
     c58:	e3 58       	subi	r30, 0x83	; 131
     c5a:	ff 4f       	sbci	r31, 0xFF	; 255
     c5c:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     c5e:	fc 01       	movw	r30, r24
     c60:	ef 56       	subi	r30, 0x6F	; 111
     c62:	ff 4f       	sbci	r31, 0xFF	; 255
     c64:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     c66:	88 23       	and	r24, r24
     c68:	49 f1       	breq	.+82     	; 0xcbc <pinMode+0x6c>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	88 0f       	add	r24, r24
     c6e:	99 1f       	adc	r25, r25
     c70:	fc 01       	movw	r30, r24
     c72:	e7 54       	subi	r30, 0x47	; 71
     c74:	ff 4f       	sbci	r31, 0xFF	; 255
     c76:	a5 91       	lpm	r26, Z+
     c78:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
     c7a:	81 55       	subi	r24, 0x51	; 81
     c7c:	9f 4f       	sbci	r25, 0xFF	; 255
     c7e:	fc 01       	movw	r30, r24
     c80:	c5 91       	lpm	r28, Z+
     c82:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
		uint8_t oldSREG = SREG;
     c84:	9f b7       	in	r25, 0x3f	; 63

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
	out = portOutputRegister(port);

	if (mode == INPUT) { 
     c86:	61 11       	cpse	r22, r1
     c88:	08 c0       	rjmp	.+16     	; 0xc9a <pinMode+0x4a>
		uint8_t oldSREG = SREG;
                cli();
     c8a:	f8 94       	cli
		*reg &= ~bit;
     c8c:	8c 91       	ld	r24, X
     c8e:	20 95       	com	r18
     c90:	82 23       	and	r24, r18
     c92:	8c 93       	st	X, r24
		*out &= ~bit;
     c94:	88 81       	ld	r24, Y
     c96:	82 23       	and	r24, r18
     c98:	0a c0       	rjmp	.+20     	; 0xcae <pinMode+0x5e>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
     c9a:	62 30       	cpi	r22, 0x02	; 2
     c9c:	51 f4       	brne	.+20     	; 0xcb2 <pinMode+0x62>
		uint8_t oldSREG = SREG;
                cli();
     c9e:	f8 94       	cli
		*reg &= ~bit;
     ca0:	8c 91       	ld	r24, X
     ca2:	32 2f       	mov	r19, r18
     ca4:	30 95       	com	r19
     ca6:	83 23       	and	r24, r19
     ca8:	8c 93       	st	X, r24
		*out |= bit;
     caa:	88 81       	ld	r24, Y
     cac:	82 2b       	or	r24, r18
     cae:	88 83       	st	Y, r24
     cb0:	04 c0       	rjmp	.+8      	; 0xcba <pinMode+0x6a>
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
                cli();
     cb2:	f8 94       	cli
		*reg |= bit;
     cb4:	8c 91       	ld	r24, X
     cb6:	82 2b       	or	r24, r18
     cb8:	8c 93       	st	X, r24
		SREG = oldSREG;
     cba:	9f bf       	out	0x3f, r25	; 63
	}
}
     cbc:	df 91       	pop	r29
     cbe:	cf 91       	pop	r28
     cc0:	08 95       	ret

00000cc2 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     cc2:	0f 93       	push	r16
     cc4:	1f 93       	push	r17
     cc6:	cf 93       	push	r28
     cc8:	df 93       	push	r29
     cca:	1f 92       	push	r1
     ccc:	cd b7       	in	r28, 0x3d	; 61
     cce:	de b7       	in	r29, 0x3e	; 62
	uint8_t timer = digitalPinToTimer(pin);
     cd0:	28 2f       	mov	r18, r24
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	f9 01       	movw	r30, r18
     cd6:	e7 59       	subi	r30, 0x97	; 151
     cd8:	ff 4f       	sbci	r31, 0xFF	; 255
     cda:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     cdc:	f9 01       	movw	r30, r18
     cde:	e3 58       	subi	r30, 0x83	; 131
     ce0:	ff 4f       	sbci	r31, 0xFF	; 255
     ce2:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
     ce4:	f9 01       	movw	r30, r18
     ce6:	ef 56       	subi	r30, 0x6F	; 111
     ce8:	ff 4f       	sbci	r31, 0xFF	; 255
     cea:	04 91       	lpm	r16, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     cec:	00 23       	and	r16, r16
     cee:	c1 f0       	breq	.+48     	; 0xd20 <digitalWrite+0x5e>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     cf0:	88 23       	and	r24, r24
     cf2:	19 f0       	breq	.+6      	; 0xcfa <digitalWrite+0x38>
     cf4:	69 83       	std	Y+1, r22	; 0x01
     cf6:	83 df       	rcall	.-250    	; 0xbfe <turnOffPWM>
     cf8:	69 81       	ldd	r22, Y+1	; 0x01
     cfa:	e0 2f       	mov	r30, r16

	out = portOutputRegister(port);
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	ee 0f       	add	r30, r30
     d00:	ff 1f       	adc	r31, r31
     d02:	e1 55       	subi	r30, 0x51	; 81
     d04:	ff 4f       	sbci	r31, 0xFF	; 255
     d06:	a5 91       	lpm	r26, Z+
     d08:	b4 91       	lpm	r27, Z
     d0a:	9f b7       	in	r25, 0x3f	; 63

	uint8_t oldSREG = SREG;
     d0c:	f8 94       	cli
	cli();
     d0e:	8c 91       	ld	r24, X

	if (val == LOW) {
		*out &= ~bit;
     d10:	61 11       	cpse	r22, r1
	out = portOutputRegister(port);

	uint8_t oldSREG = SREG;
	cli();

	if (val == LOW) {
     d12:	03 c0       	rjmp	.+6      	; 0xd1a <digitalWrite+0x58>
     d14:	10 95       	com	r17
		*out &= ~bit;
     d16:	81 23       	and	r24, r17
     d18:	01 c0       	rjmp	.+2      	; 0xd1c <digitalWrite+0x5a>
     d1a:	81 2b       	or	r24, r17
	} else {
		*out |= bit;
     d1c:	8c 93       	st	X, r24
     d1e:	9f bf       	out	0x3f, r25	; 63
	}

	SREG = oldSREG;
     d20:	0f 90       	pop	r0
}
     d22:	df 91       	pop	r29
     d24:	cf 91       	pop	r28
     d26:	1f 91       	pop	r17
     d28:	0f 91       	pop	r16
     d2a:	08 95       	ret

00000d2c <digitalRead>:

int digitalRead(uint8_t pin)
{
     d2c:	cf 93       	push	r28
     d2e:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     d30:	28 2f       	mov	r18, r24
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	f9 01       	movw	r30, r18
     d36:	e7 59       	subi	r30, 0x97	; 151
     d38:	ff 4f       	sbci	r31, 0xFF	; 255
     d3a:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     d3c:	f9 01       	movw	r30, r18
     d3e:	e3 58       	subi	r30, 0x83	; 131
     d40:	ff 4f       	sbci	r31, 0xFF	; 255
     d42:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
     d44:	f9 01       	movw	r30, r18
     d46:	ef 56       	subi	r30, 0x6F	; 111
     d48:	ff 4f       	sbci	r31, 0xFF	; 255
     d4a:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
     d4c:	cc 23       	and	r28, r28
     d4e:	89 f0       	breq	.+34     	; 0xd72 <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     d50:	81 11       	cpse	r24, r1
     d52:	55 df       	rcall	.-342    	; 0xbfe <turnOffPWM>
     d54:	ec 2f       	mov	r30, r28

	if (*portInputRegister(port) & bit) return HIGH;
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	ee 0f       	add	r30, r30
     d5a:	ff 1f       	adc	r31, r31
     d5c:	eb 55       	subi	r30, 0x5B	; 91
     d5e:	ff 4f       	sbci	r31, 0xFF	; 255
     d60:	a5 91       	lpm	r26, Z+
     d62:	b4 91       	lpm	r27, Z
     d64:	2c 91       	ld	r18, X
     d66:	2d 23       	and	r18, r29
     d68:	81 e0       	ldi	r24, 0x01	; 1
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	21 f4       	brne	.+8      	; 0xd76 <digitalRead+0x4a>
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	02 c0       	rjmp	.+4      	; 0xd76 <digitalRead+0x4a>
     d72:	80 e0       	ldi	r24, 0x00	; 0
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	df 91       	pop	r29
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
     d78:	cf 91       	pop	r28
     d7a:	08 95       	ret

00000d7c <twi_init>:
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
     d7c:	10 92 80 04 	sts	0x0480, r1
  twi_sendStop = true;		// default value
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	80 93 7e 04 	sts	0x047E, r24
  twi_inRepStart = false;
     d86:	10 92 7d 04 	sts	0x047D, r1
  
  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
     d8a:	61 e0       	ldi	r22, 0x01	; 1
     d8c:	82 e1       	ldi	r24, 0x12	; 18
     d8e:	99 df       	rcall	.-206    	; 0xcc2 <digitalWrite>
     d90:	61 e0       	ldi	r22, 0x01	; 1
  digitalWrite(SCL, 1);
     d92:	83 e1       	ldi	r24, 0x13	; 19
     d94:	96 df       	rcall	.-212    	; 0xcc2 <digitalWrite>
     d96:	e9 eb       	ldi	r30, 0xB9	; 185
     d98:	f0 e0       	ldi	r31, 0x00	; 0

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
     d9a:	80 81       	ld	r24, Z
     d9c:	8e 7f       	andi	r24, 0xFE	; 254
     d9e:	80 83       	st	Z, r24
     da0:	80 81       	ld	r24, Z
     da2:	8d 7f       	andi	r24, 0xFD	; 253
  cbi(TWSR, TWPS1);
     da4:	80 83       	st	Z, r24
     da6:	88 e4       	ldi	r24, 0x48	; 72
     da8:	80 93 b8 00 	sts	0x00B8, r24
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
     dac:	85 e4       	ldi	r24, 0x45	; 69
     dae:	80 93 bc 00 	sts	0x00BC, r24
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
     db2:	08 95       	ret

00000db4 <twi_readFrom>:
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length, uint8_t sendStop)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
     db4:	41 32       	cpi	r20, 0x21	; 33
     db6:	08 f0       	brcs	.+2      	; 0xdba <twi_readFrom+0x6>
     db8:	3f c0       	rjmp	.+126    	; 0xe38 <twi_readFrom+0x84>
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
     dba:	90 91 80 04 	lds	r25, 0x0480
     dbe:	91 11       	cpse	r25, r1
     dc0:	fc cf       	rjmp	.-8      	; 0xdba <twi_readFrom+0x6>
    continue;
  }
  twi_state = TWI_MRX;
     dc2:	91 e0       	ldi	r25, 0x01	; 1
     dc4:	90 93 80 04 	sts	0x0480, r25
  twi_sendStop = sendStop;
     dc8:	20 93 7e 04 	sts	0x047E, r18
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
     dcc:	2f ef       	ldi	r18, 0xFF	; 255
     dce:	20 93 13 04 	sts	0x0413, r18

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
     dd2:	10 92 58 04 	sts	0x0458, r1
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
     dd6:	24 0f       	add	r18, r20
     dd8:	20 93 57 04 	sts	0x0457, r18
  // Therefor we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
     ddc:	90 93 7f 04 	sts	0x047F, r25
  twi_slarw |= address << 1;
     de0:	90 91 7f 04 	lds	r25, 0x047F
     de4:	88 0f       	add	r24, r24
     de6:	89 2b       	or	r24, r25
     de8:	80 93 7f 04 	sts	0x047F, r24

  if (true == twi_inRepStart) {
     dec:	80 91 7d 04 	lds	r24, 0x047D
     df0:	81 30       	cpi	r24, 0x01	; 1
     df2:	41 f4       	brne	.+16     	; 0xe04 <twi_readFrom+0x50>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
     df4:	10 92 7d 04 	sts	0x047D, r1
    TWDR = twi_slarw;
     df8:	80 91 7f 04 	lds	r24, 0x047F
     dfc:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
     e00:	85 ec       	ldi	r24, 0xC5	; 197
     e02:	01 c0       	rjmp	.+2      	; 0xe06 <twi_readFrom+0x52>
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
     e04:	85 ee       	ldi	r24, 0xE5	; 229
     e06:	80 93 bc 00 	sts	0x00BC, r24

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
     e0a:	80 91 80 04 	lds	r24, 0x0480
     e0e:	81 30       	cpi	r24, 0x01	; 1
     e10:	e1 f3       	breq	.-8      	; 0xe0a <twi_readFrom+0x56>
    continue;
  }

  if (twi_masterBufferIndex < length)
     e12:	80 91 58 04 	lds	r24, 0x0458
     e16:	84 17       	cp	r24, r20
     e18:	10 f4       	brcc	.+4      	; 0xe1e <twi_readFrom+0x6a>
    length = twi_masterBufferIndex;
     e1a:	40 91 58 04 	lds	r20, 0x0458
     e1e:	29 e5       	ldi	r18, 0x59	; 89
     e20:	34 e0       	ldi	r19, 0x04	; 4
     e22:	fb 01       	movw	r30, r22

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
     e24:	d9 01       	movw	r26, r18
     e26:	8a 2f       	mov	r24, r26
     e28:	82 1b       	sub	r24, r18
     e2a:	84 17       	cp	r24, r20
     e2c:	18 f4       	brcc	.+6      	; 0xe34 <twi_readFrom+0x80>
    data[i] = twi_masterBuffer[i];
     e2e:	8d 91       	ld	r24, X+
     e30:	81 93       	st	Z+, r24
     e32:	f9 cf       	rjmp	.-14     	; 0xe26 <twi_readFrom+0x72>
     e34:	84 2f       	mov	r24, r20
     e36:	08 95       	ret
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    return 0;
     e38:	80 e0       	ldi	r24, 0x00	; 0
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
  }
	
  return length;
}
     e3a:	08 95       	ret

00000e3c <twi_writeTo>:
 *          2 .. address send, NACK received
 *          3 .. data send, NACK received
 *          4 .. other twi error (lost bus arbitration, bus error, ..)
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
     e3c:	0f 93       	push	r16
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
     e3e:	41 32       	cpi	r20, 0x21	; 33
     e40:	08 f0       	brcs	.+2      	; 0xe44 <twi_writeTo+0x8>
     e42:	46 c0       	rjmp	.+140    	; 0xed0 <twi_writeTo+0x94>
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
     e44:	90 91 80 04 	lds	r25, 0x0480
     e48:	91 11       	cpse	r25, r1
     e4a:	fc cf       	rjmp	.-8      	; 0xe44 <twi_writeTo+0x8>
    continue;
  }
  twi_state = TWI_MTX;
     e4c:	92 e0       	ldi	r25, 0x02	; 2
     e4e:	90 93 80 04 	sts	0x0480, r25
  twi_sendStop = sendStop;
     e52:	00 93 7e 04 	sts	0x047E, r16
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
     e56:	9f ef       	ldi	r25, 0xFF	; 255
     e58:	90 93 13 04 	sts	0x0413, r25

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
     e5c:	10 92 58 04 	sts	0x0458, r1
  twi_masterBufferLength = length;
     e60:	40 93 57 04 	sts	0x0457, r20
     e64:	fb 01       	movw	r30, r22
     e66:	69 e5       	ldi	r22, 0x59	; 89
     e68:	74 e0       	ldi	r23, 0x04	; 4
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
     e6a:	db 01       	movw	r26, r22
     e6c:	9a 2f       	mov	r25, r26
     e6e:	96 1b       	sub	r25, r22
     e70:	94 17       	cp	r25, r20
     e72:	18 f4       	brcc	.+6      	; 0xe7a <twi_writeTo+0x3e>
    twi_masterBuffer[i] = data[i];
     e74:	91 91       	ld	r25, Z+
     e76:	9d 93       	st	X+, r25
     e78:	f9 cf       	rjmp	.-14     	; 0xe6c <twi_writeTo+0x30>
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
     e7a:	10 92 7f 04 	sts	0x047F, r1
  twi_slarw |= address << 1;
     e7e:	90 91 7f 04 	lds	r25, 0x047F
     e82:	88 0f       	add	r24, r24
     e84:	89 2b       	or	r24, r25
     e86:	80 93 7f 04 	sts	0x047F, r24
  
  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
     e8a:	80 91 7d 04 	lds	r24, 0x047D
     e8e:	81 30       	cpi	r24, 0x01	; 1
     e90:	41 f4       	brne	.+16     	; 0xea2 <twi_writeTo+0x66>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
     e92:	10 92 7d 04 	sts	0x047D, r1
    TWDR = twi_slarw;				
     e96:	80 91 7f 04 	lds	r24, 0x047F
     e9a:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
     e9e:	85 ec       	ldi	r24, 0xC5	; 197
     ea0:	01 c0       	rjmp	.+2      	; 0xea4 <twi_writeTo+0x68>
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);	// enable INTs
     ea2:	85 ee       	ldi	r24, 0xE5	; 229
     ea4:	80 93 bc 00 	sts	0x00BC, r24

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
     ea8:	22 23       	and	r18, r18
     eaa:	21 f0       	breq	.+8      	; 0xeb4 <twi_writeTo+0x78>
     eac:	80 91 80 04 	lds	r24, 0x0480
     eb0:	82 30       	cpi	r24, 0x02	; 2
     eb2:	e1 f3       	breq	.-8      	; 0xeac <twi_writeTo+0x70>
    continue;
  }
  
  if (twi_error == 0xFF)
     eb4:	80 91 13 04 	lds	r24, 0x0413
     eb8:	8f 3f       	cpi	r24, 0xFF	; 255
     eba:	61 f0       	breq	.+24     	; 0xed4 <twi_writeTo+0x98>
    return 0;	// success
  else if (twi_error == TW_MT_SLA_NACK)
     ebc:	80 91 13 04 	lds	r24, 0x0413
     ec0:	80 32       	cpi	r24, 0x20	; 32
     ec2:	51 f0       	breq	.+20     	; 0xed8 <twi_writeTo+0x9c>
    return 2;	// error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
     ec4:	80 91 13 04 	lds	r24, 0x0413
     ec8:	80 33       	cpi	r24, 0x30	; 48
     eca:	41 f4       	brne	.+16     	; 0xedc <twi_writeTo+0xa0>
    return 3;	// error: data send, nack received
     ecc:	83 e0       	ldi	r24, 0x03	; 3
     ece:	07 c0       	rjmp	.+14     	; 0xede <twi_writeTo+0xa2>
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    return 1;
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	05 c0       	rjmp	.+10     	; 0xede <twi_writeTo+0xa2>
  while(wait && (TWI_MTX == twi_state)){
    continue;
  }
  
  if (twi_error == 0xFF)
    return 0;	// success
     ed4:	80 e0       	ldi	r24, 0x00	; 0
     ed6:	03 c0       	rjmp	.+6      	; 0xede <twi_writeTo+0xa2>
  else if (twi_error == TW_MT_SLA_NACK)
    return 2;	// error: address send, nack received
     ed8:	82 e0       	ldi	r24, 0x02	; 2
     eda:	01 c0       	rjmp	.+2      	; 0xede <twi_writeTo+0xa2>
  else if (twi_error == TW_MT_DATA_NACK)
    return 3;	// error: data send, nack received
  else
    return 4;	// other twi error
     edc:	84 e0       	ldi	r24, 0x04	; 4
}
     ede:	0f 91       	pop	r16
     ee0:	08 95       	ret

00000ee2 <twi_transmit>:
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
     ee2:	61 32       	cpi	r22, 0x21	; 33
     ee4:	98 f4       	brcc	.+38     	; 0xf0c <twi_transmit+0x2a>
    return 1;
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
     ee6:	20 91 80 04 	lds	r18, 0x0480
     eea:	24 30       	cpi	r18, 0x04	; 4
     eec:	89 f4       	brne	.+34     	; 0xf10 <twi_transmit+0x2e>
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
     eee:	60 93 35 04 	sts	0x0435, r22
     ef2:	fc 01       	movw	r30, r24
     ef4:	87 e3       	ldi	r24, 0x37	; 55
     ef6:	94 e0       	ldi	r25, 0x04	; 4
  for(i = 0; i < length; ++i){
     ef8:	dc 01       	movw	r26, r24
     efa:	2a 2f       	mov	r18, r26
     efc:	28 1b       	sub	r18, r24
     efe:	26 17       	cp	r18, r22
     f00:	18 f4       	brcc	.+6      	; 0xf08 <twi_transmit+0x26>
    twi_txBuffer[i] = data[i];
     f02:	21 91       	ld	r18, Z+
     f04:	2d 93       	st	X+, r18
     f06:	f9 cf       	rjmp	.-14     	; 0xefa <twi_transmit+0x18>
  }
  
  return 0;
     f08:	80 e0       	ldi	r24, 0x00	; 0
     f0a:	08 95       	ret
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    return 1;
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	08 95       	ret
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    return 2;
     f10:	82 e0       	ldi	r24, 0x02	; 2
  for(i = 0; i < length; ++i){
    twi_txBuffer[i] = data[i];
  }
  
  return 0;
}
     f12:	08 95       	ret

00000f14 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     f14:	85 ed       	ldi	r24, 0xD5	; 213
     f16:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     f1a:	80 91 bc 00 	lds	r24, 0x00BC
     f1e:	84 fd       	sbrc	r24, 4
     f20:	fc cf       	rjmp	.-8      	; 0xf1a <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
     f22:	10 92 80 04 	sts	0x0480, r1
     f26:	08 95       	ret

00000f28 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
     f28:	85 ec       	ldi	r24, 0xC5	; 197
     f2a:	80 93 bc 00 	sts	0x00BC, r24

  // update twi state
  twi_state = TWI_READY;
     f2e:	10 92 80 04 	sts	0x0480, r1
     f32:	08 95       	ret

00000f34 <__vector_24>:
}

ISR(TWI_vect)
{
     f34:	1f 92       	push	r1
     f36:	0f 92       	push	r0
     f38:	0f b6       	in	r0, 0x3f	; 63
     f3a:	0f 92       	push	r0
     f3c:	11 24       	eor	r1, r1
     f3e:	2f 93       	push	r18
     f40:	3f 93       	push	r19
     f42:	4f 93       	push	r20
     f44:	5f 93       	push	r21
     f46:	6f 93       	push	r22
     f48:	7f 93       	push	r23
     f4a:	8f 93       	push	r24
     f4c:	9f 93       	push	r25
     f4e:	af 93       	push	r26
     f50:	bf 93       	push	r27
     f52:	ef 93       	push	r30
     f54:	ff 93       	push	r31
  switch(TW_STATUS){
     f56:	80 91 b9 00 	lds	r24, 0x00B9
     f5a:	88 7f       	andi	r24, 0xF8	; 248
     f5c:	80 36       	cpi	r24, 0x60	; 96
     f5e:	09 f4       	brne	.+2      	; 0xf62 <__vector_24+0x2e>
     f60:	9c c0       	rjmp	.+312    	; 0x109a <__vector_24+0x166>
     f62:	68 f5       	brcc	.+90     	; 0xfbe <__vector_24+0x8a>
     f64:	88 32       	cpi	r24, 0x28	; 40
     f66:	09 f4       	brne	.+2      	; 0xf6a <__vector_24+0x36>
     f68:	5b c0       	rjmp	.+182    	; 0x1020 <__vector_24+0xec>
     f6a:	90 f4       	brcc	.+36     	; 0xf90 <__vector_24+0x5c>
     f6c:	80 31       	cpi	r24, 0x10	; 16
     f6e:	09 f4       	brne	.+2      	; 0xf72 <__vector_24+0x3e>
     f70:	54 c0       	rjmp	.+168    	; 0x101a <__vector_24+0xe6>
     f72:	38 f4       	brcc	.+14     	; 0xf82 <__vector_24+0x4e>
     f74:	88 23       	and	r24, r24
     f76:	09 f4       	brne	.+2      	; 0xf7a <__vector_24+0x46>
     f78:	f3 c0       	rjmp	.+486    	; 0x1160 <__vector_24+0x22c>
     f7a:	88 30       	cpi	r24, 0x08	; 8
     f7c:	09 f4       	brne	.+2      	; 0xf80 <__vector_24+0x4c>
     f7e:	4d c0       	rjmp	.+154    	; 0x101a <__vector_24+0xe6>
     f80:	f2 c0       	rjmp	.+484    	; 0x1166 <__vector_24+0x232>
     f82:	88 31       	cpi	r24, 0x18	; 24
     f84:	09 f4       	brne	.+2      	; 0xf88 <__vector_24+0x54>
     f86:	4c c0       	rjmp	.+152    	; 0x1020 <__vector_24+0xec>
     f88:	80 32       	cpi	r24, 0x20	; 32
     f8a:	09 f4       	brne	.+2      	; 0xf8e <__vector_24+0x5a>
     f8c:	5d c0       	rjmp	.+186    	; 0x1048 <__vector_24+0x114>
     f8e:	eb c0       	rjmp	.+470    	; 0x1166 <__vector_24+0x232>
     f90:	80 34       	cpi	r24, 0x40	; 64
     f92:	09 f4       	brne	.+2      	; 0xf96 <__vector_24+0x62>
     f94:	68 c0       	rjmp	.+208    	; 0x1066 <__vector_24+0x132>
     f96:	48 f4       	brcc	.+18     	; 0xfaa <__vector_24+0x76>
     f98:	80 33       	cpi	r24, 0x30	; 48
     f9a:	09 f4       	brne	.+2      	; 0xf9e <__vector_24+0x6a>
     f9c:	55 c0       	rjmp	.+170    	; 0x1048 <__vector_24+0x114>
     f9e:	88 33       	cpi	r24, 0x38	; 56
     fa0:	09 f0       	breq	.+2      	; 0xfa4 <__vector_24+0x70>
     fa2:	e1 c0       	rjmp	.+450    	; 0x1166 <__vector_24+0x232>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
     fa4:	80 93 13 04 	sts	0x0413, r24
     fa8:	a7 c0       	rjmp	.+334    	; 0x10f8 <__vector_24+0x1c4>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
     faa:	80 35       	cpi	r24, 0x50	; 80
     fac:	09 f4       	brne	.+2      	; 0xfb0 <__vector_24+0x7c>
     fae:	4f c0       	rjmp	.+158    	; 0x104e <__vector_24+0x11a>
     fb0:	88 35       	cpi	r24, 0x58	; 88
     fb2:	09 f4       	brne	.+2      	; 0xfb6 <__vector_24+0x82>
     fb4:	5d c0       	rjmp	.+186    	; 0x1070 <__vector_24+0x13c>
     fb6:	88 34       	cpi	r24, 0x48	; 72
     fb8:	09 f0       	breq	.+2      	; 0xfbc <__vector_24+0x88>
     fba:	d5 c0       	rjmp	.+426    	; 0x1166 <__vector_24+0x232>
     fbc:	d3 c0       	rjmp	.+422    	; 0x1164 <__vector_24+0x230>
     fbe:	88 39       	cpi	r24, 0x98	; 152
     fc0:	09 f4       	brne	.+2      	; 0xfc4 <__vector_24+0x90>
     fc2:	c4 c0       	rjmp	.+392    	; 0x114c <__vector_24+0x218>
     fc4:	a8 f4       	brcc	.+42     	; 0xff0 <__vector_24+0xbc>
     fc6:	88 37       	cpi	r24, 0x78	; 120
     fc8:	09 f4       	brne	.+2      	; 0xfcc <__vector_24+0x98>
     fca:	67 c0       	rjmp	.+206    	; 0x109a <__vector_24+0x166>
     fcc:	38 f4       	brcc	.+14     	; 0xfdc <__vector_24+0xa8>
     fce:	88 36       	cpi	r24, 0x68	; 104
     fd0:	09 f4       	brne	.+2      	; 0xfd4 <__vector_24+0xa0>
     fd2:	63 c0       	rjmp	.+198    	; 0x109a <__vector_24+0x166>
     fd4:	80 37       	cpi	r24, 0x70	; 112
     fd6:	09 f4       	brne	.+2      	; 0xfda <__vector_24+0xa6>
     fd8:	60 c0       	rjmp	.+192    	; 0x109a <__vector_24+0x166>
     fda:	c5 c0       	rjmp	.+394    	; 0x1166 <__vector_24+0x232>
     fdc:	88 38       	cpi	r24, 0x88	; 136
     fde:	09 f4       	brne	.+2      	; 0xfe2 <__vector_24+0xae>
     fe0:	b5 c0       	rjmp	.+362    	; 0x114c <__vector_24+0x218>
     fe2:	80 39       	cpi	r24, 0x90	; 144
     fe4:	09 f4       	brne	.+2      	; 0xfe8 <__vector_24+0xb4>
     fe6:	5f c0       	rjmp	.+190    	; 0x10a6 <__vector_24+0x172>
     fe8:	80 38       	cpi	r24, 0x80	; 128
     fea:	09 f0       	breq	.+2      	; 0xfee <__vector_24+0xba>
     fec:	bc c0       	rjmp	.+376    	; 0x1166 <__vector_24+0x232>
     fee:	5b c0       	rjmp	.+182    	; 0x10a6 <__vector_24+0x172>
     ff0:	80 3b       	cpi	r24, 0xB0	; 176
     ff2:	09 f4       	brne	.+2      	; 0xff6 <__vector_24+0xc2>
     ff4:	83 c0       	rjmp	.+262    	; 0x10fc <__vector_24+0x1c8>
     ff6:	38 f4       	brcc	.+14     	; 0x1006 <__vector_24+0xd2>
     ff8:	80 3a       	cpi	r24, 0xA0	; 160
     ffa:	09 f4       	brne	.+2      	; 0xffe <__vector_24+0xca>
     ffc:	66 c0       	rjmp	.+204    	; 0x10ca <__vector_24+0x196>
     ffe:	88 3a       	cpi	r24, 0xA8	; 168
    1000:	09 f4       	brne	.+2      	; 0x1004 <__vector_24+0xd0>
    1002:	7c c0       	rjmp	.+248    	; 0x10fc <__vector_24+0x1c8>
    1004:	b0 c0       	rjmp	.+352    	; 0x1166 <__vector_24+0x232>
    1006:	80 3c       	cpi	r24, 0xC0	; 192
    1008:	09 f4       	brne	.+2      	; 0x100c <__vector_24+0xd8>
    100a:	a4 c0       	rjmp	.+328    	; 0x1154 <__vector_24+0x220>
    100c:	88 3c       	cpi	r24, 0xC8	; 200
    100e:	09 f4       	brne	.+2      	; 0x1012 <__vector_24+0xde>
    1010:	a1 c0       	rjmp	.+322    	; 0x1154 <__vector_24+0x220>
    1012:	88 3b       	cpi	r24, 0xB8	; 184
    1014:	09 f4       	brne	.+2      	; 0x1018 <__vector_24+0xe4>
    1016:	87 c0       	rjmp	.+270    	; 0x1126 <__vector_24+0x1f2>
    1018:	a6 c0       	rjmp	.+332    	; 0x1166 <__vector_24+0x232>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    101a:	80 91 7f 04 	lds	r24, 0x047F
    101e:	10 c0       	rjmp	.+32     	; 0x1040 <__vector_24+0x10c>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1020:	90 91 58 04 	lds	r25, 0x0458
    1024:	80 91 57 04 	lds	r24, 0x0457
    1028:	98 17       	cp	r25, r24
    102a:	70 f5       	brcc	.+92     	; 0x1088 <__vector_24+0x154>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    102c:	e0 91 58 04 	lds	r30, 0x0458
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	8e 0f       	add	r24, r30
    1034:	80 93 58 04 	sts	0x0458, r24
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	e7 5a       	subi	r30, 0xA7	; 167
    103c:	fb 4f       	sbci	r31, 0xFB	; 251
    103e:	80 81       	ld	r24, Z
    1040:	80 93 bb 00 	sts	0x00BB, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1044:	85 ec       	ldi	r24, 0xC5	; 197
    1046:	83 c0       	rjmp	.+262    	; 0x114e <__vector_24+0x21a>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    1048:	80 93 13 04 	sts	0x0413, r24
    104c:	8b c0       	rjmp	.+278    	; 0x1164 <__vector_24+0x230>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    104e:	e0 91 58 04 	lds	r30, 0x0458
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	8e 0f       	add	r24, r30
    1056:	80 93 58 04 	sts	0x0458, r24
    105a:	80 91 bb 00 	lds	r24, 0x00BB
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	e7 5a       	subi	r30, 0xA7	; 167
    1062:	fb 4f       	sbci	r31, 0xFB	; 251
    1064:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1066:	90 91 58 04 	lds	r25, 0x0458
    106a:	80 91 57 04 	lds	r24, 0x0457
    106e:	6b c0       	rjmp	.+214    	; 0x1146 <__vector_24+0x212>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1070:	e0 91 58 04 	lds	r30, 0x0458
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	8e 0f       	add	r24, r30
    1078:	80 93 58 04 	sts	0x0458, r24
    107c:	80 91 bb 00 	lds	r24, 0x00BB
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	e7 5a       	subi	r30, 0xA7	; 167
    1084:	fb 4f       	sbci	r31, 0xFB	; 251
    1086:	80 83       	st	Z, r24
	if (twi_sendStop)
    1088:	80 91 7e 04 	lds	r24, 0x047E
    108c:	81 11       	cpse	r24, r1
    108e:	6a c0       	rjmp	.+212    	; 0x1164 <__vector_24+0x230>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	80 93 7d 04 	sts	0x047D, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    1096:	84 ea       	ldi	r24, 0xA4	; 164
    1098:	5e c0       	rjmp	.+188    	; 0x1156 <__vector_24+0x222>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    109a:	83 e0       	ldi	r24, 0x03	; 3
    109c:	80 93 80 04 	sts	0x0480, r24
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    10a0:	10 92 14 04 	sts	0x0414, r1
    10a4:	cf cf       	rjmp	.-98     	; 0x1044 <__vector_24+0x110>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    10a6:	80 91 14 04 	lds	r24, 0x0414
    10aa:	80 32       	cpi	r24, 0x20	; 32
    10ac:	08 f0       	brcs	.+2      	; 0x10b0 <__vector_24+0x17c>
    10ae:	4e c0       	rjmp	.+156    	; 0x114c <__vector_24+0x218>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    10b0:	e0 91 14 04 	lds	r30, 0x0414
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	8e 0f       	add	r24, r30
    10b8:	80 93 14 04 	sts	0x0414, r24
    10bc:	80 91 bb 00 	lds	r24, 0x00BB
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	eb 5e       	subi	r30, 0xEB	; 235
    10c4:	fb 4f       	sbci	r31, 0xFB	; 251
    10c6:	80 83       	st	Z, r24
    10c8:	bd cf       	rjmp	.-134    	; 0x1044 <__vector_24+0x110>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    10ca:	80 91 14 04 	lds	r24, 0x0414
    10ce:	80 32       	cpi	r24, 0x20	; 32
    10d0:	30 f4       	brcc	.+12     	; 0x10de <__vector_24+0x1aa>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    10d2:	e0 91 14 04 	lds	r30, 0x0414
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	eb 5e       	subi	r30, 0xEB	; 235
    10da:	fb 4f       	sbci	r31, 0xFB	; 251
    10dc:	10 82       	st	Z, r1
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
    10de:	1a df       	rcall	.-460    	; 0xf14 <twi_stop>
    10e0:	60 91 14 04 	lds	r22, 0x0414
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    10e4:	70 e0       	ldi	r23, 0x00	; 0
    10e6:	e0 91 79 04 	lds	r30, 0x0479
    10ea:	f0 91 7a 04 	lds	r31, 0x047A
    10ee:	85 e1       	ldi	r24, 0x15	; 21
    10f0:	94 e0       	ldi	r25, 0x04	; 4
    10f2:	09 95       	icall
    10f4:	10 92 14 04 	sts	0x0414, r1
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    10f8:	17 df       	rcall	.-466    	; 0xf28 <twi_releaseBus>
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    10fa:	35 c0       	rjmp	.+106    	; 0x1166 <__vector_24+0x232>
    10fc:	84 e0       	ldi	r24, 0x04	; 4
      break;
    10fe:	80 93 80 04 	sts	0x0480, r24
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    1102:	10 92 36 04 	sts	0x0436, r1
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    1106:	10 92 35 04 	sts	0x0435, r1
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    110a:	e0 91 7b 04 	lds	r30, 0x047B
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    110e:	f0 91 7c 04 	lds	r31, 0x047C
    1112:	09 95       	icall
    1114:	80 91 35 04 	lds	r24, 0x0435
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    1118:	81 11       	cpse	r24, r1
    111a:	05 c0       	rjmp	.+10     	; 0x1126 <__vector_24+0x1f2>
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	80 93 35 04 	sts	0x0435, r24
        twi_txBufferLength = 1;
    1122:	10 92 37 04 	sts	0x0437, r1
        twi_txBuffer[0] = 0x00;
    1126:	e0 91 36 04 	lds	r30, 0x0436
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	8e 0f       	add	r24, r30
    112e:	80 93 36 04 	sts	0x0436, r24
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	e9 5c       	subi	r30, 0xC9	; 201
    1136:	fb 4f       	sbci	r31, 0xFB	; 251
    1138:	80 81       	ld	r24, Z
    113a:	80 93 bb 00 	sts	0x00BB, r24
    113e:	90 91 36 04 	lds	r25, 0x0436
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    1142:	80 91 35 04 	lds	r24, 0x0435
    1146:	98 17       	cp	r25, r24
    1148:	08 f4       	brcc	.+2      	; 0x114c <__vector_24+0x218>
    114a:	7c cf       	rjmp	.-264    	; 0x1044 <__vector_24+0x110>
    114c:	85 e8       	ldi	r24, 0x85	; 133
    114e:	80 93 bc 00 	sts	0x00BC, r24
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1152:	09 c0       	rjmp	.+18     	; 0x1166 <__vector_24+0x232>
    1154:	85 ec       	ldi	r24, 0xC5	; 197
    1156:	80 93 bc 00 	sts	0x00BC, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    115a:	10 92 80 04 	sts	0x0480, r1
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    115e:	03 c0       	rjmp	.+6      	; 0x1166 <__vector_24+0x232>
    1160:	10 92 13 04 	sts	0x0413, r1

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    1164:	d7 de       	rcall	.-594    	; 0xf14 <twi_stop>
    1166:	ff 91       	pop	r31
      twi_stop();
    1168:	ef 91       	pop	r30
    116a:	bf 91       	pop	r27
      break;
  }
}
    116c:	af 91       	pop	r26
    116e:	9f 91       	pop	r25
    1170:	8f 91       	pop	r24
    1172:	7f 91       	pop	r23
    1174:	6f 91       	pop	r22
    1176:	5f 91       	pop	r21
    1178:	4f 91       	pop	r20
    117a:	3f 91       	pop	r19
    117c:	2f 91       	pop	r18
    117e:	0f 90       	pop	r0
    1180:	0f be       	out	0x3f, r0	; 63
    1182:	0f 90       	pop	r0
    1184:	1f 90       	pop	r1
    1186:	18 95       	reti

00001188 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
    1188:	80 91 b1 04 	lds	r24, 0x04B1
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	20 91 b2 04 	lds	r18, 0x04B2
}
    1192:	82 1b       	sub	r24, r18
    1194:	91 09       	sbc	r25, r1
    1196:	08 95       	ret

00001198 <_ZN7TwoWire4readEv>:
int TwoWire::read(void)
{
  int value = -1;
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    1198:	20 91 b2 04 	lds	r18, 0x04B2
    119c:	80 91 b1 04 	lds	r24, 0x04B1
    11a0:	28 17       	cp	r18, r24
    11a2:	50 f4       	brcc	.+20     	; 0x11b8 <_ZN7TwoWire4readEv+0x20>
    value = rxBuffer[rxBufferIndex];
    11a4:	e2 2f       	mov	r30, r18
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	ed 54       	subi	r30, 0x4D	; 77
    11aa:	fb 4f       	sbci	r31, 0xFB	; 251
    11ac:	80 81       	ld	r24, Z
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    ++rxBufferIndex;
    11b0:	2f 5f       	subi	r18, 0xFF	; 255
    11b2:	20 93 b2 04 	sts	0x04B2, r18
    11b6:	08 95       	ret
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  int value = -1;
    11b8:	8f ef       	ldi	r24, 0xFF	; 255
    11ba:	9f ef       	ldi	r25, 0xFF	; 255
    value = rxBuffer[rxBufferIndex];
    ++rxBufferIndex;
  }

  return value;
}
    11bc:	08 95       	ret

000011be <_ZN7TwoWire4peekEv>:
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
  
  if(rxBufferIndex < rxBufferLength){
    11be:	e0 91 b2 04 	lds	r30, 0x04B2
    11c2:	80 91 b1 04 	lds	r24, 0x04B1
    11c6:	e8 17       	cp	r30, r24
    11c8:	30 f4       	brcc	.+12     	; 0x11d6 <_ZN7TwoWire4peekEv+0x18>
    value = rxBuffer[rxBufferIndex];
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	ed 54       	subi	r30, 0x4D	; 77
    11ce:	fb 4f       	sbci	r31, 0xFB	; 251
    11d0:	80 81       	ld	r24, Z
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	08 95       	ret
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
    11d6:	8f ef       	ldi	r24, 0xFF	; 255
    11d8:	9f ef       	ldi	r25, 0xFF	; 255
  if(rxBufferIndex < rxBufferLength){
    value = rxBuffer[rxBufferIndex];
  }

  return value;
}
    11da:	08 95       	ret

000011dc <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
    11dc:	08 95       	ret

000011de <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    11de:	cf 92       	push	r12
    11e0:	df 92       	push	r13
    11e2:	ef 92       	push	r14
    11e4:	ff 92       	push	r15
    11e6:	0f 93       	push	r16
    11e8:	1f 93       	push	r17
    11ea:	cf 93       	push	r28
    11ec:	df 93       	push	r29
    11ee:	7c 01       	movw	r14, r24
    11f0:	cb 01       	movw	r24, r22
    11f2:	8a 01       	movw	r16, r20
  if(transmitting){
    11f4:	20 91 8d 04 	lds	r18, 0x048D
    11f8:	22 23       	and	r18, r18
    11fa:	89 f0       	breq	.+34     	; 0x121e <_ZN7TwoWire5writeEPKhj+0x40>
    11fc:	eb 01       	movw	r28, r22
    11fe:	6b 01       	movw	r12, r22
    1200:	c4 0e       	add	r12, r20
    1202:	d5 1e       	adc	r13, r21
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    1204:	cc 15       	cp	r28, r12
    1206:	dd 05       	cpc	r29, r13
    1208:	61 f0       	breq	.+24     	; 0x1222 <_ZN7TwoWire5writeEPKhj+0x44>
      write(data[i]);
    120a:	69 91       	ld	r22, Y+
    120c:	d7 01       	movw	r26, r14
    120e:	ed 91       	ld	r30, X+
    1210:	fc 91       	ld	r31, X
    1212:	01 90       	ld	r0, Z+
    1214:	f0 81       	ld	r31, Z
    1216:	e0 2d       	mov	r30, r0
    1218:	c7 01       	movw	r24, r14
    121a:	09 95       	icall
    121c:	f3 cf       	rjmp	.-26     	; 0x1204 <_ZN7TwoWire5writeEPKhj+0x26>
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
    121e:	64 2f       	mov	r22, r20
    1220:	60 de       	rcall	.-832    	; 0xee2 <twi_transmit>
    1222:	c8 01       	movw	r24, r16
  }
  return quantity;
}
    1224:	df 91       	pop	r29
    1226:	cf 91       	pop	r28
    1228:	1f 91       	pop	r17
    122a:	0f 91       	pop	r16
    122c:	ff 90       	pop	r15
    122e:	ef 90       	pop	r14
    1230:	df 90       	pop	r13
    1232:	cf 90       	pop	r12
    1234:	08 95       	ret

00001236 <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
    1236:	cf 93       	push	r28
    1238:	df 93       	push	r29
    123a:	1f 92       	push	r1
    123c:	cd b7       	in	r28, 0x3d	; 61
    123e:	de b7       	in	r29, 0x3e	; 62
    1240:	69 83       	std	Y+1, r22	; 0x01
  if(transmitting){
    1242:	20 91 8d 04 	lds	r18, 0x048D
    1246:	22 23       	and	r18, r18
    1248:	d1 f0       	breq	.+52     	; 0x127e <_ZN7TwoWire5writeEh+0x48>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
    124a:	20 91 8e 04 	lds	r18, 0x048E
    124e:	20 32       	cpi	r18, 0x20	; 32
    1250:	40 f0       	brcs	.+16     	; 0x1262 <_ZN7TwoWire5writeEh+0x2c>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    1252:	21 e0       	ldi	r18, 0x01	; 1
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	fc 01       	movw	r30, r24
    1258:	33 83       	std	Z+3, r19	; 0x03
    125a:	22 83       	std	Z+2, r18	; 0x02
      setWriteError();
      return 0;
    125c:	80 e0       	ldi	r24, 0x00	; 0
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	14 c0       	rjmp	.+40     	; 0x128a <_ZN7TwoWire5writeEh+0x54>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
    1262:	80 91 8f 04 	lds	r24, 0x048F
    1266:	e8 2f       	mov	r30, r24
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	e0 57       	subi	r30, 0x70	; 112
    126c:	fb 4f       	sbci	r31, 0xFB	; 251
    126e:	99 81       	ldd	r25, Y+1	; 0x01
    1270:	90 83       	st	Z, r25
    ++txBufferIndex;
    1272:	8f 5f       	subi	r24, 0xFF	; 255
    1274:	80 93 8f 04 	sts	0x048F, r24
    // update amount in buffer   
    txBufferLength = txBufferIndex;
    1278:	80 93 8e 04 	sts	0x048E, r24
    127c:	04 c0       	rjmp	.+8      	; 0x1286 <_ZN7TwoWire5writeEh+0x50>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
    127e:	61 e0       	ldi	r22, 0x01	; 1
    1280:	ce 01       	movw	r24, r28
    1282:	01 96       	adiw	r24, 0x01	; 1
    1284:	2e de       	rcall	.-932    	; 0xee2 <twi_transmit>
    1286:	81 e0       	ldi	r24, 0x01	; 1
  }
  return 1;
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	0f 90       	pop	r0
}
    128c:	df 91       	pop	r29
    128e:	cf 91       	pop	r28
    1290:	08 95       	ret

00001292 <_ZN7TwoWireC1Ev>:
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    1292:	fc 01       	movw	r30, r24
  public:
    Print() : write_error(0) {}
    1294:	13 82       	std	Z+3, r1	; 0x03
    1296:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    1298:	48 ee       	ldi	r20, 0xE8	; 232
    129a:	53 e0       	ldi	r21, 0x03	; 3
    129c:	60 e0       	ldi	r22, 0x00	; 0
    129e:	70 e0       	ldi	r23, 0x00	; 0
    12a0:	44 83       	std	Z+4, r20	; 0x04
    12a2:	55 83       	std	Z+5, r21	; 0x05
    12a4:	66 83       	std	Z+6, r22	; 0x06
    12a6:	77 83       	std	Z+7, r23	; 0x07
    12a8:	87 e4       	ldi	r24, 0x47	; 71
    12aa:	91 e0       	ldi	r25, 0x01	; 1
    12ac:	91 83       	std	Z+1, r25	; 0x01
    12ae:	80 83       	st	Z, r24
    12b0:	08 95       	ret

000012b2 <_ZN7TwoWire5beginEv>:

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
    12b2:	10 92 b2 04 	sts	0x04B2, r1
  rxBufferLength = 0;
    12b6:	10 92 b1 04 	sts	0x04B1, r1

  txBufferIndex = 0;
    12ba:	10 92 8f 04 	sts	0x048F, r1
  txBufferLength = 0;
    12be:	10 92 8e 04 	sts	0x048E, r1

  twi_init();
    12c2:	5c cd       	rjmp	.-1352   	; 0xd7c <twi_init>

000012c4 <_ZN7TwoWire11requestFromEhhh>:
{
  TWBR = ((F_CPU / frequency) - 16) / 2;
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
    12c4:	86 2f       	mov	r24, r22
    12c6:	41 32       	cpi	r20, 0x21	; 33
    12c8:	08 f0       	brcs	.+2      	; 0x12cc <_ZN7TwoWire11requestFromEhhh+0x8>
    12ca:	40 e2       	ldi	r20, 0x20	; 32
  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
    quantity = BUFFER_LENGTH;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
    12cc:	63 eb       	ldi	r22, 0xB3	; 179
    12ce:	74 e0       	ldi	r23, 0x04	; 4
    12d0:	71 dd       	rcall	.-1310   	; 0xdb4 <twi_readFrom>
    12d2:	10 92 b2 04 	sts	0x04B2, r1
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    12d6:	80 93 b1 04 	sts	0x04B1, r24
  rxBufferLength = read;
    12da:	08 95       	ret

000012dc <_ZN7TwoWire11requestFromEii>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
    12dc:	21 e0       	ldi	r18, 0x01	; 1
    12de:	f2 cf       	rjmp	.-28     	; 0x12c4 <_ZN7TwoWire11requestFromEhhh>

000012e0 <_ZN7TwoWire17beginTransmissionEh>:
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	80 93 8d 04 	sts	0x048D, r24
  // set address of targeted slave
  txAddress = address;
    12e6:	60 93 b0 04 	sts	0x04B0, r22
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    12ea:	10 92 8f 04 	sts	0x048F, r1
  txBufferLength = 0;
    12ee:	10 92 8e 04 	sts	0x048E, r1
    12f2:	08 95       	ret

000012f4 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
    12f4:	f5 cf       	rjmp	.-22     	; 0x12e0 <_ZN7TwoWire17beginTransmissionEh>

000012f6 <_ZN7TwoWire15endTransmissionEh>:
//	is very possible to leave the bus in a hung state if
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
    12f6:	0f 93       	push	r16
  // transmit buffer (blocking)
  int8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
    12f8:	06 2f       	mov	r16, r22
    12fa:	21 e0       	ldi	r18, 0x01	; 1
    12fc:	40 91 8e 04 	lds	r20, 0x048E
    1300:	60 e9       	ldi	r22, 0x90	; 144
    1302:	74 e0       	ldi	r23, 0x04	; 4
    1304:	80 91 b0 04 	lds	r24, 0x04B0
    1308:	99 dd       	rcall	.-1230   	; 0xe3c <twi_writeTo>
    130a:	10 92 8f 04 	sts	0x048F, r1
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    130e:	10 92 8e 04 	sts	0x048E, r1
  txBufferLength = 0;
    1312:	10 92 8d 04 	sts	0x048D, r1
  // indicate that we are done transmitting
  transmitting = 0;
    1316:	0f 91       	pop	r16
  return ret;
}
    1318:	08 95       	ret

0000131a <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
    131a:	61 e0       	ldi	r22, 0x01	; 1
    131c:	ec cf       	rjmp	.-40     	; 0x12f6 <_ZN7TwoWire15endTransmissionEh>

0000131e <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    131e:	81 e8       	ldi	r24, 0x81	; 129
    1320:	94 e0       	ldi	r25, 0x04	; 4
    1322:	b7 cf       	rjmp	.-146    	; 0x1292 <_ZN7TwoWireC1Ev>

00001324 <_ZN8TimerOne16isrDefaultUnusedEv>:
}

#endif

void TimerOne::isrDefaultUnused()
{
    1324:	08 95       	ret

00001326 <__vector_13>:
void (*TimerOne::isrCallback)() = TimerOne::isrDefaultUnused;

// interrupt service routine that wraps a user defined function supplied by attachInterrupt
#if defined(__AVR__)
ISR(TIMER1_OVF_vect)
{
    1326:	1f 92       	push	r1
    1328:	0f 92       	push	r0
    132a:	0f b6       	in	r0, 0x3f	; 63
    132c:	0f 92       	push	r0
    132e:	11 24       	eor	r1, r1
    1330:	2f 93       	push	r18
    1332:	3f 93       	push	r19
    1334:	4f 93       	push	r20
    1336:	5f 93       	push	r21
    1338:	6f 93       	push	r22
    133a:	7f 93       	push	r23
    133c:	8f 93       	push	r24
    133e:	9f 93       	push	r25
    1340:	af 93       	push	r26
    1342:	bf 93       	push	r27
    1344:	ef 93       	push	r30
    1346:	ff 93       	push	r31
  Timer1.isrCallback();
    1348:	e0 91 0b 01 	lds	r30, 0x010B
    134c:	f0 91 0c 01 	lds	r31, 0x010C
    1350:	09 95       	icall
}
    1352:	ff 91       	pop	r31
    1354:	ef 91       	pop	r30
    1356:	bf 91       	pop	r27
    1358:	af 91       	pop	r26
    135a:	9f 91       	pop	r25
    135c:	8f 91       	pop	r24
    135e:	7f 91       	pop	r23
    1360:	6f 91       	pop	r22
    1362:	5f 91       	pop	r21
    1364:	4f 91       	pop	r20
    1366:	3f 91       	pop	r19
    1368:	2f 91       	pop	r18
    136a:	0f 90       	pop	r0
    136c:	0f be       	out	0x3f, r0	; 63
    136e:	0f 90       	pop	r0
    1370:	1f 90       	pop	r1
    1372:	18 95       	reti

00001374 <_ZN8SPIClass14endTransactionEv.part.3>:
    inTransactionFlag = 0;
    #endif

    if (interruptMode > 0) {
      #ifdef SPI_AVR_EIMSK
      uint8_t sreg = SREG;
    1374:	9f b7       	in	r25, 0x3f	; 63
      #endif
      noInterrupts();
    1376:	f8 94       	cli
      #ifdef SPI_AVR_EIMSK
      if (interruptMode == 1) {
    1378:	20 91 d8 04 	lds	r18, 0x04D8
    137c:	80 91 d6 04 	lds	r24, 0x04D6
    1380:	21 30       	cpi	r18, 0x01	; 1
    1382:	19 f4       	brne	.+6      	; 0x138a <_ZN8SPIClass14endTransactionEv.part.3+0x16>
        SPI_AVR_EIMSK = interruptSave;
    1384:	8d bb       	out	0x1d, r24	; 29
        SREG = sreg;
    1386:	9f bf       	out	0x3f, r25	; 63
    1388:	08 95       	ret
      } else
      #endif
      {
        SREG = interruptSave;
    138a:	8f bf       	out	0x3f, r24	; 63
    138c:	08 95       	ret

0000138e <_ZN8SPIClass16beginTransactionE11SPISettings>:

  // Before using SPI.transfer() or asserting chip select pins,
  // this function is used to gain exclusive access to the SPI bus
  // and configure the correct settings.
  inline static void beginTransaction(SPISettings settings) {
    if (interruptMode > 0) {
    138e:	20 91 d8 04 	lds	r18, 0x04D8
    1392:	22 23       	and	r18, r18
    1394:	99 f0       	breq	.+38     	; 0x13bc <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
      uint8_t sreg = SREG;
    1396:	3f b7       	in	r19, 0x3f	; 63
      noInterrupts();
    1398:	f8 94       	cli

      #ifdef SPI_AVR_EIMSK
      if (interruptMode == 1) {
    139a:	20 91 d8 04 	lds	r18, 0x04D8
    139e:	21 30       	cpi	r18, 0x01	; 1
    13a0:	59 f4       	brne	.+22     	; 0x13b8 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
        interruptSave = SPI_AVR_EIMSK;
    13a2:	2d b3       	in	r18, 0x1d	; 29
    13a4:	20 93 d6 04 	sts	0x04D6, r18
        SPI_AVR_EIMSK &= ~interruptMask;
    13a8:	4d b3       	in	r20, 0x1d	; 29
    13aa:	20 91 d7 04 	lds	r18, 0x04D7
    13ae:	20 95       	com	r18
    13b0:	24 23       	and	r18, r20
    13b2:	2d bb       	out	0x1d, r18	; 29
        SREG = sreg;
    13b4:	3f bf       	out	0x3f, r19	; 63
    13b6:	02 c0       	rjmp	.+4      	; 0x13bc <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
      } else
      #endif
      {
        interruptSave = sreg;
    13b8:	30 93 d6 04 	sts	0x04D6, r19
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 1;
    #endif

    SPCR = settings.spcr;
    13bc:	8c bd       	out	0x2c, r24	; 44
    SPSR = settings.spsr;
    13be:	9d bd       	out	0x2d, r25	; 45
    13c0:	08 95       	ret

000013c2 <_ZN8SPIClass8transferEh>:
  }

  // Write to the SPI bus (MOSI pin) and also receive (MISO pin)
  inline static uint8_t transfer(uint8_t data) {
    SPDR = data;
    13c2:	8e bd       	out	0x2e, r24	; 46
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
    13c4:	00 00       	nop
    while (!(SPSR & _BV(SPIF))) ; // wait
    13c6:	0d b4       	in	r0, 0x2d	; 45
    13c8:	07 fe       	sbrs	r0, 7
    13ca:	fd cf       	rjmp	.-6      	; 0x13c6 <_ZN8SPIClass8transferEh+0x4>
    return SPDR;
    13cc:	8e b5       	in	r24, 0x2e	; 46
  }
    13ce:	08 95       	ret

000013d0 <_ZL6spiRecv>:
static  uint8_t spiRec(void) {
#ifndef USE_SPI_LIB
  spiSend(0XFF);
  return SPDR;
#else
  return SPI.transfer(0xFF);
    13d0:	8f ef       	ldi	r24, 0xFF	; 255
    13d2:	f7 cf       	rjmp	.-18     	; 0x13c2 <_ZN8SPIClass8transferEh>

000013d4 <_ZN7Sd2Card14chipSelectHighEv>:
}
//------------------------------------------------------------------------------
static uint8_t chip_select_asserted = 0;

void Sd2Card::chipSelectHigh(void) {
  digitalWrite(chipSelectPin_, HIGH);
    13d4:	61 e0       	ldi	r22, 0x01	; 1
    13d6:	fc 01       	movw	r30, r24
    13d8:	84 81       	ldd	r24, Z+4	; 0x04
    13da:	73 dc       	rcall	.-1818   	; 0xcc2 <digitalWrite>
    13dc:	80 91 d9 04 	lds	r24, 0x04D9
#ifdef USE_SPI_LIB
  if (chip_select_asserted) {
    13e0:	88 23       	and	r24, r24
    13e2:	31 f0       	breq	.+12     	; 0x13f0 <_ZN7Sd2Card14chipSelectHighEv+0x1c>
    13e4:	10 92 d9 04 	sts	0x04D9, r1
    13e8:	80 91 d8 04 	lds	r24, 0x04D8
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 0;
    #endif

    if (interruptMode > 0) {
    13ec:	81 11       	cpse	r24, r1
    13ee:	c2 cf       	rjmp	.-124    	; 0x1374 <_ZN8SPIClass14endTransactionEv.part.3>
    13f0:	08 95       	ret

000013f2 <_ZN7Sd2Card13chipSelectLowEv>:
    SPI.endTransaction();
  }
#endif
}
//------------------------------------------------------------------------------
void Sd2Card::chipSelectLow(void) {
    13f2:	cf 93       	push	r28
    13f4:	df 93       	push	r29
    13f6:	ec 01       	movw	r28, r24
#ifdef USE_SPI_LIB
  if (!chip_select_asserted) {
    13f8:	80 91 d9 04 	lds	r24, 0x04D9
    13fc:	81 11       	cpse	r24, r1
    13fe:	08 c0       	rjmp	.+16     	; 0x1410 <_ZN7Sd2Card13chipSelectLowEv+0x1e>
    chip_select_asserted = 1;
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	80 93 d9 04 	sts	0x04D9, r24
    SPI.beginTransaction(settings);
    1406:	80 91 da 04 	lds	r24, 0x04DA
    140a:	90 91 db 04 	lds	r25, 0x04DB
    140e:	bf df       	rcall	.-130    	; 0x138e <_ZN8SPIClass16beginTransactionE11SPISettings>
    1410:	60 e0       	ldi	r22, 0x00	; 0
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
    1412:	8c 81       	ldd	r24, Y+4	; 0x04
    1414:	df 91       	pop	r29
}
    1416:	cf 91       	pop	r28
    1418:	54 cc       	rjmp	.-1880   	; 0xcc2 <digitalWrite>

0000141a <_ZN7Sd2Card7readEndEv>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
/** Skip remaining data in a block when in partial block read mode. */
void Sd2Card::readEnd(void) {
    141a:	cf 93       	push	r28
    141c:	df 93       	push	r29
    141e:	ec 01       	movw	r28, r24
  if (inBlock_) {
    1420:	8e 81       	ldd	r24, Y+6	; 0x06
    1422:	88 23       	and	r24, r24
    1424:	79 f0       	breq	.+30     	; 0x1444 <_ZN7Sd2Card7readEndEv+0x2a>
    }
    // wait for last crc byte
    while (!(SPSR & (1 << SPIF)))
      ;
#else  // OPTIMIZE_HARDWARE_SPI
    while (offset_++ < 514) spiRec();
    1426:	8f 81       	ldd	r24, Y+7	; 0x07
    1428:	98 85       	ldd	r25, Y+8	; 0x08
    142a:	9c 01       	movw	r18, r24
    142c:	2f 5f       	subi	r18, 0xFF	; 255
    142e:	3f 4f       	sbci	r19, 0xFF	; 255
    1430:	38 87       	std	Y+8, r19	; 0x08
    1432:	2f 83       	std	Y+7, r18	; 0x07
    1434:	82 30       	cpi	r24, 0x02	; 2
    1436:	92 40       	sbci	r25, 0x02	; 2
    1438:	10 f4       	brcc	.+4      	; 0x143e <_ZN7Sd2Card7readEndEv+0x24>
    143a:	ca df       	rcall	.-108    	; 0x13d0 <_ZL6spiRecv>
    143c:	f4 cf       	rjmp	.-24     	; 0x1426 <_ZN7Sd2Card7readEndEv+0xc>
    143e:	ce 01       	movw	r24, r28
#endif  // OPTIMIZE_HARDWARE_SPI
    chipSelectHigh();
    1440:	c9 df       	rcall	.-110    	; 0x13d4 <_ZN7Sd2Card14chipSelectHighEv>
    1442:	1e 82       	std	Y+6, r1	; 0x06
    1444:	df 91       	pop	r29
    inBlock_ = 0;
    1446:	cf 91       	pop	r28
  }
}
    1448:	08 95       	ret

0000144a <_ZN7Sd2Card11waitNotBusyEj>:
#endif // USE_SPI_LIB
  return true;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(uint16_t timeoutMillis) {
    144a:	0f 93       	push	r16
    144c:	1f 93       	push	r17
    144e:	cf 93       	push	r28
    1450:	df 93       	push	r29
    1452:	eb 01       	movw	r28, r22
  uint16_t t0 = millis();
    1454:	3a db       	rcall	.-2444   	; 0xaca <millis>
    1456:	8b 01       	movw	r16, r22
    1458:	bb df       	rcall	.-138    	; 0x13d0 <_ZL6spiRecv>
  do {
    if (spiRec() == 0XFF) return true;
    145a:	8f 3f       	cpi	r24, 0xFF	; 255
    145c:	41 f0       	breq	.+16     	; 0x146e <_ZN7Sd2Card11waitNotBusyEj+0x24>
    145e:	35 db       	rcall	.-2454   	; 0xaca <millis>
    1460:	60 1b       	sub	r22, r16
  }
  while (((uint16_t)millis() - t0) < timeoutMillis);
    1462:	71 0b       	sbc	r23, r17
    1464:	6c 17       	cp	r22, r28
    1466:	7d 07       	cpc	r23, r29
    1468:	b8 f3       	brcs	.-18     	; 0x1458 <_ZN7Sd2Card11waitNotBusyEj+0xe>
}
//------------------------------------------------------------------------------
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(uint16_t timeoutMillis) {
  uint16_t t0 = millis();
  do {
    146a:	80 e0       	ldi	r24, 0x00	; 0
    146c:	01 c0       	rjmp	.+2      	; 0x1470 <_ZN7Sd2Card11waitNotBusyEj+0x26>
    146e:	81 e0       	ldi	r24, 0x01	; 1
    if (spiRec() == 0XFF) return true;
  }
  while (((uint16_t)millis() - t0) < timeoutMillis);
  return false;
    1470:	df 91       	pop	r29
    1472:	cf 91       	pop	r28
//------------------------------------------------------------------------------
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(uint16_t timeoutMillis) {
  uint16_t t0 = millis();
  do {
    if (spiRec() == 0XFF) return true;
    1474:	1f 91       	pop	r17
  }
  while (((uint16_t)millis() - t0) < timeoutMillis);
  return false;
}
    1476:	0f 91       	pop	r16
    1478:	08 95       	ret

0000147a <_ZN7Sd2Card11cardCommandEhm>:
  sei();
}
#endif  // SOFTWARE_SPI
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t Sd2Card::cardCommand(uint8_t cmd, uint32_t arg) {
    147a:	cf 92       	push	r12
    147c:	df 92       	push	r13
    147e:	ff 92       	push	r15
    1480:	0f 93       	push	r16
    1482:	1f 93       	push	r17
    1484:	cf 93       	push	r28
    1486:	df 93       	push	r29
    1488:	00 d0       	rcall	.+0      	; 0x148a <_ZN7Sd2Card11cardCommandEhm+0x10>
    148a:	00 d0       	rcall	.+0      	; 0x148c <_ZN7Sd2Card11cardCommandEhm+0x12>
    148c:	cd b7       	in	r28, 0x3d	; 61
    148e:	de b7       	in	r29, 0x3e	; 62
    1490:	6c 01       	movw	r12, r24
    1492:	f6 2e       	mov	r15, r22
  // end read if in partialBlockRead mode
  readEnd();
    1494:	29 83       	std	Y+1, r18	; 0x01
    1496:	3a 83       	std	Y+2, r19	; 0x02
    1498:	4b 83       	std	Y+3, r20	; 0x03
    149a:	5c 83       	std	Y+4, r21	; 0x04
    149c:	be df       	rcall	.-132    	; 0x141a <_ZN7Sd2Card7readEndEv>
    149e:	c6 01       	movw	r24, r12

  // select card
  chipSelectLow();
    14a0:	a8 df       	rcall	.-176    	; 0x13f2 <_ZN7Sd2Card13chipSelectLowEv>
    14a2:	6c e2       	ldi	r22, 0x2C	; 44
    14a4:	71 e0       	ldi	r23, 0x01	; 1

  // wait up to 300 ms if busy
  waitNotBusy(300);
    14a6:	c6 01       	movw	r24, r12
    14a8:	d0 df       	rcall	.-96     	; 0x144a <_ZN7Sd2Card11waitNotBusyEj>
    14aa:	8f 2d       	mov	r24, r15
    14ac:	80 64       	ori	r24, 0x40	; 64
    14ae:	89 df       	rcall	.-238    	; 0x13c2 <_ZN8SPIClass8transferEh>
#ifndef USE_SPI_LIB
  SPDR = b;
  while (!(SPSR & (1 << SPIF)))
    ;
#else
  SPI.transfer(b);
    14b0:	08 e1       	ldi	r16, 0x18	; 24
    14b2:	10 e0       	ldi	r17, 0x00	; 0
    14b4:	5c 81       	ldd	r21, Y+4	; 0x04
    14b6:	4b 81       	ldd	r20, Y+3	; 0x03
    14b8:	3a 81       	ldd	r19, Y+2	; 0x02
    14ba:	29 81       	ldd	r18, Y+1	; 0x01
    14bc:	da 01       	movw	r26, r20
    14be:	c9 01       	movw	r24, r18
    14c0:	00 2e       	mov	r0, r16
    14c2:	04 c0       	rjmp	.+8      	; 0x14cc <_ZN7Sd2Card11cardCommandEhm+0x52>

  // send command
  spiSend(cmd | 0x40);

  // send argument
  for (int8_t s = 24; s >= 0; s -= 8) spiSend(arg >> s);
    14c4:	b6 95       	lsr	r27
    14c6:	a7 95       	ror	r26
    14c8:	97 95       	ror	r25
    14ca:	87 95       	ror	r24
    14cc:	0a 94       	dec	r0
    14ce:	d2 f7       	brpl	.-12     	; 0x14c4 <_ZN7Sd2Card11cardCommandEhm+0x4a>
    14d0:	29 83       	std	Y+1, r18	; 0x01
    14d2:	3a 83       	std	Y+2, r19	; 0x02
    14d4:	4b 83       	std	Y+3, r20	; 0x03
    14d6:	5c 83       	std	Y+4, r21	; 0x04
#ifndef USE_SPI_LIB
  SPDR = b;
  while (!(SPSR & (1 << SPIF)))
    ;
#else
  SPI.transfer(b);
    14d8:	74 df       	rcall	.-280    	; 0x13c2 <_ZN8SPIClass8transferEh>
    14da:	08 50       	subi	r16, 0x08	; 8
    14dc:	11 09       	sbc	r17, r1
    14de:	29 81       	ldd	r18, Y+1	; 0x01
    14e0:	3a 81       	ldd	r19, Y+2	; 0x02
    14e2:	4b 81       	ldd	r20, Y+3	; 0x03
    14e4:	5c 81       	ldd	r21, Y+4	; 0x04
    14e6:	08 3f       	cpi	r16, 0xF8	; 248

  // send command
  spiSend(cmd | 0x40);

  // send argument
  for (int8_t s = 24; s >= 0; s -= 8) spiSend(arg >> s);
    14e8:	8f ef       	ldi	r24, 0xFF	; 255
    14ea:	18 07       	cpc	r17, r24
    14ec:	39 f7       	brne	.-50     	; 0x14bc <_ZN7Sd2Card11cardCommandEhm+0x42>
    14ee:	ff 20       	and	r15, r15
    14f0:	29 f0       	breq	.+10     	; 0x14fc <_ZN7Sd2Card11cardCommandEhm+0x82>
    14f2:	e8 e0       	ldi	r30, 0x08	; 8
    14f4:	fe 16       	cp	r15, r30
    14f6:	21 f0       	breq	.+8      	; 0x1500 <_ZN7Sd2Card11cardCommandEhm+0x86>

  // send CRC
  uint8_t crc = 0XFF;
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
    14f8:	8f ef       	ldi	r24, 0xFF	; 255
    14fa:	03 c0       	rjmp	.+6      	; 0x1502 <_ZN7Sd2Card11cardCommandEhm+0x88>
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
    14fc:	85 e9       	ldi	r24, 0x95	; 149
    14fe:	01 c0       	rjmp	.+2      	; 0x1502 <_ZN7Sd2Card11cardCommandEhm+0x88>
    1500:	87 e8       	ldi	r24, 0x87	; 135

  // send argument
  for (int8_t s = 24; s >= 0; s -= 8) spiSend(arg >> s);

  // send CRC
  uint8_t crc = 0XFF;
    1502:	5f df       	rcall	.-322    	; 0x13c2 <_ZN8SPIClass8transferEh>
    1504:	10 e0       	ldi	r17, 0x00	; 0
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
    1506:	64 df       	rcall	.-312    	; 0x13d0 <_ZL6spiRecv>
    1508:	f6 01       	movw	r30, r12
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
    150a:	82 87       	std	Z+10, r24	; 0x0a
#ifndef USE_SPI_LIB
  SPDR = b;
  while (!(SPSR & (1 << SPIF)))
    ;
#else
  SPI.transfer(b);
    150c:	87 ff       	sbrs	r24, 7
    150e:	04 c0       	rjmp	.+8      	; 0x1518 <_ZN7Sd2Card11cardCommandEhm+0x9e>
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
  spiSend(crc);

  // wait for response
  for (uint8_t i = 0; ((status_ = spiRec()) & 0X80) && i != 0XFF; i++)
    1510:	1f 3f       	cpi	r17, 0xFF	; 255
    1512:	11 f0       	breq	.+4      	; 0x1518 <_ZN7Sd2Card11cardCommandEhm+0x9e>
    1514:	1f 5f       	subi	r17, 0xFF	; 255
    1516:	f7 cf       	rjmp	.-18     	; 0x1506 <_ZN7Sd2Card11cardCommandEhm+0x8c>
    1518:	0f 90       	pop	r0
    151a:	0f 90       	pop	r0
    151c:	0f 90       	pop	r0
    151e:	0f 90       	pop	r0
    1520:	df 91       	pop	r29
    1522:	cf 91       	pop	r28
    1524:	1f 91       	pop	r17
    ;
  return status_;
}
    1526:	0f 91       	pop	r16
    1528:	ff 90       	pop	r15
    152a:	df 90       	pop	r13
    152c:	cf 90       	pop	r12
    152e:	08 95       	ret

00001530 <_ZN7Sd2Card14waitStartBlockEv>:
  while (((uint16_t)millis() - t0) < timeoutMillis);
  return false;
}
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
    1530:	0f 93       	push	r16
    1532:	1f 93       	push	r17
    1534:	cf 93       	push	r28
    1536:	df 93       	push	r29
    1538:	ec 01       	movw	r28, r24
  uint16_t t0 = millis();
    153a:	c7 da       	rcall	.-2674   	; 0xaca <millis>
    153c:	8b 01       	movw	r16, r22
    153e:	48 df       	rcall	.-368    	; 0x13d0 <_ZL6spiRecv>
  while ((status_ = spiRec()) == 0XFF) {
    1540:	8a 87       	std	Y+10, r24	; 0x0a
    1542:	8f 3f       	cpi	r24, 0xFF	; 255
    1544:	41 f4       	brne	.+16     	; 0x1556 <_ZN7Sd2Card14waitStartBlockEv+0x26>
    1546:	c1 da       	rcall	.-2686   	; 0xaca <millis>
    1548:	60 1b       	sub	r22, r16
    if (((uint16_t)millis() - t0) > SD_READ_TIMEOUT) {
    154a:	71 0b       	sbc	r23, r17
    154c:	6d 32       	cpi	r22, 0x2D	; 45
    154e:	71 40       	sbci	r23, 0x01	; 1
    1550:	b0 f3       	brcs	.-20     	; 0x153e <_ZN7Sd2Card14waitStartBlockEv+0xe>
    1552:	8f e0       	ldi	r24, 0x0F	; 15
    1554:	03 c0       	rjmp	.+6      	; 0x155c <_ZN7Sd2Card14waitStartBlockEv+0x2c>
    1556:	8e 3f       	cpi	r24, 0xFE	; 254
    1558:	31 f0       	breq	.+12     	; 0x1566 <_ZN7Sd2Card14waitStartBlockEv+0x36>
    155a:	8d e0       	ldi	r24, 0x0D	; 13
    155c:	8d 83       	std	Y+5, r24	; 0x05
    155e:	ce 01       	movw	r24, r28
    1560:	39 df       	rcall	.-398    	; 0x13d4 <_ZN7Sd2Card14chipSelectHighEv>
    1562:	80 e0       	ldi	r24, 0x00	; 0
    goto fail;
  }
  return true;

 fail:
  chipSelectHigh();
    1564:	01 c0       	rjmp	.+2      	; 0x1568 <_ZN7Sd2Card14waitStartBlockEv+0x38>
    1566:	81 e0       	ldi	r24, 0x01	; 1
    1568:	df 91       	pop	r29
  return false;
    156a:	cf 91       	pop	r28
    156c:	1f 91       	pop	r17
  }
  if (status_ != DATA_START_BLOCK) {
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  return true;
    156e:	0f 91       	pop	r16

 fail:
  chipSelectHigh();
  return false;
}
    1570:	08 95       	ret

00001572 <_ZN7Sd2Card8readDataEmjjPh>:
 * \param[in] count Number of bytes to read
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::readData(uint32_t block,
        uint16_t offset, uint16_t count, uint8_t* dst) {
    1572:	cf 92       	push	r12
    1574:	df 92       	push	r13
    1576:	ef 92       	push	r14
    1578:	ff 92       	push	r15
    157a:	0f 93       	push	r16
    157c:	1f 93       	push	r17
    157e:	cf 93       	push	r28
    1580:	df 93       	push	r29
    1582:	ec 01       	movw	r28, r24
    1584:	69 01       	movw	r12, r18
  uint16_t n;
  if (count == 0) return true;
    1586:	01 15       	cp	r16, r1
    1588:	11 05       	cpc	r17, r1
    158a:	09 f4       	brne	.+2      	; 0x158e <_ZN7Sd2Card8readDataEmjjPh+0x1c>
    158c:	5d c0       	rjmp	.+186    	; 0x1648 <_ZN7Sd2Card8readDataEmjjPh+0xd6>
  if ((count + offset) > 512) {
    158e:	c8 01       	movw	r24, r16
    1590:	82 0f       	add	r24, r18
    1592:	93 1f       	adc	r25, r19
    1594:	81 30       	cpi	r24, 0x01	; 1
    1596:	92 40       	sbci	r25, 0x02	; 2
    1598:	08 f0       	brcs	.+2      	; 0x159c <_ZN7Sd2Card8readDataEmjjPh+0x2a>
    159a:	58 c0       	rjmp	.+176    	; 0x164c <_ZN7Sd2Card8readDataEmjjPh+0xda>
    goto fail;
  }
  if (!inBlock_ || block != block_ || offset < offset_) {
    159c:	8e 81       	ldd	r24, Y+6	; 0x06
    159e:	88 23       	and	r24, r24
    15a0:	71 f0       	breq	.+28     	; 0x15be <_ZN7Sd2Card8readDataEmjjPh+0x4c>
    15a2:	88 81       	ld	r24, Y
    15a4:	99 81       	ldd	r25, Y+1	; 0x01
    15a6:	aa 81       	ldd	r26, Y+2	; 0x02
    15a8:	bb 81       	ldd	r27, Y+3	; 0x03
    15aa:	48 17       	cp	r20, r24
    15ac:	59 07       	cpc	r21, r25
    15ae:	6a 07       	cpc	r22, r26
    15b0:	7b 07       	cpc	r23, r27
    15b2:	29 f4       	brne	.+10     	; 0x15be <_ZN7Sd2Card8readDataEmjjPh+0x4c>
    15b4:	8f 81       	ldd	r24, Y+7	; 0x07
    15b6:	98 85       	ldd	r25, Y+8	; 0x08
    15b8:	c8 16       	cp	r12, r24
    15ba:	d9 06       	cpc	r13, r25
    15bc:	00 f5       	brcc	.+64     	; 0x15fe <_ZN7Sd2Card8readDataEmjjPh+0x8c>
    block_ = block;
    15be:	48 83       	st	Y, r20
    15c0:	59 83       	std	Y+1, r21	; 0x01
    15c2:	6a 83       	std	Y+2, r22	; 0x02
    15c4:	7b 83       	std	Y+3, r23	; 0x03
    // use address if not SDHC card
    if (type()!= SD_CARD_TYPE_SDHC) block <<= 9;
    15c6:	8b 85       	ldd	r24, Y+11	; 0x0b
    15c8:	83 30       	cpi	r24, 0x03	; 3
    15ca:	39 f0       	breq	.+14     	; 0x15da <_ZN7Sd2Card8readDataEmjjPh+0x68>
    15cc:	39 e0       	ldi	r19, 0x09	; 9
    15ce:	44 0f       	add	r20, r20
    15d0:	55 1f       	adc	r21, r21
    15d2:	66 1f       	adc	r22, r22
    15d4:	77 1f       	adc	r23, r23
    15d6:	3a 95       	dec	r19
    15d8:	d1 f7       	brne	.-12     	; 0x15ce <_ZN7Sd2Card8readDataEmjjPh+0x5c>
    if (cardCommand(CMD17, block)) {
    15da:	9a 01       	movw	r18, r20
    15dc:	ab 01       	movw	r20, r22
    15de:	61 e1       	ldi	r22, 0x11	; 17
    15e0:	ce 01       	movw	r24, r28
    15e2:	4b df       	rcall	.-362    	; 0x147a <_ZN7Sd2Card11cardCommandEhm>
    15e4:	88 23       	and	r24, r24
    15e6:	19 f0       	breq	.+6      	; 0x15ee <_ZN7Sd2Card8readDataEmjjPh+0x7c>
    15e8:	83 e0       	ldi	r24, 0x03	; 3
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
  }
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  void error(uint8_t code) {errorCode_ = code;}
    15ea:	8d 83       	std	Y+5, r24	; 0x05
    15ec:	2f c0       	rjmp	.+94     	; 0x164c <_ZN7Sd2Card8readDataEmjjPh+0xda>
    15ee:	ce 01       	movw	r24, r28
      error(SD_CARD_ERROR_CMD17);
      goto fail;
    }
    if (!waitStartBlock()) {
    15f0:	9f df       	rcall	.-194    	; 0x1530 <_ZN7Sd2Card14waitStartBlockEv>
    15f2:	88 23       	and	r24, r24
    15f4:	59 f1       	breq	.+86     	; 0x164c <_ZN7Sd2Card8readDataEmjjPh+0xda>
    15f6:	18 86       	std	Y+8, r1	; 0x08
    15f8:	1f 82       	std	Y+7, r1	; 0x07
      goto fail;
    }
    offset_ = 0;
    15fa:	81 e0       	ldi	r24, 0x01	; 1
    15fc:	8e 83       	std	Y+6, r24	; 0x06
    inBlock_ = 1;
    15fe:	8f 81       	ldd	r24, Y+7	; 0x07
    1600:	98 85       	ldd	r25, Y+8	; 0x08
  dst[n] = SPDR;

#else  // OPTIMIZE_HARDWARE_SPI

  // skip data before offset
  for (;offset_ < offset; offset_++) {
    1602:	8c 15       	cp	r24, r12
    1604:	9d 05       	cpc	r25, r13
    1606:	38 f4       	brcc	.+14     	; 0x1616 <_ZN7Sd2Card8readDataEmjjPh+0xa4>
    1608:	e3 de       	rcall	.-570    	; 0x13d0 <_ZL6spiRecv>
    160a:	8f 81       	ldd	r24, Y+7	; 0x07
    spiRec();
    160c:	98 85       	ldd	r25, Y+8	; 0x08
    160e:	01 96       	adiw	r24, 0x01	; 1
  dst[n] = SPDR;

#else  // OPTIMIZE_HARDWARE_SPI

  // skip data before offset
  for (;offset_ < offset; offset_++) {
    1610:	98 87       	std	Y+8, r25	; 0x08
    1612:	8f 83       	std	Y+7, r24	; 0x07
    1614:	f4 cf       	rjmp	.-24     	; 0x15fe <_ZN7Sd2Card8readDataEmjjPh+0x8c>
    1616:	67 01       	movw	r12, r14
    1618:	e0 0e       	add	r14, r16
    161a:	f1 1e       	adc	r15, r17
    161c:	ce 14       	cp	r12, r14
    161e:	df 04       	cpc	r13, r15
    1620:	29 f0       	breq	.+10     	; 0x162c <_ZN7Sd2Card8readDataEmjjPh+0xba>
    spiRec();
  }
  // transfer data
  for (uint16_t i = 0; i < count; i++) {
    1622:	d6 de       	rcall	.-596    	; 0x13d0 <_ZL6spiRecv>
    1624:	f6 01       	movw	r30, r12
    1626:	81 93       	st	Z+, r24
    dst[i] = spiRec();
    1628:	6f 01       	movw	r12, r30
    162a:	f8 cf       	rjmp	.-16     	; 0x161c <_ZN7Sd2Card8readDataEmjjPh+0xaa>
    162c:	8f 81       	ldd	r24, Y+7	; 0x07
    162e:	98 85       	ldd	r25, Y+8	; 0x08
    1630:	80 0f       	add	r24, r16
    1632:	91 1f       	adc	r25, r17
  }
#endif  // OPTIMIZE_HARDWARE_SPI

  offset_ += count;
    1634:	98 87       	std	Y+8, r25	; 0x08
    1636:	8f 83       	std	Y+7, r24	; 0x07
    1638:	29 85       	ldd	r18, Y+9	; 0x09
    163a:	22 23       	and	r18, r18
    163c:	19 f0       	breq	.+6      	; 0x1644 <_ZN7Sd2Card8readDataEmjjPh+0xd2>
    163e:	81 15       	cp	r24, r1
  if (!partialBlockRead_ || offset_ >= 512) {
    1640:	92 40       	sbci	r25, 0x02	; 2
    1642:	10 f0       	brcs	.+4      	; 0x1648 <_ZN7Sd2Card8readDataEmjjPh+0xd6>
    1644:	ce 01       	movw	r24, r28
    1646:	e9 de       	rcall	.-558    	; 0x141a <_ZN7Sd2Card7readEndEv>
    1648:	81 e0       	ldi	r24, 0x01	; 1
    164a:	03 c0       	rjmp	.+6      	; 0x1652 <_ZN7Sd2Card8readDataEmjjPh+0xe0>
    // read rest of data, checksum and set chip select high
    readEnd();
    164c:	ce 01       	movw	r24, r28
    164e:	c2 de       	rcall	.-636    	; 0x13d4 <_ZN7Sd2Card14chipSelectHighEv>
    1650:	80 e0       	ldi	r24, 0x00	; 0
  }
  return true;
    1652:	df 91       	pop	r29
    1654:	cf 91       	pop	r28

 fail:
  chipSelectHigh();
    1656:	1f 91       	pop	r17
    1658:	0f 91       	pop	r16
    165a:	ff 90       	pop	r15
  return false;
    165c:	ef 90       	pop	r14
}
    165e:	df 90       	pop	r13
    1660:	cf 90       	pop	r12
    1662:	08 95       	ret

00001664 <_ZN7Sd2Card9readBlockEmPh>:
 * \param[out] dst Pointer to the location that will receive the data.

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::readBlock(uint32_t block, uint8_t* dst) {
    1664:	ef 92       	push	r14
    1666:	ff 92       	push	r15
    1668:	0f 93       	push	r16
    166a:	1f 93       	push	r17
  return readData(block, 0, 512, dst);
    166c:	79 01       	movw	r14, r18
    166e:	00 e0       	ldi	r16, 0x00	; 0
    1670:	12 e0       	ldi	r17, 0x02	; 2
    1672:	20 e0       	ldi	r18, 0x00	; 0
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	7d df       	rcall	.-262    	; 0x1572 <_ZN7Sd2Card8readDataEmjjPh>
    1678:	1f 91       	pop	r17
}
    167a:	0f 91       	pop	r16
    167c:	ff 90       	pop	r15
    167e:	ef 90       	pop	r14
    1680:	08 95       	ret

00001682 <_ZN7Sd2Card9writeDataEhPKh>:
  }
  return writeData(WRITE_MULTIPLE_TOKEN, src);
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
uint8_t Sd2Card::writeData(uint8_t token, const uint8_t* src) {
    1682:	cf 92       	push	r12
    1684:	df 92       	push	r13
    1686:	ef 92       	push	r14
    1688:	ff 92       	push	r15
    168a:	0f 93       	push	r16
    168c:	1f 93       	push	r17
    168e:	cf 93       	push	r28
    1690:	df 93       	push	r29
    1692:	00 d0       	rcall	.+0      	; 0x1694 <_ZN7Sd2Card9writeDataEhPKh+0x12>
    1694:	cd b7       	in	r28, 0x3d	; 61
    1696:	de b7       	in	r29, 0x3e	; 62
    1698:	8c 01       	movw	r16, r24
    169a:	86 2f       	mov	r24, r22
#ifndef USE_SPI_LIB
  SPDR = b;
  while (!(SPSR & (1 << SPIF)))
    ;
#else
  SPI.transfer(b);
    169c:	49 83       	std	Y+1, r20	; 0x01
    169e:	5a 83       	std	Y+2, r21	; 0x02
    16a0:	90 de       	rcall	.-736    	; 0x13c2 <_ZN8SPIClass8transferEh>
    16a2:	49 81       	ldd	r20, Y+1	; 0x01
    16a4:	c4 2e       	mov	r12, r20
    16a6:	5a 81       	ldd	r21, Y+2	; 0x02
    16a8:	d5 2e       	mov	r13, r21
    16aa:	e1 2c       	mov	r14, r1
  while (!(SPSR & (1 << SPIF)))
    ;

#else  // OPTIMIZE_HARDWARE_SPI
  spiSend(token);
  for (uint16_t i = 0; i < 512; i++) {
    16ac:	f1 2c       	mov	r15, r1
    16ae:	f6 01       	movw	r30, r12
#ifndef USE_SPI_LIB
  SPDR = b;
  while (!(SPSR & (1 << SPIF)))
    ;
#else
  SPI.transfer(b);
    16b0:	81 91       	ld	r24, Z+
    16b2:	6f 01       	movw	r12, r30
    16b4:	86 de       	rcall	.-756    	; 0x13c2 <_ZN8SPIClass8transferEh>
    16b6:	ff ef       	ldi	r31, 0xFF	; 255
    16b8:	ef 1a       	sub	r14, r31
  while (!(SPSR & (1 << SPIF)))
    ;

#else  // OPTIMIZE_HARDWARE_SPI
  spiSend(token);
  for (uint16_t i = 0; i < 512; i++) {
    16ba:	ff 0a       	sbc	r15, r31
    16bc:	e1 14       	cp	r14, r1
    16be:	82 e0       	ldi	r24, 0x02	; 2
    16c0:	f8 06       	cpc	r15, r24
    16c2:	a9 f7       	brne	.-22     	; 0x16ae <_ZN7Sd2Card9writeDataEhPKh+0x2c>
    16c4:	8f ef       	ldi	r24, 0xFF	; 255
    16c6:	7d de       	rcall	.-774    	; 0x13c2 <_ZN8SPIClass8transferEh>
#ifndef USE_SPI_LIB
  SPDR = b;
  while (!(SPSR & (1 << SPIF)))
    ;
#else
  SPI.transfer(b);
    16c8:	8f ef       	ldi	r24, 0xFF	; 255
    16ca:	7b de       	rcall	.-778    	; 0x13c2 <_ZN8SPIClass8transferEh>
    16cc:	81 de       	rcall	.-766    	; 0x13d0 <_ZL6spiRecv>
    16ce:	f8 01       	movw	r30, r16
    16d0:	82 87       	std	Z+10, r24	; 0x0a
    16d2:	8f 71       	andi	r24, 0x1F	; 31
  }
#endif  // OPTIMIZE_HARDWARE_SPI
  spiSend(0xff);  // dummy crc
  spiSend(0xff);  // dummy crc

  status_ = spiRec();
    16d4:	85 30       	cpi	r24, 0x05	; 5
    16d6:	31 f0       	breq	.+12     	; 0x16e4 <_ZN7Sd2Card9writeDataEhPKh+0x62>
    16d8:	81 e1       	ldi	r24, 0x11	; 17
    16da:	85 83       	std	Z+5, r24	; 0x05
    16dc:	c8 01       	movw	r24, r16
    16de:	7a de       	rcall	.-780    	; 0x13d4 <_ZN7Sd2Card14chipSelectHighEv>
    16e0:	80 e0       	ldi	r24, 0x00	; 0
    16e2:	01 c0       	rjmp	.+2      	; 0x16e6 <_ZN7Sd2Card9writeDataEhPKh+0x64>
    16e4:	81 e0       	ldi	r24, 0x01	; 1
  if ((status_ & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE);
    chipSelectHigh();
    16e6:	0f 90       	pop	r0
    16e8:	0f 90       	pop	r0
    16ea:	df 91       	pop	r29
    return false;
    16ec:	cf 91       	pop	r28
    16ee:	1f 91       	pop	r17
  }
  return true;
    16f0:	0f 91       	pop	r16
}
    16f2:	ff 90       	pop	r15
    16f4:	ef 90       	pop	r14
    16f6:	df 90       	pop	r13
    16f8:	cf 90       	pop	r12
    16fa:	08 95       	ret

000016fc <_ZN7Sd2Card10writeBlockEmPKh>:
 * \param[in] blockNumber Logical block to be written.
 * \param[in] src Pointer to the location of the data to be written.
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::writeBlock(uint32_t blockNumber, const uint8_t* src) {
    16fc:	0f 93       	push	r16
    16fe:	1f 93       	push	r17
    1700:	cf 93       	push	r28
    1702:	df 93       	push	r29
    1704:	ec 01       	movw	r28, r24
    1706:	89 01       	movw	r16, r18
#if SD_PROTECT_BLOCK_ZERO
  // don't allow write to first block
  if (blockNumber == 0) {
    1708:	41 15       	cp	r20, r1
    170a:	51 05       	cpc	r21, r1
    170c:	61 05       	cpc	r22, r1
    170e:	71 05       	cpc	r23, r1
    1710:	11 f4       	brne	.+4      	; 0x1716 <_ZN7Sd2Card10writeBlockEmPKh+0x1a>
    1712:	82 e1       	ldi	r24, 0x12	; 18
    1714:	2d c0       	rjmp	.+90     	; 0x1770 <_ZN7Sd2Card10writeBlockEmPKh+0x74>
    goto fail;
  }
#endif  // SD_PROTECT_BLOCK_ZERO

  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
    1716:	8b 85       	ldd	r24, Y+11	; 0x0b
    1718:	83 30       	cpi	r24, 0x03	; 3
    171a:	39 f0       	breq	.+14     	; 0x172a <_ZN7Sd2Card10writeBlockEmPKh+0x2e>
    171c:	89 e0       	ldi	r24, 0x09	; 9
    171e:	44 0f       	add	r20, r20
    1720:	55 1f       	adc	r21, r21
    1722:	66 1f       	adc	r22, r22
    1724:	77 1f       	adc	r23, r23
    1726:	8a 95       	dec	r24
    1728:	d1 f7       	brne	.-12     	; 0x171e <_ZN7Sd2Card10writeBlockEmPKh+0x22>
  if (cardCommand(CMD24, blockNumber)) {
    172a:	9a 01       	movw	r18, r20
    172c:	ab 01       	movw	r20, r22
    172e:	68 e1       	ldi	r22, 0x18	; 24
    1730:	ce 01       	movw	r24, r28
    1732:	a3 de       	rcall	.-698    	; 0x147a <_ZN7Sd2Card11cardCommandEhm>
    1734:	88 23       	and	r24, r24
    1736:	11 f0       	breq	.+4      	; 0x173c <_ZN7Sd2Card10writeBlockEmPKh+0x40>
    1738:	84 e0       	ldi	r24, 0x04	; 4
    173a:	1a c0       	rjmp	.+52     	; 0x1770 <_ZN7Sd2Card10writeBlockEmPKh+0x74>
    173c:	a8 01       	movw	r20, r16
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) goto fail;
    173e:	6e ef       	ldi	r22, 0xFE	; 254
    1740:	ce 01       	movw	r24, r28
    1742:	9f df       	rcall	.-194    	; 0x1682 <_ZN7Sd2Card9writeDataEhPKh>
    1744:	88 23       	and	r24, r24
    1746:	a9 f0       	breq	.+42     	; 0x1772 <_ZN7Sd2Card10writeBlockEmPKh+0x76>
    1748:	68 e5       	ldi	r22, 0x58	; 88
    174a:	72 e0       	ldi	r23, 0x02	; 2

  // wait for flash programming to complete
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    174c:	ce 01       	movw	r24, r28
    174e:	7d de       	rcall	.-774    	; 0x144a <_ZN7Sd2Card11waitNotBusyEj>
    1750:	81 11       	cpse	r24, r1
    1752:	02 c0       	rjmp	.+4      	; 0x1758 <_ZN7Sd2Card10writeBlockEmPKh+0x5c>
    1754:	85 e1       	ldi	r24, 0x15	; 21
    1756:	0c c0       	rjmp	.+24     	; 0x1770 <_ZN7Sd2Card10writeBlockEmPKh+0x74>
    1758:	20 e0       	ldi	r18, 0x00	; 0
    175a:	30 e0       	ldi	r19, 0x00	; 0
    175c:	a9 01       	movw	r20, r18
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiRec()) {
    175e:	6d e0       	ldi	r22, 0x0D	; 13
    1760:	ce 01       	movw	r24, r28
    1762:	8b de       	rcall	.-746    	; 0x147a <_ZN7Sd2Card11cardCommandEhm>
    1764:	81 11       	cpse	r24, r1
    1766:	03 c0       	rjmp	.+6      	; 0x176e <_ZN7Sd2Card10writeBlockEmPKh+0x72>
    1768:	33 de       	rcall	.-922    	; 0x13d0 <_ZL6spiRecv>
    176a:	88 23       	and	r24, r24
    176c:	31 f0       	breq	.+12     	; 0x177a <_ZN7Sd2Card10writeBlockEmPKh+0x7e>
    176e:	84 e1       	ldi	r24, 0x14	; 20
    1770:	8d 83       	std	Y+5, r24	; 0x05
    1772:	ce 01       	movw	r24, r28
    1774:	2f de       	rcall	.-930    	; 0x13d4 <_ZN7Sd2Card14chipSelectHighEv>
    1776:	80 e0       	ldi	r24, 0x00	; 0
    1778:	03 c0       	rjmp	.+6      	; 0x1780 <_ZN7Sd2Card10writeBlockEmPKh+0x84>
    177a:	ce 01       	movw	r24, r28
  }
  chipSelectHigh();
  return true;

 fail:
  chipSelectHigh();
    177c:	2b de       	rcall	.-938    	; 0x13d4 <_ZN7Sd2Card14chipSelectHighEv>
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	df 91       	pop	r29
  return false;
    1782:	cf 91       	pop	r28
    1784:	1f 91       	pop	r17
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiRec()) {
    error(SD_CARD_ERROR_WRITE_PROGRAMMING);
    goto fail;
  }
  chipSelectHigh();
    1786:	0f 91       	pop	r16
    1788:	08 95       	ret

0000178a <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm>:
    // Invert the SPI2X bit
    clockDiv ^= 0x1;

    // Pack into the SPISettings class
    spcr = _BV(SPE) | _BV(MSTR) | ((bitOrder == LSBFIRST) ? _BV(DORD) : 0) |
      (dataMode & SPI_MODE_MASK) | ((clockDiv >> 1) & SPI_CLOCK_MASK);
    178a:	80 e5       	ldi	r24, 0x50	; 80
    178c:	80 93 da 04 	sts	0x04DA, r24
    spsr = clockDiv & SPI_2XCLOCK_MASK;
    1790:	10 92 db 04 	sts	0x04DB, r1
    1794:	08 95       	ret

00001796 <_ZN6SdFile10addClusterEv>:
// suppress cpplint warnings with NOLINT comment
void (*SdFile::oldDateTime_)(uint16_t& date, uint16_t& time) = NULL;  // NOLINT
#endif  // ALLOW_DEPRECATED_FUNCTIONS
//------------------------------------------------------------------------------
// add a cluster to a file
uint8_t SdFile::addCluster() {
    1796:	cf 93       	push	r28
    1798:	df 93       	push	r29
    179a:	ec 01       	movw	r28, r24
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
    179c:	9c 01       	movw	r18, r24
    179e:	2a 5f       	subi	r18, 0xFA	; 250
    17a0:	3f 4f       	sbci	r19, 0xFF	; 255
    17a2:	41 e0       	ldi	r20, 0x01	; 1
    17a4:	50 e0       	ldi	r21, 0x00	; 0
    17a6:	60 e0       	ldi	r22, 0x00	; 0
    17a8:	70 e0       	ldi	r23, 0x00	; 0
    17aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17ae:	51 d4       	rcall	.+2210   	; 0x2052 <_ZN8SdVolume15allocContiguousEmPm>
    17b0:	88 23       	and	r24, r24
    17b2:	a1 f0       	breq	.+40     	; 0x17dc <_ZN6SdFile10addClusterEv+0x46>
    17b4:	4f 89       	ldd	r20, Y+23	; 0x17

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    17b6:	58 8d       	ldd	r21, Y+24	; 0x18
    17b8:	69 8d       	ldd	r22, Y+25	; 0x19
    17ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17bc:	45 2b       	or	r20, r21
    17be:	46 2b       	or	r20, r22
    17c0:	47 2b       	or	r20, r23
    17c2:	71 f4       	brne	.+28     	; 0x17e0 <_ZN6SdFile10addClusterEv+0x4a>
    17c4:	4e 81       	ldd	r20, Y+6	; 0x06
    firstCluster_ = curCluster_;
    17c6:	5f 81       	ldd	r21, Y+7	; 0x07
    17c8:	68 85       	ldd	r22, Y+8	; 0x08
    17ca:	79 85       	ldd	r23, Y+9	; 0x09
    17cc:	4f 8b       	std	Y+23, r20	; 0x17
    17ce:	58 8f       	std	Y+24, r21	; 0x18
    17d0:	69 8f       	std	Y+25, r22	; 0x19
    17d2:	7a 8f       	std	Y+26, r23	; 0x1a
    17d4:	8c 81       	ldd	r24, Y+4	; 0x04
    flags_ |= F_FILE_DIR_DIRTY;
    17d6:	80 68       	ori	r24, 0x80	; 128
    17d8:	8c 83       	std	Y+4, r24	; 0x04
    17da:	02 c0       	rjmp	.+4      	; 0x17e0 <_ZN6SdFile10addClusterEv+0x4a>
    17dc:	80 e0       	ldi	r24, 0x00	; 0
void (*SdFile::oldDateTime_)(uint16_t& date, uint16_t& time) = NULL;  // NOLINT
#endif  // ALLOW_DEPRECATED_FUNCTIONS
//------------------------------------------------------------------------------
// add a cluster to a file
uint8_t SdFile::addCluster() {
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
    17de:	01 c0       	rjmp	.+2      	; 0x17e2 <_ZN6SdFile10addClusterEv+0x4c>
    17e0:	81 e0       	ldi	r24, 0x01	; 1
  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    firstCluster_ = curCluster_;
    flags_ |= F_FILE_DIR_DIRTY;
  }
  return true;
    17e2:	df 91       	pop	r29
}
    17e4:	cf 91       	pop	r28
    17e6:	08 95       	ret

000017e8 <_ZN6SdFile13cacheDirEntryEh>:
  return true;
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* SdFile::cacheDirEntry(uint8_t action) {
    17e8:	cf 93       	push	r28
    17ea:	df 93       	push	r29
    17ec:	ec 01       	movw	r28, r24
    17ee:	46 2f       	mov	r20, r22
  if (!SdVolume::cacheRawBlock(dirBlock_, action)) return NULL;
    17f0:	6e 85       	ldd	r22, Y+14	; 0x0e
    17f2:	7f 85       	ldd	r23, Y+15	; 0x0f
    17f4:	88 89       	ldd	r24, Y+16	; 0x10
    17f6:	99 89       	ldd	r25, Y+17	; 0x11
    17f8:	d0 d2       	rcall	.+1440   	; 0x1d9a <_ZN8SdVolume13cacheRawBlockEmh>
    17fa:	88 23       	and	r24, r24
    17fc:	41 f0       	breq	.+16     	; 0x180e <_ZN6SdFile13cacheDirEntryEh+0x26>
    17fe:	8a 89       	ldd	r24, Y+18	; 0x12
  return SdVolume::cacheBuffer_.dir + dirIndex_;
    1800:	20 e2       	ldi	r18, 0x20	; 32
    1802:	82 9f       	mul	r24, r18
    1804:	c0 01       	movw	r24, r0
    1806:	11 24       	eor	r1, r1
    1808:	8b 51       	subi	r24, 0x1B	; 27
    180a:	9b 4f       	sbci	r25, 0xFB	; 251
    180c:	02 c0       	rjmp	.+4      	; 0x1812 <_ZN6SdFile13cacheDirEntryEh+0x2a>
    180e:	80 e0       	ldi	r24, 0x00	; 0
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* SdFile::cacheDirEntry(uint8_t action) {
  if (!SdVolume::cacheRawBlock(dirBlock_, action)) return NULL;
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	df 91       	pop	r29
  return SdVolume::cacheBuffer_.dir + dirIndex_;
}
    1814:	cf 91       	pop	r28
    1816:	08 95       	ret

00001818 <_ZN6SdFile7seekSetEm>:
 * \param[in] pos The new position in bytes from the beginning of the file.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t SdFile::seekSet(uint32_t pos) {
    1818:	4f 92       	push	r4
    181a:	5f 92       	push	r5
    181c:	6f 92       	push	r6
    181e:	7f 92       	push	r7
    1820:	af 92       	push	r10
    1822:	bf 92       	push	r11
    1824:	cf 92       	push	r12
    1826:	df 92       	push	r13
    1828:	ef 92       	push	r14
    182a:	ff 92       	push	r15
    182c:	0f 93       	push	r16
    182e:	1f 93       	push	r17
    1830:	cf 93       	push	r28
    1832:	df 93       	push	r29
    1834:	ec 01       	movw	r28, r24
    1836:	6a 01       	movw	r12, r20
    1838:	7b 01       	movw	r14, r22
    183a:	2d 81       	ldd	r18, Y+5	; 0x05
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) return false;
    183c:	22 23       	and	r18, r18
    183e:	09 f4       	brne	.+2      	; 0x1842 <_ZN6SdFile7seekSetEm+0x2a>
    1840:	56 c0       	rjmp	.+172    	; 0x18ee <_ZN6SdFile7seekSetEm+0xd6>
    1842:	8b 89       	ldd	r24, Y+19	; 0x13
    1844:	9c 89       	ldd	r25, Y+20	; 0x14
    1846:	ad 89       	ldd	r26, Y+21	; 0x15
    1848:	be 89       	ldd	r27, Y+22	; 0x16
    184a:	84 17       	cp	r24, r20
    184c:	95 07       	cpc	r25, r21
    184e:	a6 07       	cpc	r26, r22
    1850:	b7 07       	cpc	r27, r23
    1852:	08 f4       	brcc	.+2      	; 0x1856 <_ZN6SdFile7seekSetEm+0x3e>
    1854:	4c c0       	rjmp	.+152    	; 0x18ee <_ZN6SdFile7seekSetEm+0xd6>
    1856:	4d c0       	rjmp	.+154    	; 0x18f2 <_ZN6SdFile7seekSetEm+0xda>
    curCluster_ = 0;
    curPosition_ = 0;
    return true;
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
    1858:	8a 85       	ldd	r24, Y+10	; 0x0a
    185a:	9b 85       	ldd	r25, Y+11	; 0x0b
    185c:	ac 85       	ldd	r26, Y+12	; 0x0c
    185e:	bd 85       	ldd	r27, Y+13	; 0x0d
    1860:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1862:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1864:	e5 85       	ldd	r30, Z+13	; 0x0d
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	39 96       	adiw	r30, 0x09	; 9
    186a:	ac 01       	movw	r20, r24
    186c:	bd 01       	movw	r22, r26
    186e:	41 50       	subi	r20, 0x01	; 1
    1870:	51 09       	sbc	r21, r1
    1872:	61 09       	sbc	r22, r1
    1874:	71 09       	sbc	r23, r1
    1876:	0e 2e       	mov	r0, r30
    1878:	04 c0       	rjmp	.+8      	; 0x1882 <_ZN6SdFile7seekSetEm+0x6a>
    187a:	76 95       	lsr	r23
    187c:	67 95       	ror	r22
    187e:	57 95       	ror	r21
    1880:	47 95       	ror	r20
    1882:	0a 94       	dec	r0
    1884:	d2 f7       	brpl	.-12     	; 0x187a <_ZN6SdFile7seekSetEm+0x62>
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
    1886:	97 01       	movw	r18, r14
    1888:	86 01       	movw	r16, r12
    188a:	01 50       	subi	r16, 0x01	; 1
    188c:	11 09       	sbc	r17, r1
    188e:	21 09       	sbc	r18, r1
    1890:	31 09       	sbc	r19, r1
    1892:	04 c0       	rjmp	.+8      	; 0x189c <_ZN6SdFile7seekSetEm+0x84>
    1894:	36 95       	lsr	r19
    1896:	27 95       	ror	r18
    1898:	17 95       	ror	r17
    189a:	07 95       	ror	r16
    189c:	ea 95       	dec	r30
    189e:	d2 f7       	brpl	.-12     	; 0x1894 <_ZN6SdFile7seekSetEm+0x7c>

  if (nNew < nCur || curPosition_ == 0) {
    18a0:	04 17       	cp	r16, r20
    18a2:	15 07       	cpc	r17, r21
    18a4:	26 07       	cpc	r18, r22
    18a6:	37 07       	cpc	r19, r23
    18a8:	a8 f5       	brcc	.+106    	; 0x1914 <_ZN6SdFile7seekSetEm+0xfc>
    // must follow chain from first cluster
    curCluster_ = firstCluster_;
    18aa:	8f 89       	ldd	r24, Y+23	; 0x17
    18ac:	98 8d       	ldd	r25, Y+24	; 0x18
    18ae:	a9 8d       	ldd	r26, Y+25	; 0x19
    18b0:	ba 8d       	ldd	r27, Y+26	; 0x1a
    18b2:	8e 83       	std	Y+6, r24	; 0x06
    18b4:	9f 83       	std	Y+7, r25	; 0x07
    18b6:	a8 87       	std	Y+8, r26	; 0x08
    18b8:	b9 87       	std	Y+9, r27	; 0x09
 * \param[in] pos The new position in bytes from the beginning of the file.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t SdFile::seekSet(uint32_t pos) {
    18ba:	28 01       	movw	r4, r16
    18bc:	39 01       	movw	r6, r18
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (!vol_->fatGet(curCluster_, &curCluster_)) return false;
    18be:	5e 01       	movw	r10, r28
    18c0:	86 e0       	ldi	r24, 0x06	; 6
    18c2:	a8 0e       	add	r10, r24
    18c4:	b1 1c       	adc	r11, r1
    curCluster_ = firstCluster_;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    18c6:	41 14       	cp	r4, r1
    18c8:	51 04       	cpc	r5, r1
    18ca:	61 04       	cpc	r6, r1
    18cc:	71 04       	cpc	r7, r1
    18ce:	59 f1       	breq	.+86     	; 0x1926 <_ZN6SdFile7seekSetEm+0x10e>
    if (!vol_->fatGet(curCluster_, &curCluster_)) return false;
    18d0:	4e 81       	ldd	r20, Y+6	; 0x06
    18d2:	5f 81       	ldd	r21, Y+7	; 0x07
    18d4:	68 85       	ldd	r22, Y+8	; 0x08
    18d6:	79 85       	ldd	r23, Y+9	; 0x09
    18d8:	95 01       	movw	r18, r10
    18da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18de:	96 d2       	rcall	.+1324   	; 0x1e0c <_ZNK8SdVolume6fatGetEmPm>
    18e0:	91 e0       	ldi	r25, 0x01	; 1
    18e2:	49 1a       	sub	r4, r25
    18e4:	51 08       	sbc	r5, r1
    18e6:	61 08       	sbc	r6, r1
    18e8:	71 08       	sbc	r7, r1
    18ea:	81 11       	cpse	r24, r1
    18ec:	ec cf       	rjmp	.-40     	; 0x18c6 <_ZN6SdFile7seekSetEm+0xae>
    18ee:	80 e0       	ldi	r24, 0x00	; 0
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t SdFile::seekSet(uint32_t pos) {
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) return false;
    18f0:	1f c0       	rjmp	.+62     	; 0x1930 <_ZN6SdFile7seekSetEm+0x118>
    18f2:	22 30       	cpi	r18, 0x02	; 2

  if (type_ == FAT_FILE_TYPE_ROOT16) {
    18f4:	c1 f0       	breq	.+48     	; 0x1926 <_ZN6SdFile7seekSetEm+0x10e>
    18f6:	c1 14       	cp	r12, r1
    curPosition_ = pos;
    return true;
  }
  if (pos == 0) {
    18f8:	d1 04       	cpc	r13, r1
    18fa:	e1 04       	cpc	r14, r1
    18fc:	f1 04       	cpc	r15, r1
    18fe:	09 f0       	breq	.+2      	; 0x1902 <_ZN6SdFile7seekSetEm+0xea>
    1900:	ab cf       	rjmp	.-170    	; 0x1858 <_ZN6SdFile7seekSetEm+0x40>
    1902:	1e 82       	std	Y+6, r1	; 0x06
    // set position to start of file
    curCluster_ = 0;
    1904:	1f 82       	std	Y+7, r1	; 0x07
    1906:	18 86       	std	Y+8, r1	; 0x08
    1908:	19 86       	std	Y+9, r1	; 0x09
    190a:	1a 86       	std	Y+10, r1	; 0x0a
    curPosition_ = 0;
    190c:	1b 86       	std	Y+11, r1	; 0x0b
    190e:	1c 86       	std	Y+12, r1	; 0x0c
    1910:	1d 86       	std	Y+13, r1	; 0x0d
    1912:	0d c0       	rjmp	.+26     	; 0x192e <_ZN6SdFile7seekSetEm+0x116>
    1914:	89 2b       	or	r24, r25
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);

  if (nNew < nCur || curPosition_ == 0) {
    1916:	8a 2b       	or	r24, r26
    1918:	8b 2b       	or	r24, r27
    191a:	39 f2       	breq	.-114    	; 0x18aa <_ZN6SdFile7seekSetEm+0x92>
    191c:	04 1b       	sub	r16, r20
    // must follow chain from first cluster
    curCluster_ = firstCluster_;
  } else {
    // advance from curPosition
    nNew -= nCur;
    191e:	15 0b       	sbc	r17, r21
    1920:	26 0b       	sbc	r18, r22
    1922:	37 0b       	sbc	r19, r23
    1924:	ca cf       	rjmp	.-108    	; 0x18ba <_ZN6SdFile7seekSetEm+0xa2>
    1926:	ca 86       	std	Y+10, r12	; 0x0a
  }
  while (nNew--) {
    if (!vol_->fatGet(curCluster_, &curCluster_)) return false;
  }
  curPosition_ = pos;
    1928:	db 86       	std	Y+11, r13	; 0x0b
    192a:	ec 86       	std	Y+12, r14	; 0x0c
    192c:	fd 86       	std	Y+13, r15	; 0x0d
    192e:	81 e0       	ldi	r24, 0x01	; 1
  return true;
    1930:	df 91       	pop	r29
}
    1932:	cf 91       	pop	r28
    1934:	1f 91       	pop	r17
    1936:	0f 91       	pop	r16
    1938:	ff 90       	pop	r15
    193a:	ef 90       	pop	r14
    193c:	df 90       	pop	r13
    193e:	cf 90       	pop	r12
    1940:	bf 90       	pop	r11
    1942:	af 90       	pop	r10
    1944:	7f 90       	pop	r7
    1946:	6f 90       	pop	r6
    1948:	5f 90       	pop	r5
    194a:	4f 90       	pop	r4
    194c:	08 95       	ret

0000194e <_ZN6SdFile4syncEv>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
    194e:	0f 93       	push	r16
    1950:	1f 93       	push	r17
    1952:	cf 93       	push	r28
    1954:	df 93       	push	r29
    1956:	ec 01       	movw	r28, r24
  // only allow open files and directories
  if (!isOpen()) return false;
    1958:	8d 81       	ldd	r24, Y+5	; 0x05
    195a:	88 23       	and	r24, r24
    195c:	b9 f1       	breq	.+110    	; 0x19cc <_ZN6SdFile4syncEv+0x7e>

  if (flags_ & F_FILE_DIR_DIRTY) {
    195e:	8c 81       	ldd	r24, Y+4	; 0x04
    1960:	87 ff       	sbrs	r24, 7
    1962:	2f c0       	rjmp	.+94     	; 0x19c2 <_ZN6SdFile4syncEv+0x74>
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    1964:	61 e0       	ldi	r22, 0x01	; 1
    1966:	ce 01       	movw	r24, r28
    1968:	3f df       	rcall	.-386    	; 0x17e8 <_ZN6SdFile13cacheDirEntryEh>
    196a:	8c 01       	movw	r16, r24
    196c:	00 97       	sbiw	r24, 0x00	; 0
    if (!d) return false;
    196e:	71 f1       	breq	.+92     	; 0x19cc <_ZN6SdFile4syncEv+0x7e>
    1970:	8d 81       	ldd	r24, Y+5	; 0x05

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
    1972:	82 30       	cpi	r24, 0x02	; 2
    1974:	48 f4       	brcc	.+18     	; 0x1988 <_ZN6SdFile4syncEv+0x3a>
    1976:	4b 89       	ldd	r20, Y+19	; 0x13
    1978:	5c 89       	ldd	r21, Y+20	; 0x14
    197a:	6d 89       	ldd	r22, Y+21	; 0x15
    197c:	7e 89       	ldd	r23, Y+22	; 0x16
    197e:	f8 01       	movw	r30, r16
    1980:	44 8f       	std	Z+28, r20	; 0x1c
    1982:	55 8f       	std	Z+29, r21	; 0x1d
    1984:	66 8f       	std	Z+30, r22	; 0x1e
    1986:	77 8f       	std	Z+31, r23	; 0x1f
    1988:	4f 89       	ldd	r20, Y+23	; 0x17

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    198a:	58 8d       	ldd	r21, Y+24	; 0x18
    198c:	69 8d       	ldd	r22, Y+25	; 0x19
    198e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1990:	f8 01       	movw	r30, r16
    1992:	53 8f       	std	Z+27, r21	; 0x1b
    1994:	42 8f       	std	Z+26, r20	; 0x1a
    1996:	75 8b       	std	Z+21, r23	; 0x15
    d->firstClusterHigh = firstCluster_ >> 16;
    1998:	64 8b       	std	Z+20, r22	; 0x14
    199a:	e0 91 dc 04 	lds	r30, 0x04DC

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    199e:	f0 91 dd 04 	lds	r31, 0x04DD
    19a2:	30 97       	sbiw	r30, 0x00	; 0
    19a4:	59 f0       	breq	.+22     	; 0x19bc <_ZN6SdFile4syncEv+0x6e>
    19a6:	b8 01       	movw	r22, r16
      dateTime_(&d->lastWriteDate, &d->lastWriteTime);
    19a8:	6a 5e       	subi	r22, 0xEA	; 234
    19aa:	7f 4f       	sbci	r23, 0xFF	; 255
    19ac:	c8 01       	movw	r24, r16
    19ae:	48 96       	adiw	r24, 0x18	; 24
    19b0:	09 95       	icall
    19b2:	f8 01       	movw	r30, r16
      d->lastAccessDate = d->lastWriteDate;
    19b4:	80 8d       	ldd	r24, Z+24	; 0x18
    19b6:	91 8d       	ldd	r25, Z+25	; 0x19
    19b8:	93 8b       	std	Z+19, r25	; 0x13
    19ba:	82 8b       	std	Z+18, r24	; 0x12
    19bc:	8c 81       	ldd	r24, Y+4	; 0x04
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
    19be:	8f 77       	andi	r24, 0x7F	; 127
    19c0:	8c 83       	std	Y+4, r24	; 0x04
    19c2:	df 91       	pop	r29
  }
  return SdVolume::cacheFlush();
}
    19c4:	cf 91       	pop	r28
    19c6:	1f 91       	pop	r17
    19c8:	0f 91       	pop	r16
    19ca:	ae c1       	rjmp	.+860    	; 0x1d28 <_ZN8SdVolume10cacheFlushEv>
      d->lastAccessDate = d->lastWriteDate;
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
    19cc:	80 e0       	ldi	r24, 0x00	; 0
    19ce:	df 91       	pop	r29
}
    19d0:	cf 91       	pop	r28
    19d2:	1f 91       	pop	r17
    19d4:	0f 91       	pop	r16
    19d6:	08 95       	ret

000019d8 <_ZN6SdFile5writeEPKvj>:
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, uint16_t nbyte) {
    19d8:	2f 92       	push	r2
    19da:	3f 92       	push	r3
    19dc:	4f 92       	push	r4
    19de:	5f 92       	push	r5
    19e0:	6f 92       	push	r6
    19e2:	7f 92       	push	r7
    19e4:	8f 92       	push	r8
    19e6:	9f 92       	push	r9
    19e8:	af 92       	push	r10
    19ea:	bf 92       	push	r11
    19ec:	cf 92       	push	r12
    19ee:	df 92       	push	r13
    19f0:	ef 92       	push	r14
    19f2:	ff 92       	push	r15
    19f4:	0f 93       	push	r16
    19f6:	1f 93       	push	r17
    19f8:	cf 93       	push	r28
    19fa:	df 93       	push	r29
    19fc:	00 d0       	rcall	.+0      	; 0x19fe <_ZN6SdFile5writeEPKvj+0x26>
    19fe:	00 d0       	rcall	.+0      	; 0x1a00 <_ZN6SdFile5writeEPKvj+0x28>
    1a00:	1f 92       	push	r1
    1a02:	cd b7       	in	r28, 0x3d	; 61
    1a04:	de b7       	in	r29, 0x3e	; 62
    1a06:	8c 01       	movw	r16, r24
    1a08:	7b 01       	movw	r14, r22
    1a0a:	3a 01       	movw	r6, r20

  // number of bytes left to write  -  must be before goto statements
  uint16_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    1a0c:	dc 01       	movw	r26, r24
    1a0e:	15 96       	adiw	r26, 0x05	; 5
    1a10:	8c 91       	ld	r24, X
    1a12:	15 97       	sbiw	r26, 0x05	; 5
    1a14:	81 30       	cpi	r24, 0x01	; 1
    1a16:	c1 f4       	brne	.+48     	; 0x1a48 <_ZN6SdFile5writeEPKvj+0x70>
    1a18:	14 96       	adiw	r26, 0x04	; 4
    1a1a:	8c 91       	ld	r24, X
    1a1c:	81 ff       	sbrs	r24, 1
    1a1e:	14 c0       	rjmp	.+40     	; 0x1a48 <_ZN6SdFile5writeEPKvj+0x70>

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    1a20:	82 ff       	sbrs	r24, 2
    1a22:	1a c0       	rjmp	.+52     	; 0x1a58 <_ZN6SdFile5writeEPKvj+0x80>
    1a24:	f8 01       	movw	r30, r16
    1a26:	43 89       	ldd	r20, Z+19	; 0x13
    1a28:	54 89       	ldd	r21, Z+20	; 0x14
    1a2a:	65 89       	ldd	r22, Z+21	; 0x15
    1a2c:	76 89       	ldd	r23, Z+22	; 0x16
    1a2e:	82 85       	ldd	r24, Z+10	; 0x0a
    1a30:	93 85       	ldd	r25, Z+11	; 0x0b
    1a32:	a4 85       	ldd	r26, Z+12	; 0x0c
    1a34:	b5 85       	ldd	r27, Z+13	; 0x0d
    1a36:	84 17       	cp	r24, r20
    1a38:	95 07       	cpc	r25, r21
    1a3a:	a6 07       	cpc	r26, r22
    1a3c:	b7 07       	cpc	r27, r23
    1a3e:	61 f0       	breq	.+24     	; 0x1a58 <_ZN6SdFile5writeEPKvj+0x80>
  }
  /**
   *  Set the files current position to end of file.  Useful to position
   *  a file for append. See seekSet().
   */
  uint8_t seekEnd(void) {return seekSet(fileSize_);}
    1a40:	c8 01       	movw	r24, r16
    1a42:	ea de       	rcall	.-556    	; 0x1818 <_ZN6SdFile7seekSetEm>
    1a44:	81 11       	cpse	r24, r1
    if (!seekEnd()) goto writeErrorReturn;
    1a46:	08 c0       	rjmp	.+16     	; 0x1a58 <_ZN6SdFile5writeEPKvj+0x80>
    1a48:	81 e0       	ldi	r24, 0x01	; 1
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	f8 01       	movw	r30, r16
    1a4e:	93 83       	std	Z+3, r25	; 0x03
    1a50:	82 83       	std	Z+2, r24	; 0x02
    1a52:	80 e0       	ldi	r24, 0x00	; 0

 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	40 c1       	rjmp	.+640    	; 0x1cd8 <_ZN6SdFile5writeEPKvj+0x300>
    1a58:	63 01       	movw	r12, r6
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) *dst++ = *src++;
    1a5a:	7f c0       	rjmp	.+254    	; 0x1b5a <_ZN6SdFile5writeEPKvj+0x182>
    1a5c:	d8 01       	movw	r26, r16
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    1a5e:	5b 96       	adiw	r26, 0x1b	; 27
    1a60:	8d 91       	ld	r24, X+
    1a62:	9c 91       	ld	r25, X
    1a64:	5c 97       	sbiw	r26, 0x1c	; 28
    1a66:	fc 01       	movw	r30, r24
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
    1a68:	f4 81       	ldd	r31, Z+4	; 0x04
    1a6a:	f1 50       	subi	r31, 0x01	; 1
    1a6c:	b5 01       	movw	r22, r10
    1a6e:	a4 01       	movw	r20, r8
    1a70:	29 e0       	ldi	r18, 0x09	; 9
    1a72:	76 95       	lsr	r23
    1a74:	67 95       	ror	r22
    1a76:	57 95       	ror	r21
    1a78:	47 95       	ror	r20
    1a7a:	2a 95       	dec	r18
    1a7c:	d1 f7       	brne	.-12     	; 0x1a72 <_ZN6SdFile5writeEPKvj+0x9a>
    1a7e:	f4 23       	and	r31, r20
    1a80:	fd 83       	std	Y+5, r31	; 0x05
    1a82:	21 e0       	ldi	r18, 0x01	; 1
    uint16_t blockOffset = curPosition_ & 0X1FF;
    1a84:	92 22       	and	r9, r18
    1a86:	ff 23       	and	r31, r31
    if (blockOfCluster == 0 && blockOffset == 0) {
    1a88:	09 f4       	brne	.+2      	; 0x1a8c <_ZN6SdFile5writeEPKvj+0xb4>
    1a8a:	73 c0       	rjmp	.+230    	; 0x1b72 <_ZN6SdFile5writeEPKvj+0x19a>
    1a8c:	80 e0       	ldi	r24, 0x00	; 0
          curCluster_ = next;
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    1a8e:	92 e0       	ldi	r25, 0x02	; 2
    1a90:	88 19       	sub	r24, r8
    1a92:	99 09       	sbc	r25, r9
    1a94:	56 01       	movw	r10, r12
    1a96:	8c 15       	cp	r24, r12
    1a98:	9d 05       	cpc	r25, r13
    1a9a:	08 f4       	brcc	.+2      	; 0x1a9e <_ZN6SdFile5writeEPKvj+0xc6>
    1a9c:	5c 01       	movw	r10, r24
    1a9e:	d8 01       	movw	r26, r16

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    1aa0:	5b 96       	adiw	r26, 0x1b	; 27
    1aa2:	ed 91       	ld	r30, X+
    1aa4:	fc 91       	ld	r31, X
    1aa6:	5c 97       	sbiw	r26, 0x1c	; 28
    1aa8:	16 96       	adiw	r26, 0x06	; 6
  uint32_t clusterStartBlock(uint32_t cluster) const {
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
    1aaa:	2d 90       	ld	r2, X+
    1aac:	3d 90       	ld	r3, X+
    1aae:	4d 90       	ld	r4, X+
    1ab0:	5c 90       	ld	r5, X
    1ab2:	19 97       	sbiw	r26, 0x09	; 9
    1ab4:	b2 e0       	ldi	r27, 0x02	; 2
    1ab6:	2b 1a       	sub	r2, r27
    1ab8:	31 08       	sbc	r3, r1
    1aba:	41 08       	sbc	r4, r1
    1abc:	51 08       	sbc	r5, r1
    1abe:	05 84       	ldd	r0, Z+13	; 0x0d
    1ac0:	04 c0       	rjmp	.+8      	; 0x1aca <_ZN6SdFile5writeEPKvj+0xf2>
    1ac2:	22 0c       	add	r2, r2
    1ac4:	33 1c       	adc	r3, r3
    1ac6:	44 1c       	adc	r4, r4
    1ac8:	55 1c       	adc	r5, r5
    1aca:	0a 94       	dec	r0
    1acc:	d2 f7       	brpl	.-12     	; 0x1ac2 <_ZN6SdFile5writeEPKvj+0xea>
    1ace:	86 85       	ldd	r24, Z+14	; 0x0e
    1ad0:	97 85       	ldd	r25, Z+15	; 0x0f
    1ad2:	a0 89       	ldd	r26, Z+16	; 0x10
    1ad4:	b1 89       	ldd	r27, Z+17	; 0x11
    1ad6:	28 0e       	add	r2, r24
    1ad8:	39 1e       	adc	r3, r25
    1ada:	4a 1e       	adc	r4, r26
    1adc:	5b 1e       	adc	r5, r27
    1ade:	ed 81       	ldd	r30, Y+5	; 0x05
    1ae0:	2e 0e       	add	r2, r30
    1ae2:	31 1c       	adc	r3, r1
    1ae4:	41 1c       	adc	r4, r1
    1ae6:	51 1c       	adc	r5, r1
    1ae8:	a1 14       	cp	r10, r1
    if (n == 512) {
    1aea:	f2 e0       	ldi	r31, 0x02	; 2
    1aec:	bf 06       	cpc	r11, r31
    1aee:	09 f0       	breq	.+2      	; 0x1af2 <_ZN6SdFile5writeEPKvj+0x11a>
    1af0:	85 c0       	rjmp	.+266    	; 0x1bfc <_ZN6SdFile5writeEPKvj+0x224>
    1af2:	80 91 0d 01 	lds	r24, 0x010D
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
    1af6:	90 91 0e 01 	lds	r25, 0x010E
    1afa:	a0 91 0f 01 	lds	r26, 0x010F
    1afe:	b0 91 10 01 	lds	r27, 0x0110
    1b02:	82 15       	cp	r24, r2
    1b04:	93 05       	cpc	r25, r3
    1b06:	a4 05       	cpc	r26, r4
    1b08:	b5 05       	cpc	r27, r5
    1b0a:	59 f4       	brne	.+22     	; 0x1b22 <_ZN6SdFile5writeEPKvj+0x14a>
    1b0c:	8f ef       	ldi	r24, 0xFF	; 255
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
    1b0e:	9f ef       	ldi	r25, 0xFF	; 255
    1b10:	dc 01       	movw	r26, r24
    1b12:	80 93 0d 01 	sts	0x010D, r24
    1b16:	90 93 0e 01 	sts	0x010E, r25
    1b1a:	a0 93 0f 01 	sts	0x010F, r26
    1b1e:	b0 93 10 01 	sts	0x0110, r27
    1b22:	97 01       	movw	r18, r14
  uint8_t readData(uint32_t block, uint16_t offset,
    uint16_t count, uint8_t* dst) {
      return sdCard_->readData(block, offset, count, dst);
  }
  uint8_t writeBlock(uint32_t block, const uint8_t* dst) {
    return sdCard_->writeBlock(block, dst);
    1b24:	b2 01       	movw	r22, r4
    1b26:	a1 01       	movw	r20, r2
    1b28:	80 91 e3 04 	lds	r24, 0x04E3
    1b2c:	90 91 e4 04 	lds	r25, 0x04E4
    1b30:	e5 dd       	rcall	.-1078   	; 0x16fc <_ZN7Sd2Card10writeBlockEmPKh>
    1b32:	88 23       	and	r24, r24
    1b34:	09 f4       	brne	.+2      	; 0x1b38 <_ZN6SdFile5writeEPKvj+0x160>
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
    1b36:	88 cf       	rjmp	.-240    	; 0x1a48 <_ZN6SdFile5writeEPKvj+0x70>
    1b38:	9e ef       	ldi	r25, 0xFE	; 254
    1b3a:	f9 1a       	sub	r15, r25
      src += 512;
    1b3c:	ca 18       	sub	r12, r10
    1b3e:	db 08       	sbc	r13, r11
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    1b40:	f8 01       	movw	r30, r16
    1b42:	82 85       	ldd	r24, Z+10	; 0x0a
    curPosition_ += n;
    1b44:	93 85       	ldd	r25, Z+11	; 0x0b
    1b46:	a4 85       	ldd	r26, Z+12	; 0x0c
    1b48:	b5 85       	ldd	r27, Z+13	; 0x0d
    1b4a:	8a 0d       	add	r24, r10
    1b4c:	9b 1d       	adc	r25, r11
    1b4e:	a1 1d       	adc	r26, r1
    1b50:	b1 1d       	adc	r27, r1
    1b52:	82 87       	std	Z+10, r24	; 0x0a
    1b54:	93 87       	std	Z+11, r25	; 0x0b
    1b56:	a4 87       	std	Z+12, r26	; 0x0c
    1b58:	b5 87       	std	Z+13, r27	; 0x0d
    1b5a:	d8 01       	movw	r26, r16
    1b5c:	1a 96       	adiw	r26, 0x0a	; 10
    1b5e:	8d 90       	ld	r8, X+
    1b60:	9d 90       	ld	r9, X+
    1b62:	ad 90       	ld	r10, X+
    1b64:	bc 90       	ld	r11, X
    1b66:	1d 97       	sbiw	r26, 0x0d	; 13
    1b68:	c1 14       	cp	r12, r1
    1b6a:	d1 04       	cpc	r13, r1
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    1b6c:	09 f0       	breq	.+2      	; 0x1b70 <_ZN6SdFile5writeEPKvj+0x198>
    1b6e:	76 cf       	rjmp	.-276    	; 0x1a5c <_ZN6SdFile5writeEPKvj+0x84>
    1b70:	86 c0       	rjmp	.+268    	; 0x1c7e <_ZN6SdFile5writeEPKvj+0x2a6>
    1b72:	81 14       	cp	r8, r1
    1b74:	91 04       	cpc	r9, r1
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    uint16_t blockOffset = curPosition_ & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
    1b76:	09 f0       	breq	.+2      	; 0x1b7a <_ZN6SdFile5writeEPKvj+0x1a2>
    1b78:	89 cf       	rjmp	.-238    	; 0x1a8c <_ZN6SdFile5writeEPKvj+0xb4>
    1b7a:	16 96       	adiw	r26, 0x06	; 6
    1b7c:	4d 91       	ld	r20, X+
      // start of new cluster
      if (curCluster_ == 0) {
    1b7e:	5d 91       	ld	r21, X+
    1b80:	6d 91       	ld	r22, X+
    1b82:	7c 91       	ld	r23, X
    1b84:	19 97       	sbiw	r26, 0x09	; 9
    1b86:	41 15       	cp	r20, r1
    1b88:	51 05       	cpc	r21, r1
    1b8a:	61 05       	cpc	r22, r1
    1b8c:	71 05       	cpc	r23, r1
    1b8e:	59 f4       	brne	.+22     	; 0x1ba6 <_ZN6SdFile5writeEPKvj+0x1ce>
    1b90:	57 96       	adiw	r26, 0x17	; 23
    1b92:	8d 91       	ld	r24, X+
        if (firstCluster_ == 0) {
    1b94:	9d 91       	ld	r25, X+
    1b96:	0d 90       	ld	r0, X+
    1b98:	bc 91       	ld	r27, X
    1b9a:	a0 2d       	mov	r26, r0
    1b9c:	00 97       	sbiw	r24, 0x00	; 0
    1b9e:	a1 05       	cpc	r26, r1
    1ba0:	b1 05       	cpc	r27, r1
    1ba2:	31 f5       	brne	.+76     	; 0x1bf0 <_ZN6SdFile5writeEPKvj+0x218>
    1ba4:	20 c0       	rjmp	.+64     	; 0x1be6 <_ZN6SdFile5writeEPKvj+0x20e>
    1ba6:	9e 01       	movw	r18, r28
    1ba8:	2f 5f       	subi	r18, 0xFF	; 255
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    1baa:	3f 4f       	sbci	r19, 0xFF	; 255
    1bac:	2f d1       	rcall	.+606    	; 0x1e0c <_ZNK8SdVolume6fatGetEmPm>
    1bae:	88 23       	and	r24, r24
    1bb0:	09 f4       	brne	.+2      	; 0x1bb4 <_ZN6SdFile5writeEPKvj+0x1dc>
    1bb2:	50 cf       	rjmp	.-352    	; 0x1a54 <_ZN6SdFile5writeEPKvj+0x7c>
    1bb4:	89 81       	ldd	r24, Y+1	; 0x01
    1bb6:	9a 81       	ldd	r25, Y+2	; 0x02
    1bb8:	ab 81       	ldd	r26, Y+3	; 0x03
        if (vol_->isEOC(next)) {
    1bba:	bc 81       	ldd	r27, Y+4	; 0x04
    1bbc:	f8 01       	movw	r30, r16
    1bbe:	23 8d       	ldd	r18, Z+27	; 0x1b
    1bc0:	34 8d       	ldd	r19, Z+28	; 0x1c
    1bc2:	f9 01       	movw	r30, r18
    1bc4:	27 89       	ldd	r18, Z+23	; 0x17
    1bc6:	20 31       	cpi	r18, 0x10	; 16
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    1bc8:	29 f4       	brne	.+10     	; 0x1bd4 <_ZN6SdFile5writeEPKvj+0x1fc>
    1bca:	48 ef       	ldi	r20, 0xF8	; 248
    1bcc:	5f ef       	ldi	r21, 0xFF	; 255
    1bce:	60 e0       	ldi	r22, 0x00	; 0
    1bd0:	70 e0       	ldi	r23, 0x00	; 0
    1bd2:	04 c0       	rjmp	.+8      	; 0x1bdc <_ZN6SdFile5writeEPKvj+0x204>
    1bd4:	48 ef       	ldi	r20, 0xF8	; 248
    1bd6:	5f ef       	ldi	r21, 0xFF	; 255
    1bd8:	6f ef       	ldi	r22, 0xFF	; 255
    1bda:	7f e0       	ldi	r23, 0x0F	; 15
    1bdc:	84 17       	cp	r24, r20
    1bde:	95 07       	cpc	r25, r21
    1be0:	a6 07       	cpc	r26, r22
    1be2:	b7 07       	cpc	r27, r23
    1be4:	28 f0       	brcs	.+10     	; 0x1bf0 <_ZN6SdFile5writeEPKvj+0x218>
    1be6:	c8 01       	movw	r24, r16
    1be8:	d6 dd       	rcall	.-1108   	; 0x1796 <_ZN6SdFile10addClusterEv>
    1bea:	81 11       	cpse	r24, r1
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
    1bec:	4f cf       	rjmp	.-354    	; 0x1a8c <_ZN6SdFile5writeEPKvj+0xb4>
    1bee:	2c cf       	rjmp	.-424    	; 0x1a48 <_ZN6SdFile5writeEPKvj+0x70>
    1bf0:	f8 01       	movw	r30, r16
    1bf2:	86 83       	std	Z+6, r24	; 0x06
    1bf4:	97 83       	std	Z+7, r25	; 0x07
    1bf6:	a0 87       	std	Z+8, r26	; 0x08
        } else {
          curCluster_ = next;
    1bf8:	b1 87       	std	Z+9, r27	; 0x09
    1bfa:	48 cf       	rjmp	.-368    	; 0x1a8c <_ZN6SdFile5writeEPKvj+0xb4>
    1bfc:	81 14       	cp	r8, r1
    1bfe:	91 04       	cpc	r9, r1
    1c00:	21 f5       	brne	.+72     	; 0x1c4a <_ZN6SdFile5writeEPKvj+0x272>
    1c02:	d8 01       	movw	r26, r16
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
      src += 512;
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
    1c04:	1a 96       	adiw	r26, 0x0a	; 10
    1c06:	4d 91       	ld	r20, X+
    1c08:	5d 91       	ld	r21, X+
    1c0a:	6d 91       	ld	r22, X+
    1c0c:	7c 91       	ld	r23, X
    1c0e:	1d 97       	sbiw	r26, 0x0d	; 13
    1c10:	53 96       	adiw	r26, 0x13	; 19
    1c12:	8d 91       	ld	r24, X+
    1c14:	9d 91       	ld	r25, X+
    1c16:	0d 90       	ld	r0, X+
    1c18:	bc 91       	ld	r27, X
    1c1a:	a0 2d       	mov	r26, r0
    1c1c:	48 17       	cp	r20, r24
    1c1e:	59 07       	cpc	r21, r25
    1c20:	6a 07       	cpc	r22, r26
    1c22:	7b 07       	cpc	r23, r27
    1c24:	90 f0       	brcs	.+36     	; 0x1c4a <_ZN6SdFile5writeEPKvj+0x272>
    1c26:	80 d0       	rcall	.+256    	; 0x1d28 <_ZN8SdVolume10cacheFlushEv>
    1c28:	88 23       	and	r24, r24
    1c2a:	09 f4       	brne	.+2      	; 0x1c2e <_ZN6SdFile5writeEPKvj+0x256>
    1c2c:	0d cf       	rjmp	.-486    	; 0x1a48 <_ZN6SdFile5writeEPKvj+0x70>
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
    1c2e:	20 92 0d 01 	sts	0x010D, r2
    1c32:	30 92 0e 01 	sts	0x010E, r3
    1c36:	40 92 0f 01 	sts	0x010F, r4
        SdVolume::cacheBlockNumber_ = block;
    1c3a:	50 92 10 01 	sts	0x0110, r5
    1c3e:	80 91 e2 04 	lds	r24, 0x04E2
    1c42:	81 60       	ori	r24, 0x01	; 1
    1c44:	80 93 e2 04 	sts	0x04E2, r24
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    1c48:	07 c0       	rjmp	.+14     	; 0x1c58 <_ZN6SdFile5writeEPKvj+0x280>
    1c4a:	41 e0       	ldi	r20, 0x01	; 1
    1c4c:	c2 01       	movw	r24, r4
    1c4e:	b1 01       	movw	r22, r2
    1c50:	a4 d0       	rcall	.+328    	; 0x1d9a <_ZN8SdVolume13cacheRawBlockEmh>
    1c52:	88 23       	and	r24, r24
        SdVolume::cacheSetDirty();
      } else {
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
    1c54:	09 f4       	brne	.+2      	; 0x1c58 <_ZN6SdFile5writeEPKvj+0x280>
    1c56:	f8 ce       	rjmp	.-528    	; 0x1a48 <_ZN6SdFile5writeEPKvj+0x70>
    1c58:	c4 01       	movw	r24, r8
    1c5a:	8b 51       	subi	r24, 0x1B	; 27
    1c5c:	9b 4f       	sbci	r25, 0xFB	; 251
    1c5e:	d7 01       	movw	r26, r14
    1c60:	9c 01       	movw	r18, r24
    1c62:	2a 0d       	add	r18, r10
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
    1c64:	3b 1d       	adc	r19, r11
    1c66:	fc 01       	movw	r30, r24
    1c68:	e2 17       	cp	r30, r18
    1c6a:	f3 07       	cpc	r31, r19
      uint8_t* end = dst + n;
    1c6c:	19 f0       	breq	.+6      	; 0x1c74 <_ZN6SdFile5writeEPKvj+0x29c>
    1c6e:	4d 91       	ld	r20, X+
    1c70:	41 93       	st	Z+, r20
      while (dst != end) *dst++ = *src++;
    1c72:	fa cf       	rjmp	.-12     	; 0x1c68 <_ZN6SdFile5writeEPKvj+0x290>
    1c74:	e8 1b       	sub	r30, r24
    1c76:	f9 0b       	sbc	r31, r25
    1c78:	ee 0e       	add	r14, r30
    1c7a:	ff 1e       	adc	r15, r31
    1c7c:	5f cf       	rjmp	.-322    	; 0x1b3c <_ZN6SdFile5writeEPKvj+0x164>
    1c7e:	53 96       	adiw	r26, 0x13	; 19
    1c80:	8d 91       	ld	r24, X+
    1c82:	9d 91       	ld	r25, X+
    1c84:	0d 90       	ld	r0, X+
    1c86:	bc 91       	ld	r27, X
    1c88:	a0 2d       	mov	r26, r0
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    1c8a:	f8 01       	movw	r30, r16
    1c8c:	24 81       	ldd	r18, Z+4	; 0x04
    1c8e:	88 15       	cp	r24, r8
    1c90:	99 05       	cpc	r25, r9
    1c92:	aa 05       	cpc	r26, r10
    1c94:	bb 05       	cpc	r27, r11
    1c96:	38 f4       	brcc	.+14     	; 0x1ca6 <_ZN6SdFile5writeEPKvj+0x2ce>
    1c98:	83 8a       	std	Z+19, r8	; 0x13
    1c9a:	94 8a       	std	Z+20, r9	; 0x14
    1c9c:	a5 8a       	std	Z+21, r10	; 0x15
    1c9e:	b6 8a       	std	Z+22, r11	; 0x16
    1ca0:	20 68       	ori	r18, 0x80	; 128
    1ca2:	24 83       	std	Z+4, r18	; 0x04
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    1ca4:	0c c0       	rjmp	.+24     	; 0x1cbe <_ZN6SdFile5writeEPKvj+0x2e6>
    1ca6:	80 91 dc 04 	lds	r24, 0x04DC
    1caa:	90 91 dd 04 	lds	r25, 0x04DD
    flags_ |= F_FILE_DIR_DIRTY;
    1cae:	89 2b       	or	r24, r25
    1cb0:	31 f0       	breq	.+12     	; 0x1cbe <_ZN6SdFile5writeEPKvj+0x2e6>
  } else if (dateTime_ && nbyte) {
    1cb2:	61 14       	cp	r6, r1
    1cb4:	71 04       	cpc	r7, r1
    1cb6:	19 f0       	breq	.+6      	; 0x1cbe <_ZN6SdFile5writeEPKvj+0x2e6>
    1cb8:	20 68       	ori	r18, 0x80	; 128
    1cba:	f8 01       	movw	r30, r16
    1cbc:	24 83       	std	Z+4, r18	; 0x04
    1cbe:	d8 01       	movw	r26, r16
    1cc0:	14 96       	adiw	r26, 0x04	; 4
    1cc2:	8c 91       	ld	r24, X
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
    1cc4:	83 fd       	sbrc	r24, 3
    1cc6:	02 c0       	rjmp	.+4      	; 0x1ccc <_ZN6SdFile5writeEPKvj+0x2f4>
    1cc8:	c3 01       	movw	r24, r6
  }

  if (flags_ & O_SYNC) {
    1cca:	06 c0       	rjmp	.+12     	; 0x1cd8 <_ZN6SdFile5writeEPKvj+0x300>
    1ccc:	c8 01       	movw	r24, r16
    1cce:	3f de       	rcall	.-898    	; 0x194e <_ZN6SdFile4syncEv>
    1cd0:	88 23       	and	r24, r24
    1cd2:	09 f4       	brne	.+2      	; 0x1cd6 <_ZN6SdFile5writeEPKvj+0x2fe>
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    1cd4:	b9 ce       	rjmp	.-654    	; 0x1a48 <_ZN6SdFile5writeEPKvj+0x70>
    1cd6:	f8 cf       	rjmp	.-16     	; 0x1cc8 <_ZN6SdFile5writeEPKvj+0x2f0>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
  }

  if (flags_ & O_SYNC) {
    if (!sync()) goto writeErrorReturn;
    1cd8:	0f 90       	pop	r0
    1cda:	0f 90       	pop	r0
    1cdc:	0f 90       	pop	r0
    1cde:	0f 90       	pop	r0
    1ce0:	0f 90       	pop	r0
    1ce2:	df 91       	pop	r29
    1ce4:	cf 91       	pop	r28
 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
}
    1ce6:	1f 91       	pop	r17
    1ce8:	0f 91       	pop	r16
    1cea:	ff 90       	pop	r15
    1cec:	ef 90       	pop	r14
    1cee:	df 90       	pop	r13
    1cf0:	cf 90       	pop	r12
    1cf2:	bf 90       	pop	r11
    1cf4:	af 90       	pop	r10
    1cf6:	9f 90       	pop	r9
    1cf8:	8f 90       	pop	r8
    1cfa:	7f 90       	pop	r7
    1cfc:	6f 90       	pop	r6
    1cfe:	5f 90       	pop	r5
    1d00:	4f 90       	pop	r4
    1d02:	3f 90       	pop	r3
    1d04:	2f 90       	pop	r2
    1d06:	08 95       	ret

00001d08 <_ZN6SdFile5writeEh>:
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    1d08:	cf 93       	push	r28
    1d0a:	df 93       	push	r29
    1d0c:	1f 92       	push	r1
    1d0e:	cd b7       	in	r28, 0x3d	; 61
    1d10:	de b7       	in	r29, 0x3e	; 62
    1d12:	69 83       	std	Y+1, r22	; 0x01
  return write(&b, 1);
    1d14:	41 e0       	ldi	r20, 0x01	; 1
    1d16:	50 e0       	ldi	r21, 0x00	; 0
    1d18:	be 01       	movw	r22, r28
    1d1a:	6f 5f       	subi	r22, 0xFF	; 255
    1d1c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d1e:	5c de       	rcall	.-840    	; 0x19d8 <_ZN6SdFile5writeEPKvj>
    1d20:	0f 90       	pop	r0
}
    1d22:	df 91       	pop	r29
    1d24:	cf 91       	pop	r28
    1d26:	08 95       	ret

00001d28 <_ZN8SdVolume10cacheFlushEv>:

  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    1d28:	80 91 e2 04 	lds	r24, 0x04E2
    1d2c:	88 23       	and	r24, r24
    1d2e:	89 f1       	breq	.+98     	; 0x1d92 <_ZN8SdVolume10cacheFlushEv+0x6a>
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    1d30:	40 91 0d 01 	lds	r20, 0x010D
    1d34:	50 91 0e 01 	lds	r21, 0x010E
    1d38:	60 91 0f 01 	lds	r22, 0x010F
    1d3c:	70 91 10 01 	lds	r23, 0x0110
    1d40:	25 ee       	ldi	r18, 0xE5	; 229
    1d42:	34 e0       	ldi	r19, 0x04	; 4
    1d44:	80 91 e3 04 	lds	r24, 0x04E3
    1d48:	90 91 e4 04 	lds	r25, 0x04E4
    1d4c:	d7 dc       	rcall	.-1618   	; 0x16fc <_ZN7Sd2Card10writeBlockEmPKh>
    1d4e:	88 23       	and	r24, r24
    1d50:	11 f1       	breq	.+68     	; 0x1d96 <_ZN8SdVolume10cacheFlushEv+0x6e>
    1d52:	40 91 de 04 	lds	r20, 0x04DE
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
    1d56:	50 91 df 04 	lds	r21, 0x04DF
    1d5a:	60 91 e0 04 	lds	r22, 0x04E0
    1d5e:	70 91 e1 04 	lds	r23, 0x04E1
    1d62:	41 15       	cp	r20, r1
    1d64:	51 05       	cpc	r21, r1
    1d66:	61 05       	cpc	r22, r1
    1d68:	71 05       	cpc	r23, r1
    1d6a:	89 f0       	breq	.+34     	; 0x1d8e <_ZN8SdVolume10cacheFlushEv+0x66>
    1d6c:	25 ee       	ldi	r18, 0xE5	; 229
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    1d6e:	34 e0       	ldi	r19, 0x04	; 4
    1d70:	80 91 e3 04 	lds	r24, 0x04E3
    1d74:	90 91 e4 04 	lds	r25, 0x04E4
    1d78:	c1 dc       	rcall	.-1662   	; 0x16fc <_ZN7Sd2Card10writeBlockEmPKh>
    1d7a:	88 23       	and	r24, r24
    1d7c:	61 f0       	breq	.+24     	; 0x1d96 <_ZN8SdVolume10cacheFlushEv+0x6e>
    1d7e:	10 92 de 04 	sts	0x04DE, r1
        return false;
      }
      cacheMirrorBlock_ = 0;
    1d82:	10 92 df 04 	sts	0x04DF, r1
    1d86:	10 92 e0 04 	sts	0x04E0, r1
    1d8a:	10 92 e1 04 	sts	0x04E1, r1
    1d8e:	10 92 e2 04 	sts	0x04E2, r1
    }
    cacheDirty_ = 0;
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	08 95       	ret
  }
  return true;
    1d96:	80 e0       	ldi	r24, 0x00	; 0
    1d98:	08 95       	ret

00001d9a <_ZN8SdVolume13cacheRawBlockEmh>:
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    1d9a:	cf 92       	push	r12
    1d9c:	df 92       	push	r13
    1d9e:	ef 92       	push	r14
    1da0:	ff 92       	push	r15
    1da2:	cf 93       	push	r28
    1da4:	6b 01       	movw	r12, r22
    1da6:	7c 01       	movw	r14, r24
    1da8:	c4 2f       	mov	r28, r20
  if (cacheBlockNumber_ != blockNumber) {
    1daa:	80 91 0d 01 	lds	r24, 0x010D
    1dae:	90 91 0e 01 	lds	r25, 0x010E
    1db2:	a0 91 0f 01 	lds	r26, 0x010F
    1db6:	b0 91 10 01 	lds	r27, 0x0110
    1dba:	8c 15       	cp	r24, r12
    1dbc:	9d 05       	cpc	r25, r13
    1dbe:	ae 05       	cpc	r26, r14
    1dc0:	bf 05       	cpc	r27, r15
    1dc2:	c1 f0       	breq	.+48     	; 0x1df4 <_ZN8SdVolume13cacheRawBlockEmh+0x5a>
    if (!cacheFlush()) return false;
    1dc4:	b1 df       	rcall	.-158    	; 0x1d28 <_ZN8SdVolume10cacheFlushEv>
    1dc6:	81 11       	cpse	r24, r1
    1dc8:	02 c0       	rjmp	.+4      	; 0x1dce <_ZN8SdVolume13cacheRawBlockEmh+0x34>
    1dca:	80 e0       	ldi	r24, 0x00	; 0
    1dcc:	19 c0       	rjmp	.+50     	; 0x1e00 <_ZN8SdVolume13cacheRawBlockEmh+0x66>
    1dce:	25 ee       	ldi	r18, 0xE5	; 229
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    1dd0:	34 e0       	ldi	r19, 0x04	; 4
    1dd2:	b7 01       	movw	r22, r14
    1dd4:	a6 01       	movw	r20, r12
    1dd6:	80 91 e3 04 	lds	r24, 0x04E3
    1dda:	90 91 e4 04 	lds	r25, 0x04E4
    1dde:	42 dc       	rcall	.-1916   	; 0x1664 <_ZN7Sd2Card9readBlockEmPh>
    1de0:	88 23       	and	r24, r24
    1de2:	99 f3       	breq	.-26     	; 0x1dca <_ZN8SdVolume13cacheRawBlockEmh+0x30>
    1de4:	c0 92 0d 01 	sts	0x010D, r12
    cacheBlockNumber_ = blockNumber;
    1de8:	d0 92 0e 01 	sts	0x010E, r13
    1dec:	e0 92 0f 01 	sts	0x010F, r14
    1df0:	f0 92 10 01 	sts	0x0110, r15
    1df4:	80 91 e2 04 	lds	r24, 0x04E2
  }
  cacheDirty_ |= action;
    1df8:	8c 2b       	or	r24, r28
    1dfa:	80 93 e2 04 	sts	0x04E2, r24
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
    1e00:	cf 91       	pop	r28
  return true;
    1e02:	ff 90       	pop	r15
}
    1e04:	ef 90       	pop	r14
    1e06:	df 90       	pop	r13
    1e08:	cf 90       	pop	r12
    1e0a:	08 95       	ret

00001e0c <_ZNK8SdVolume6fatGetEmPm>:
  *size = s;
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
    1e0c:	8f 92       	push	r8
    1e0e:	9f 92       	push	r9
    1e10:	af 92       	push	r10
    1e12:	bf 92       	push	r11
    1e14:	cf 92       	push	r12
    1e16:	df 92       	push	r13
    1e18:	ef 92       	push	r14
    1e1a:	ff 92       	push	r15
    1e1c:	0f 93       	push	r16
    1e1e:	1f 93       	push	r17
    1e20:	cf 93       	push	r28
    1e22:	df 93       	push	r29
    1e24:	8c 01       	movw	r16, r24
    1e26:	6a 01       	movw	r12, r20
    1e28:	7b 01       	movw	r14, r22
    1e2a:	e9 01       	movw	r28, r18
  if (cluster > (clusterCount_ + 1)) return false;
    1e2c:	fc 01       	movw	r30, r24
    1e2e:	81 85       	ldd	r24, Z+9	; 0x09
    1e30:	92 85       	ldd	r25, Z+10	; 0x0a
    1e32:	a3 85       	ldd	r26, Z+11	; 0x0b
    1e34:	b4 85       	ldd	r27, Z+12	; 0x0c
    1e36:	01 96       	adiw	r24, 0x01	; 1
    1e38:	a1 1d       	adc	r26, r1
    1e3a:	b1 1d       	adc	r27, r1
    1e3c:	84 17       	cp	r24, r20
    1e3e:	95 07       	cpc	r25, r21
    1e40:	a6 07       	cpc	r26, r22
    1e42:	b7 07       	cpc	r27, r23
    1e44:	10 f4       	brcc	.+4      	; 0x1e4a <_ZNK8SdVolume6fatGetEmPm+0x3e>
    1e46:	80 e0       	ldi	r24, 0x00	; 0
    1e48:	57 c0       	rjmp	.+174    	; 0x1ef8 <_ZNK8SdVolume6fatGetEmPm+0xec>
  uint32_t lba = fatStartBlock_;
    1e4a:	f8 01       	movw	r30, r16
    1e4c:	43 89       	ldd	r20, Z+19	; 0x13
    1e4e:	54 89       	ldd	r21, Z+20	; 0x14
    1e50:	65 89       	ldd	r22, Z+21	; 0x15
    1e52:	76 89       	ldd	r23, Z+22	; 0x16
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    1e54:	87 89       	ldd	r24, Z+23	; 0x17
    1e56:	80 31       	cpi	r24, 0x10	; 16
    1e58:	29 f4       	brne	.+10     	; 0x1e64 <_ZNK8SdVolume6fatGetEmPm+0x58>
    1e5a:	bb 27       	eor	r27, r27
    1e5c:	af 2d       	mov	r26, r15
    1e5e:	9e 2d       	mov	r25, r14
    1e60:	8d 2d       	mov	r24, r13
    1e62:	09 c0       	rjmp	.+18     	; 0x1e76 <_ZNK8SdVolume6fatGetEmPm+0x6a>
    1e64:	d7 01       	movw	r26, r14
    1e66:	c6 01       	movw	r24, r12
    1e68:	27 e0       	ldi	r18, 0x07	; 7
    1e6a:	b6 95       	lsr	r27
    1e6c:	a7 95       	ror	r26
    1e6e:	97 95       	ror	r25
    1e70:	87 95       	ror	r24
    1e72:	2a 95       	dec	r18
    1e74:	d1 f7       	brne	.-12     	; 0x1e6a <_ZNK8SdVolume6fatGetEmPm+0x5e>
    1e76:	4c 01       	movw	r8, r24
    1e78:	5d 01       	movw	r10, r26
    1e7a:	84 0e       	add	r8, r20
    1e7c:	95 1e       	adc	r9, r21
    1e7e:	a6 1e       	adc	r10, r22
    1e80:	b7 1e       	adc	r11, r23
    1e82:	c5 01       	movw	r24, r10
    1e84:	b4 01       	movw	r22, r8
  if (lba != cacheBlockNumber_) {
    1e86:	80 90 0d 01 	lds	r8, 0x010D
    1e8a:	90 90 0e 01 	lds	r9, 0x010E
    1e8e:	a0 90 0f 01 	lds	r10, 0x010F
    1e92:	b0 90 10 01 	lds	r11, 0x0110
    1e96:	68 15       	cp	r22, r8
    1e98:	79 05       	cpc	r23, r9
    1e9a:	8a 05       	cpc	r24, r10
    1e9c:	9b 05       	cpc	r25, r11
    1e9e:	89 f4       	brne	.+34     	; 0x1ec2 <_ZNK8SdVolume6fatGetEmPm+0xb6>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  if (fatType_ == 16) {
    1ea0:	f8 01       	movw	r30, r16
    1ea2:	87 89       	ldd	r24, Z+23	; 0x17
    1ea4:	80 31       	cpi	r24, 0x10	; 16
    1ea6:	91 f4       	brne	.+36     	; 0x1ecc <_ZNK8SdVolume6fatGetEmPm+0xc0>
    *value = cacheBuffer_.fat16[cluster & 0XFF];
    1ea8:	dd 24       	eor	r13, r13
    1eaa:	ee 24       	eor	r14, r14
    1eac:	ff 24       	eor	r15, r15
    1eae:	f6 01       	movw	r30, r12
    1eb0:	ee 0f       	add	r30, r30
    1eb2:	ff 1f       	adc	r31, r31
    1eb4:	eb 51       	subi	r30, 0x1B	; 27
    1eb6:	fb 4f       	sbci	r31, 0xFB	; 251
    1eb8:	80 81       	ld	r24, Z
    1eba:	91 81       	ldd	r25, Z+1	; 0x01
    1ebc:	a0 e0       	ldi	r26, 0x00	; 0
    1ebe:	b0 e0       	ldi	r27, 0x00	; 0
    1ec0:	16 c0       	rjmp	.+44     	; 0x1eee <_ZNK8SdVolume6fatGetEmPm+0xe2>
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    1ec2:	40 e0       	ldi	r20, 0x00	; 0
    1ec4:	6a df       	rcall	.-300    	; 0x1d9a <_ZN8SdVolume13cacheRawBlockEmh>
    1ec6:	81 11       	cpse	r24, r1
    1ec8:	eb cf       	rjmp	.-42     	; 0x1ea0 <_ZNK8SdVolume6fatGetEmPm+0x94>
    1eca:	bd cf       	rjmp	.-134    	; 0x1e46 <_ZNK8SdVolume6fatGetEmPm+0x3a>
    1ecc:	e8 94       	clt
  }
  if (fatType_ == 16) {
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
    1ece:	c7 f8       	bld	r12, 7
    1ed0:	dd 24       	eor	r13, r13
    1ed2:	ee 24       	eor	r14, r14
    1ed4:	ff 24       	eor	r15, r15
    1ed6:	f6 01       	movw	r30, r12
    1ed8:	ee 0f       	add	r30, r30
    1eda:	ff 1f       	adc	r31, r31
    1edc:	ee 0f       	add	r30, r30
    1ede:	ff 1f       	adc	r31, r31
    1ee0:	eb 51       	subi	r30, 0x1B	; 27
    1ee2:	fb 4f       	sbci	r31, 0xFB	; 251
    1ee4:	80 81       	ld	r24, Z
    1ee6:	91 81       	ldd	r25, Z+1	; 0x01
    1ee8:	a2 81       	ldd	r26, Z+2	; 0x02
    1eea:	b3 81       	ldd	r27, Z+3	; 0x03
    1eec:	bf 70       	andi	r27, 0x0F	; 15
    1eee:	88 83       	st	Y, r24
    1ef0:	99 83       	std	Y+1, r25	; 0x01
    1ef2:	aa 83       	std	Y+2, r26	; 0x02
    1ef4:	bb 83       	std	Y+3, r27	; 0x03
    1ef6:	81 e0       	ldi	r24, 0x01	; 1
    1ef8:	df 91       	pop	r29
  }
  return true;
}
    1efa:	cf 91       	pop	r28
    1efc:	1f 91       	pop	r17
    1efe:	0f 91       	pop	r16
    1f00:	ff 90       	pop	r15
    1f02:	ef 90       	pop	r14
    1f04:	df 90       	pop	r13
    1f06:	cf 90       	pop	r12
    1f08:	bf 90       	pop	r11
    1f0a:	af 90       	pop	r10
    1f0c:	9f 90       	pop	r9
    1f0e:	8f 90       	pop	r8
    1f10:	08 95       	ret

00001f12 <_ZN8SdVolume6fatPutEmm>:
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    1f12:	4f 92       	push	r4
    1f14:	5f 92       	push	r5
    1f16:	6f 92       	push	r6
    1f18:	7f 92       	push	r7
    1f1a:	8f 92       	push	r8
    1f1c:	9f 92       	push	r9
    1f1e:	af 92       	push	r10
    1f20:	bf 92       	push	r11
    1f22:	cf 92       	push	r12
    1f24:	df 92       	push	r13
    1f26:	ef 92       	push	r14
    1f28:	ff 92       	push	r15
    1f2a:	0f 93       	push	r16
    1f2c:	1f 93       	push	r17
    1f2e:	cf 93       	push	r28
    1f30:	df 93       	push	r29
    1f32:	ec 01       	movw	r28, r24
    1f34:	6a 01       	movw	r12, r20
    1f36:	7b 01       	movw	r14, r22
    1f38:	28 01       	movw	r4, r16
    1f3a:	39 01       	movw	r6, r18
  // error if reserved cluster
  if (cluster < 2) return false;
    1f3c:	42 30       	cpi	r20, 0x02	; 2
    1f3e:	51 05       	cpc	r21, r1
    1f40:	61 05       	cpc	r22, r1
    1f42:	71 05       	cpc	r23, r1
    1f44:	08 f4       	brcc	.+2      	; 0x1f48 <_ZN8SdVolume6fatPutEmm+0x36>
    1f46:	73 c0       	rjmp	.+230    	; 0x202e <_ZN8SdVolume6fatPutEmm+0x11c>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    1f48:	49 85       	ldd	r20, Y+9	; 0x09
    1f4a:	5a 85       	ldd	r21, Y+10	; 0x0a
    1f4c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f4e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f50:	4f 5f       	subi	r20, 0xFF	; 255
    1f52:	5f 4f       	sbci	r21, 0xFF	; 255
    1f54:	6f 4f       	sbci	r22, 0xFF	; 255
    1f56:	7f 4f       	sbci	r23, 0xFF	; 255
    1f58:	4c 15       	cp	r20, r12
    1f5a:	5d 05       	cpc	r21, r13
    1f5c:	6e 05       	cpc	r22, r14
    1f5e:	7f 05       	cpc	r23, r15
    1f60:	08 f4       	brcc	.+2      	; 0x1f64 <_ZN8SdVolume6fatPutEmm+0x52>
    1f62:	65 c0       	rjmp	.+202    	; 0x202e <_ZN8SdVolume6fatPutEmm+0x11c>

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
    1f64:	8b 88       	ldd	r8, Y+19	; 0x13
    1f66:	9c 88       	ldd	r9, Y+20	; 0x14
    1f68:	ad 88       	ldd	r10, Y+21	; 0x15
    1f6a:	be 88       	ldd	r11, Y+22	; 0x16
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    1f6c:	8f 89       	ldd	r24, Y+23	; 0x17
    1f6e:	80 31       	cpi	r24, 0x10	; 16
    1f70:	29 f4       	brne	.+10     	; 0x1f7c <_ZN8SdVolume6fatPutEmm+0x6a>
    1f72:	77 27       	eor	r23, r23
    1f74:	6f 2d       	mov	r22, r15
    1f76:	5e 2d       	mov	r21, r14
    1f78:	4d 2d       	mov	r20, r13
    1f7a:	09 c0       	rjmp	.+18     	; 0x1f8e <_ZN8SdVolume6fatPutEmm+0x7c>
    1f7c:	b7 01       	movw	r22, r14
    1f7e:	a6 01       	movw	r20, r12
    1f80:	e7 e0       	ldi	r30, 0x07	; 7
    1f82:	76 95       	lsr	r23
    1f84:	67 95       	ror	r22
    1f86:	57 95       	ror	r21
    1f88:	47 95       	ror	r20
    1f8a:	ea 95       	dec	r30
    1f8c:	d1 f7       	brne	.-12     	; 0x1f82 <_ZN8SdVolume6fatPutEmm+0x70>
    1f8e:	84 0e       	add	r8, r20
    1f90:	95 1e       	adc	r9, r21
    1f92:	a6 1e       	adc	r10, r22
    1f94:	b7 1e       	adc	r11, r23

  if (lba != cacheBlockNumber_) {
    1f96:	40 91 0d 01 	lds	r20, 0x010D
    1f9a:	50 91 0e 01 	lds	r21, 0x010E
    1f9e:	60 91 0f 01 	lds	r22, 0x010F
    1fa2:	70 91 10 01 	lds	r23, 0x0110
    1fa6:	84 16       	cp	r8, r20
    1fa8:	95 06       	cpc	r9, r21
    1faa:	a6 06       	cpc	r10, r22
    1fac:	b7 06       	cpc	r11, r23
    1fae:	71 f4       	brne	.+28     	; 0x1fcc <_ZN8SdVolume6fatPutEmm+0xba>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  // store entry
  if (fatType_ == 16) {
    1fb0:	8f 89       	ldd	r24, Y+23	; 0x17
    1fb2:	80 31       	cpi	r24, 0x10	; 16
    1fb4:	91 f4       	brne	.+36     	; 0x1fda <_ZN8SdVolume6fatPutEmm+0xc8>
    cacheBuffer_.fat16[cluster & 0XFF] = value;
    1fb6:	dd 24       	eor	r13, r13
    1fb8:	ee 24       	eor	r14, r14
    1fba:	ff 24       	eor	r15, r15
    1fbc:	f6 01       	movw	r30, r12
    1fbe:	ee 0f       	add	r30, r30
    1fc0:	ff 1f       	adc	r31, r31
    1fc2:	eb 51       	subi	r30, 0x1B	; 27
    1fc4:	fb 4f       	sbci	r31, 0xFB	; 251
    1fc6:	51 82       	std	Z+1, r5	; 0x01
    1fc8:	40 82       	st	Z, r4
    1fca:	17 c0       	rjmp	.+46     	; 0x1ffa <_ZN8SdVolume6fatPutEmm+0xe8>
  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;

  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    1fcc:	40 e0       	ldi	r20, 0x00	; 0
    1fce:	c5 01       	movw	r24, r10
    1fd0:	b4 01       	movw	r22, r8
    1fd2:	e3 de       	rcall	.-570    	; 0x1d9a <_ZN8SdVolume13cacheRawBlockEmh>
    1fd4:	81 11       	cpse	r24, r1
    1fd6:	ec cf       	rjmp	.-40     	; 0x1fb0 <_ZN8SdVolume6fatPutEmm+0x9e>
    1fd8:	2a c0       	rjmp	.+84     	; 0x202e <_ZN8SdVolume6fatPutEmm+0x11c>
    1fda:	e8 94       	clt
  }
  // store entry
  if (fatType_ == 16) {
    cacheBuffer_.fat16[cluster & 0XFF] = value;
  } else {
    cacheBuffer_.fat32[cluster & 0X7F] = value;
    1fdc:	c7 f8       	bld	r12, 7
    1fde:	dd 24       	eor	r13, r13
    1fe0:	ee 24       	eor	r14, r14
    1fe2:	ff 24       	eor	r15, r15
    1fe4:	f6 01       	movw	r30, r12
    1fe6:	ee 0f       	add	r30, r30
    1fe8:	ff 1f       	adc	r31, r31
    1fea:	ee 0f       	add	r30, r30
    1fec:	ff 1f       	adc	r31, r31
    1fee:	eb 51       	subi	r30, 0x1B	; 27
    1ff0:	fb 4f       	sbci	r31, 0xFB	; 251
    1ff2:	40 82       	st	Z, r4
    1ff4:	51 82       	std	Z+1, r5	; 0x01
    1ff6:	62 82       	std	Z+2, r6	; 0x02
    1ff8:	73 82       	std	Z+3, r7	; 0x03
    1ffa:	80 91 e2 04 	lds	r24, 0x04E2
    1ffe:	81 60       	ori	r24, 0x01	; 1
    2000:	80 93 e2 04 	sts	0x04E2, r24
    2004:	8a 89       	ldd	r24, Y+18	; 0x12
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
    2006:	82 30       	cpi	r24, 0x02	; 2
    2008:	80 f0       	brcs	.+32     	; 0x202a <_ZN8SdVolume6fatPutEmm+0x118>
    200a:	8d 81       	ldd	r24, Y+5	; 0x05
    200c:	9e 81       	ldd	r25, Y+6	; 0x06
    200e:	af 81       	ldd	r26, Y+7	; 0x07
    2010:	b8 85       	ldd	r27, Y+8	; 0x08
    2012:	88 0d       	add	r24, r8
    2014:	99 1d       	adc	r25, r9
    2016:	aa 1d       	adc	r26, r10
    2018:	bb 1d       	adc	r27, r11
    201a:	80 93 de 04 	sts	0x04DE, r24
    201e:	90 93 df 04 	sts	0x04DF, r25
    2022:	a0 93 e0 04 	sts	0x04E0, r26
    2026:	b0 93 e1 04 	sts	0x04E1, r27
    202a:	81 e0       	ldi	r24, 0x01	; 1
  return true;
    202c:	01 c0       	rjmp	.+2      	; 0x2030 <_ZN8SdVolume6fatPutEmm+0x11e>
    202e:	80 e0       	ldi	r24, 0x00	; 0
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    2030:	df 91       	pop	r29
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
  return true;
}
    2032:	cf 91       	pop	r28
    2034:	1f 91       	pop	r17
    2036:	0f 91       	pop	r16
    2038:	ff 90       	pop	r15
    203a:	ef 90       	pop	r14
    203c:	df 90       	pop	r13
    203e:	cf 90       	pop	r12
    2040:	bf 90       	pop	r11
    2042:	af 90       	pop	r10
    2044:	9f 90       	pop	r9
    2046:	8f 90       	pop	r8
    2048:	7f 90       	pop	r7
    204a:	6f 90       	pop	r6
    204c:	5f 90       	pop	r5
    204e:	4f 90       	pop	r4
    2050:	08 95       	ret

00002052 <_ZN8SdVolume15allocContiguousEmPm>:
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    2052:	2f 92       	push	r2
    2054:	3f 92       	push	r3
    2056:	4f 92       	push	r4
    2058:	5f 92       	push	r5
    205a:	6f 92       	push	r6
    205c:	7f 92       	push	r7
    205e:	9f 92       	push	r9
    2060:	af 92       	push	r10
    2062:	bf 92       	push	r11
    2064:	cf 92       	push	r12
    2066:	df 92       	push	r13
    2068:	ef 92       	push	r14
    206a:	ff 92       	push	r15
    206c:	0f 93       	push	r16
    206e:	1f 93       	push	r17
    2070:	cf 93       	push	r28
    2072:	df 93       	push	r29
    2074:	cd b7       	in	r28, 0x3d	; 61
    2076:	de b7       	in	r29, 0x3e	; 62
    2078:	60 97       	sbiw	r28, 0x10	; 16
    207a:	0f b6       	in	r0, 0x3f	; 63
    207c:	f8 94       	cli
    207e:	de bf       	out	0x3e, r29	; 62
    2080:	0f be       	out	0x3f, r0	; 63
    2082:	cd bf       	out	0x3d, r28	; 61
    2084:	5c 01       	movw	r10, r24
    2086:	4d 87       	std	Y+13, r20	; 0x0d
    2088:	5e 87       	std	Y+14, r21	; 0x0e
    208a:	6f 87       	std	Y+15, r22	; 0x0f
    208c:	78 8b       	std	Y+16, r23	; 0x10
    208e:	19 01       	movw	r2, r18

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    2090:	d9 01       	movw	r26, r18
    2092:	4d 90       	ld	r4, X+
    2094:	5d 90       	ld	r5, X+
    2096:	6d 90       	ld	r6, X+
    2098:	7c 90       	ld	r7, X
    209a:	41 14       	cp	r4, r1
    209c:	51 04       	cpc	r5, r1
    209e:	61 04       	cpc	r6, r1
    20a0:	71 04       	cpc	r7, r1
    20a2:	31 f0       	breq	.+12     	; 0x20b0 <_ZN8SdVolume15allocContiguousEmPm+0x5e>
    // try to make file contiguous
    bgnCluster = *curCluster + 1;
    20a4:	bf ef       	ldi	r27, 0xFF	; 255
    20a6:	4b 1a       	sub	r4, r27
    20a8:	5b 0a       	sbc	r5, r27
    20aa:	6b 0a       	sbc	r6, r27
    20ac:	7b 0a       	sbc	r7, r27
    20ae:	10 c0       	rjmp	.+32     	; 0x20d0 <_ZN8SdVolume15allocContiguousEmPm+0x7e>

    // don't save new start location
    setStart = false;
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;
    20b0:	fc 01       	movw	r30, r24
    20b2:	40 80       	ld	r4, Z
    20b4:	51 80       	ldd	r5, Z+1	; 0x01
    20b6:	62 80       	ldd	r6, Z+2	; 0x02
    20b8:	73 80       	ldd	r7, Z+3	; 0x03

    // save next search start if one cluster
    setStart = 1 == count;
    20ba:	99 24       	eor	r9, r9
    20bc:	93 94       	inc	r9
    20be:	0d 85       	ldd	r16, Y+13	; 0x0d
    20c0:	1e 85       	ldd	r17, Y+14	; 0x0e
    20c2:	2f 85       	ldd	r18, Y+15	; 0x0f
    20c4:	38 89       	ldd	r19, Y+16	; 0x10
    20c6:	01 30       	cpi	r16, 0x01	; 1
    20c8:	11 05       	cpc	r17, r1
    20ca:	21 05       	cpc	r18, r1
    20cc:	31 05       	cpc	r19, r1
    20ce:	09 f0       	breq	.+2      	; 0x20d2 <_ZN8SdVolume15allocContiguousEmPm+0x80>
    20d0:	91 2c       	mov	r9, r1
  }
  // end of group
  uint32_t endCluster = bgnCluster;

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;
    20d2:	d5 01       	movw	r26, r10
    20d4:	19 96       	adiw	r26, 0x09	; 9
    20d6:	2d 91       	ld	r18, X+
    20d8:	3d 91       	ld	r19, X+
    20da:	4d 91       	ld	r20, X+
    20dc:	5c 91       	ld	r21, X
    20de:	1c 97       	sbiw	r26, 0x0c	; 12
    20e0:	2f 5f       	subi	r18, 0xFF	; 255
    20e2:	3f 4f       	sbci	r19, 0xFF	; 255
    20e4:	4f 4f       	sbci	r20, 0xFF	; 255
    20e6:	5f 4f       	sbci	r21, 0xFF	; 255
    20e8:	29 87       	std	Y+9, r18	; 0x09
    20ea:	3a 87       	std	Y+10, r19	; 0x0a
    20ec:	4b 87       	std	Y+11, r20	; 0x0b
    20ee:	5c 87       	std	Y+12, r21	; 0x0c

    // save next search start if one cluster
    setStart = 1 == count;
  }
  // end of group
  uint32_t endCluster = bgnCluster;
    20f0:	73 01       	movw	r14, r6
    20f2:	62 01       	movw	r12, r4

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    20f4:	1d 82       	std	Y+5, r1	; 0x05
    20f6:	1e 82       	std	Y+6, r1	; 0x06
    20f8:	1f 82       	std	Y+7, r1	; 0x07
    20fa:	18 86       	std	Y+8, r1	; 0x08
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    20fc:	f5 01       	movw	r30, r10
    20fe:	81 85       	ldd	r24, Z+9	; 0x09
    2100:	92 85       	ldd	r25, Z+10	; 0x0a
    2102:	a3 85       	ldd	r26, Z+11	; 0x0b
    2104:	b4 85       	ldd	r27, Z+12	; 0x0c
    2106:	0d 81       	ldd	r16, Y+5	; 0x05
    2108:	1e 81       	ldd	r17, Y+6	; 0x06
    210a:	2f 81       	ldd	r18, Y+7	; 0x07
    210c:	38 85       	ldd	r19, Y+8	; 0x08
    210e:	08 17       	cp	r16, r24
    2110:	19 07       	cpc	r17, r25
    2112:	2a 07       	cpc	r18, r26
    2114:	3b 07       	cpc	r19, r27
    2116:	08 f0       	brcs	.+2      	; 0x211a <_ZN8SdVolume15allocContiguousEmPm+0xc8>
    2118:	54 c0       	rjmp	.+168    	; 0x21c2 <_ZN8SdVolume15allocContiguousEmPm+0x170>

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
    211a:	29 85       	ldd	r18, Y+9	; 0x09
    211c:	3a 85       	ldd	r19, Y+10	; 0x0a
    211e:	4b 85       	ldd	r20, Y+11	; 0x0b
    2120:	5c 85       	ldd	r21, Y+12	; 0x0c
    2122:	2c 15       	cp	r18, r12
    2124:	3d 05       	cpc	r19, r13
    2126:	4e 05       	cpc	r20, r14
    2128:	5f 05       	cpc	r21, r15
    212a:	50 f4       	brcc	.+20     	; 0x2140 <_ZN8SdVolume15allocContiguousEmPm+0xee>
      bgnCluster = endCluster = 2;
    212c:	a2 e0       	ldi	r26, 0x02	; 2
    212e:	ca 2e       	mov	r12, r26
    2130:	d1 2c       	mov	r13, r1
    2132:	e1 2c       	mov	r14, r1
    2134:	f1 2c       	mov	r15, r1
    2136:	b2 e0       	ldi	r27, 0x02	; 2
    2138:	4b 2e       	mov	r4, r27
    213a:	51 2c       	mov	r5, r1
    213c:	61 2c       	mov	r6, r1
    213e:	71 2c       	mov	r7, r1
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    2140:	9e 01       	movw	r18, r28
    2142:	2f 5f       	subi	r18, 0xFF	; 255
    2144:	3f 4f       	sbci	r19, 0xFF	; 255
    2146:	b7 01       	movw	r22, r14
    2148:	a6 01       	movw	r20, r12
    214a:	c5 01       	movw	r24, r10
    214c:	5f de       	rcall	.-834    	; 0x1e0c <_ZNK8SdVolume6fatGetEmPm>
    214e:	88 23       	and	r24, r24
    2150:	c1 f1       	breq	.+112    	; 0x21c2 <_ZN8SdVolume15allocContiguousEmPm+0x170>
    2152:	49 81       	ldd	r20, Y+1	; 0x01

    if (f != 0) {
    2154:	5a 81       	ldd	r21, Y+2	; 0x02
    2156:	6b 81       	ldd	r22, Y+3	; 0x03
    2158:	7c 81       	ldd	r23, Y+4	; 0x04
    215a:	d7 01       	movw	r26, r14
    215c:	c6 01       	movw	r24, r12
    215e:	01 96       	adiw	r24, 0x01	; 1
    2160:	a1 1d       	adc	r26, r1
    2162:	b1 1d       	adc	r27, r1
    2164:	45 2b       	or	r20, r21
    2166:	46 2b       	or	r20, r22
    2168:	47 2b       	or	r20, r23
    216a:	19 f0       	breq	.+6      	; 0x2172 <_ZN8SdVolume15allocContiguousEmPm+0x120>
    216c:	2c 01       	movw	r4, r24
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    216e:	3d 01       	movw	r6, r26
    2170:	0f c0       	rjmp	.+30     	; 0x2190 <_ZN8SdVolume15allocContiguousEmPm+0x13e>
    2172:	ac 01       	movw	r20, r24
    } else if ((endCluster - bgnCluster + 1) == count) {
    2174:	bd 01       	movw	r22, r26
    2176:	44 19       	sub	r20, r4
    2178:	55 09       	sbc	r21, r5
    217a:	66 09       	sbc	r22, r6
    217c:	77 09       	sbc	r23, r7
    217e:	0d 85       	ldd	r16, Y+13	; 0x0d
    2180:	1e 85       	ldd	r17, Y+14	; 0x0e
    2182:	2f 85       	ldd	r18, Y+15	; 0x0f
    2184:	38 89       	ldd	r19, Y+16	; 0x10
    2186:	40 17       	cp	r20, r16
    2188:	51 07       	cpc	r21, r17
    218a:	62 07       	cpc	r22, r18
    218c:	73 07       	cpc	r23, r19
    218e:	79 f0       	breq	.+30     	; 0x21ae <_ZN8SdVolume15allocContiguousEmPm+0x15c>
    2190:	2d 81       	ldd	r18, Y+5	; 0x05

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    2192:	3e 81       	ldd	r19, Y+6	; 0x06
    2194:	4f 81       	ldd	r20, Y+7	; 0x07
    2196:	58 85       	ldd	r21, Y+8	; 0x08
    2198:	2f 5f       	subi	r18, 0xFF	; 255
    219a:	3f 4f       	sbci	r19, 0xFF	; 255
    219c:	4f 4f       	sbci	r20, 0xFF	; 255
    219e:	5f 4f       	sbci	r21, 0xFF	; 255
    21a0:	2d 83       	std	Y+5, r18	; 0x05
    21a2:	3e 83       	std	Y+6, r19	; 0x06
    21a4:	4f 83       	std	Y+7, r20	; 0x07
    21a6:	58 87       	std	Y+8, r21	; 0x08
    21a8:	6c 01       	movw	r12, r24
    21aa:	7d 01       	movw	r14, r26
    21ac:	a7 cf       	rjmp	.-178    	; 0x20fc <_ZN8SdVolume15allocContiguousEmPm+0xaa>
    21ae:	0f ef       	ldi	r16, 0xFF	; 255
  static uint8_t cacheZeroBlock(uint32_t blockNumber);
  uint8_t chainSize(uint32_t beginCluster, uint32_t* size) const;
  uint8_t fatGet(uint32_t cluster, uint32_t* value) const;
  uint8_t fatPut(uint32_t cluster, uint32_t value);
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    21b0:	1f ef       	ldi	r17, 0xFF	; 255
    21b2:	2f ef       	ldi	r18, 0xFF	; 255
    21b4:	3f e0       	ldi	r19, 0x0F	; 15
    21b6:	b7 01       	movw	r22, r14
    21b8:	a6 01       	movw	r20, r12
    21ba:	c5 01       	movw	r24, r10
    21bc:	aa de       	rcall	.-684    	; 0x1f12 <_ZN8SdVolume6fatPutEmm>
    21be:	81 11       	cpse	r24, r1
    21c0:	17 c0       	rjmp	.+46     	; 0x21f0 <_ZN8SdVolume15allocContiguousEmPm+0x19e>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
    21c2:	80 e0       	ldi	r24, 0x00	; 0
    21c4:	3f c0       	rjmp	.+126    	; 0x2244 <_ZN8SdVolume15allocContiguousEmPm+0x1f2>
    21c6:	d7 01       	movw	r26, r14
    21c8:	c6 01       	movw	r24, r12

  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) return false;
    21ca:	01 97       	sbiw	r24, 0x01	; 1
    21cc:	a1 09       	sbc	r26, r1
    21ce:	b1 09       	sbc	r27, r1
    21d0:	8d 83       	std	Y+5, r24	; 0x05
    21d2:	9e 83       	std	Y+6, r25	; 0x06
    21d4:	af 83       	std	Y+7, r26	; 0x07
    21d6:	b8 87       	std	Y+8, r27	; 0x08
    21d8:	97 01       	movw	r18, r14
    21da:	86 01       	movw	r16, r12
    21dc:	ac 01       	movw	r20, r24
    21de:	bd 01       	movw	r22, r26
    21e0:	c5 01       	movw	r24, r10
    21e2:	97 de       	rcall	.-722    	; 0x1f12 <_ZN8SdVolume6fatPutEmm>
    21e4:	88 23       	and	r24, r24
    21e6:	69 f3       	breq	.-38     	; 0x21c2 <_ZN8SdVolume15allocContiguousEmPm+0x170>
    21e8:	cd 80       	ldd	r12, Y+5	; 0x05
    21ea:	de 80       	ldd	r13, Y+6	; 0x06
    21ec:	ef 80       	ldd	r14, Y+7	; 0x07
    endCluster--;
    21ee:	f8 84       	ldd	r15, Y+8	; 0x08
    21f0:	4c 14       	cp	r4, r12
    21f2:	5d 04       	cpc	r5, r13
    21f4:	6e 04       	cpc	r6, r14
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    21f6:	7f 04       	cpc	r7, r15
    21f8:	30 f3       	brcs	.-52     	; 0x21c6 <_ZN8SdVolume15allocContiguousEmPm+0x174>
    21fa:	d1 01       	movw	r26, r2
    21fc:	4d 91       	ld	r20, X+
    21fe:	5d 91       	ld	r21, X+
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    2200:	6d 91       	ld	r22, X+
    2202:	7c 91       	ld	r23, X
    2204:	41 15       	cp	r20, r1
    2206:	51 05       	cpc	r21, r1
    2208:	61 05       	cpc	r22, r1
    220a:	71 05       	cpc	r23, r1
    220c:	99 f4       	brne	.+38     	; 0x2234 <_ZN8SdVolume15allocContiguousEmPm+0x1e2>
    220e:	f1 01       	movw	r30, r2
    2210:	40 82       	st	Z, r4
    2212:	51 82       	std	Z+1, r5	; 0x01
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;
    2214:	62 82       	std	Z+2, r6	; 0x02
    2216:	73 82       	std	Z+3, r7	; 0x03
    2218:	99 20       	and	r9, r9
    221a:	99 f0       	breq	.+38     	; 0x2242 <_ZN8SdVolume15allocContiguousEmPm+0x1f0>
    221c:	ff ef       	ldi	r31, 0xFF	; 255

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;
    221e:	4f 1a       	sub	r4, r31
    2220:	5f 0a       	sbc	r5, r31
    2222:	6f 0a       	sbc	r6, r31
    2224:	7f 0a       	sbc	r7, r31
    2226:	d5 01       	movw	r26, r10
    2228:	4d 92       	st	X+, r4
    222a:	5d 92       	st	X+, r5
    222c:	6d 92       	st	X+, r6
    222e:	7c 92       	st	X, r7
    2230:	13 97       	sbiw	r26, 0x03	; 3
    2232:	07 c0       	rjmp	.+14     	; 0x2242 <_ZN8SdVolume15allocContiguousEmPm+0x1f0>
    2234:	93 01       	movw	r18, r6
    2236:	82 01       	movw	r16, r4
    2238:	c5 01       	movw	r24, r10
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
    223a:	6b de       	rcall	.-810    	; 0x1f12 <_ZN8SdVolume6fatPutEmm>
    223c:	81 11       	cpse	r24, r1
    223e:	e7 cf       	rjmp	.-50     	; 0x220e <_ZN8SdVolume15allocContiguousEmPm+0x1bc>
    2240:	c0 cf       	rjmp	.-128    	; 0x21c2 <_ZN8SdVolume15allocContiguousEmPm+0x170>
    2242:	81 e0       	ldi	r24, 0x01	; 1
    2244:	60 96       	adiw	r28, 0x10	; 16
    2246:	0f b6       	in	r0, 0x3f	; 63
    2248:	f8 94       	cli
  *curCluster = bgnCluster;

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;

  return true;
    224a:	de bf       	out	0x3e, r29	; 62
}
    224c:	0f be       	out	0x3f, r0	; 63
    224e:	cd bf       	out	0x3d, r28	; 61
    2250:	df 91       	pop	r29
    2252:	cf 91       	pop	r28
    2254:	1f 91       	pop	r17
    2256:	0f 91       	pop	r16
    2258:	ff 90       	pop	r15
    225a:	ef 90       	pop	r14
    225c:	df 90       	pop	r13
    225e:	cf 90       	pop	r12
    2260:	bf 90       	pop	r11
    2262:	af 90       	pop	r10
    2264:	9f 90       	pop	r9
    2266:	7f 90       	pop	r7
    2268:	6f 90       	pop	r6
    226a:	5f 90       	pop	r5
    226c:	4f 90       	pop	r4
    226e:	3f 90       	pop	r3
    2270:	2f 90       	pop	r2
    2272:	08 95       	ret

00002274 <_GLOBAL__sub_I__Z20getNextPathComponentPcPjS_>:
 * \brief Raw access to SD and SDHC flash memory cards.
 */
class Sd2Card {
 public:
  /** Construct an instance of Sd2Card. */
  Sd2Card(void) : errorCode_(0), inBlock_(0), partialBlockRead_(0), type_(0) {}
    2274:	10 92 ea 06 	sts	0x06EA, r1
    2278:	10 92 eb 06 	sts	0x06EB, r1
    227c:	10 92 ee 06 	sts	0x06EE, r1
    2280:	10 92 f0 06 	sts	0x06F0, r1
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
    2284:	82 e0       	ldi	r24, 0x02	; 2
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	a0 e0       	ldi	r26, 0x00	; 0
    228a:	b0 e0       	ldi	r27, 0x00	; 0
    228c:	80 93 f1 06 	sts	0x06F1, r24
    2290:	90 93 f2 06 	sts	0x06F2, r25
    2294:	a0 93 f3 06 	sts	0x06F3, r26
    2298:	b0 93 f4 06 	sts	0x06F4, r27
    229c:	10 92 08 07 	sts	0x0708, r1
  public:
    Print() : write_error(0) {}
    22a0:	10 92 12 07 	sts	0x0712, r1
    22a4:	10 92 11 07 	sts	0x0711, r1
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    22a8:	87 e5       	ldi	r24, 0x57	; 87
    22aa:	91 e0       	ldi	r25, 0x01	; 1
    22ac:	90 93 10 07 	sts	0x0710, r25
    22b0:	80 93 0f 07 	sts	0x070F, r24
    22b4:	10 92 14 07 	sts	0x0714, r1
    22b8:	08 95       	ret

000022ba <_ZN17LiquidCrystal_I2CC1Ehhh>:
//
// Note, however, that resetting the Arduino doesn't reset the LCD, so we
// can't assume that its in that state when a sketch starts (and the
// LiquidCrystal constructor is called).

LiquidCrystal_I2C::LiquidCrystal_I2C(uint8_t lcd_Addr,uint8_t lcd_cols,uint8_t lcd_rows)
    22ba:	fc 01       	movw	r30, r24
    22bc:	13 82       	std	Z+3, r1	; 0x03
    22be:	12 82       	std	Z+2, r1	; 0x02
    22c0:	8f e5       	ldi	r24, 0x5F	; 95
    22c2:	91 e0       	ldi	r25, 0x01	; 1
    22c4:	91 83       	std	Z+1, r25	; 0x01
    22c6:	80 83       	st	Z, r24
{
  _Addr = lcd_Addr;
    22c8:	64 83       	std	Z+4, r22	; 0x04
  _cols = lcd_cols;
    22ca:	41 87       	std	Z+9, r20	; 0x09
  _rows = lcd_rows;
    22cc:	22 87       	std	Z+10, r18	; 0x0a
  _backlightval = LCD_NOBACKLIGHT;
    22ce:	13 86       	std	Z+11, r1	; 0x0b
    22d0:	08 95       	ret

000022d2 <_ZN17LiquidCrystal_I2C13expanderWriteEh>:
void LiquidCrystal_I2C::write4bits(uint8_t value) {
	expanderWrite(value);
	pulseEnable(value);
}

void LiquidCrystal_I2C::expanderWrite(uint8_t _data){                                        
    22d2:	1f 93       	push	r17
    22d4:	cf 93       	push	r28
    22d6:	df 93       	push	r29
    22d8:	ec 01       	movw	r28, r24
    22da:	16 2f       	mov	r17, r22
	Wire.beginTransmission(_Addr);
    22dc:	6c 81       	ldd	r22, Y+4	; 0x04
    22de:	81 e8       	ldi	r24, 0x81	; 129
    22e0:	94 e0       	ldi	r25, 0x04	; 4
    22e2:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_ZN7TwoWire17beginTransmissionEh>
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    22e6:	e0 91 81 04 	lds	r30, 0x0481
    22ea:	f0 91 82 04 	lds	r31, 0x0482
	Wire.write((int)(_data) | _backlightval);
    22ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    22f0:	61 2b       	or	r22, r17
    22f2:	01 90       	ld	r0, Z+
    22f4:	f0 81       	ld	r31, Z
    22f6:	e0 2d       	mov	r30, r0
    22f8:	81 e8       	ldi	r24, 0x81	; 129
    22fa:	94 e0       	ldi	r25, 0x04	; 4
    22fc:	09 95       	icall
	Wire.endTransmission();   
    22fe:	81 e8       	ldi	r24, 0x81	; 129
    2300:	94 e0       	ldi	r25, 0x04	; 4
}
    2302:	df 91       	pop	r29
    2304:	cf 91       	pop	r28
    2306:	1f 91       	pop	r17
}

void LiquidCrystal_I2C::expanderWrite(uint8_t _data){                                        
	Wire.beginTransmission(_Addr);
	Wire.write((int)(_data) | _backlightval);
	Wire.endTransmission();   
    2308:	08 c8       	rjmp	.-4080   	; 0x131a <_ZN7TwoWire15endTransmissionEv>

0000230a <_ZN17LiquidCrystal_I2C11noBacklightEv>:
	}
}

// Turn the (optional) backlight off/on
void LiquidCrystal_I2C::noBacklight(void) {
	_backlightval=LCD_NOBACKLIGHT;
    230a:	fc 01       	movw	r30, r24
    230c:	13 86       	std	Z+11, r1	; 0x0b
	expanderWrite(0);
    230e:	60 e0       	ldi	r22, 0x00	; 0
    2310:	e0 cf       	rjmp	.-64     	; 0x22d2 <_ZN17LiquidCrystal_I2C13expanderWriteEh>

00002312 <_ZN17LiquidCrystal_I2C9backlightEv>:
}

void LiquidCrystal_I2C::backlight(void) {
	_backlightval=LCD_BACKLIGHT;
    2312:	28 e0       	ldi	r18, 0x08	; 8
    2314:	fc 01       	movw	r30, r24
    2316:	23 87       	std	Z+11, r18	; 0x0b
	expanderWrite(0);
    2318:	60 e0       	ldi	r22, 0x00	; 0
    231a:	db cf       	rjmp	.-74     	; 0x22d2 <_ZN17LiquidCrystal_I2C13expanderWriteEh>

0000231c <_ZN17LiquidCrystal_I2C11pulseEnableEh>:
	Wire.beginTransmission(_Addr);
	Wire.write((int)(_data) | _backlightval);
	Wire.endTransmission();   
}

void LiquidCrystal_I2C::pulseEnable(uint8_t _data){
    231c:	1f 93       	push	r17
    231e:	cf 93       	push	r28
    2320:	df 93       	push	r29
    2322:	ec 01       	movw	r28, r24
    2324:	16 2f       	mov	r17, r22
	expanderWrite(_data | En);	// En high
    2326:	64 60       	ori	r22, 0x04	; 4
    2328:	d4 df       	rcall	.-88     	; 0x22d2 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    232a:	81 e0       	ldi	r24, 0x01	; 1
	delayMicroseconds(1);		// enable pulse must be >450ns
    232c:	90 e0       	ldi	r25, 0x00	; 0
    232e:	0e 94 b9 05 	call	0xb72	; 0xb72 <delayMicroseconds>
    2332:	61 2f       	mov	r22, r17
	
	expanderWrite(_data & ~En);	// En low
    2334:	6b 7f       	andi	r22, 0xFB	; 251
    2336:	ce 01       	movw	r24, r28
    2338:	cc df       	rcall	.-104    	; 0x22d2 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    233a:	82 e3       	ldi	r24, 0x32	; 50
    233c:	90 e0       	ldi	r25, 0x00	; 0
	delayMicroseconds(50);		// commands need > 37us to settle
    233e:	df 91       	pop	r29
    2340:	cf 91       	pop	r28
} 
    2342:	1f 91       	pop	r17
    2344:	0c 94 b9 05 	jmp	0xb72	; 0xb72 <delayMicroseconds>

00002348 <_ZN17LiquidCrystal_I2C10write4bitsEh>:
	uint8_t lownib = value << 4;
	write4bits((highnib)|mode);
	write4bits((lownib)|mode);
}

void LiquidCrystal_I2C::write4bits(uint8_t value) {
    2348:	1f 93       	push	r17
    234a:	cf 93       	push	r28
    234c:	df 93       	push	r29
    234e:	ec 01       	movw	r28, r24
    2350:	16 2f       	mov	r17, r22
	expanderWrite(value);
    2352:	bf df       	rcall	.-130    	; 0x22d2 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    2354:	61 2f       	mov	r22, r17
	pulseEnable(value);
    2356:	ce 01       	movw	r24, r28
    2358:	df 91       	pop	r29
}
    235a:	cf 91       	pop	r28
    235c:	1f 91       	pop	r17
    235e:	de cf       	rjmp	.-68     	; 0x231c <_ZN17LiquidCrystal_I2C11pulseEnableEh>

00002360 <_ZN17LiquidCrystal_I2C4sendEhh>:


/************ low level data pushing commands **********/

// write either command or data
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) {
    2360:	ef 92       	push	r14
    2362:	ff 92       	push	r15
    2364:	1f 93       	push	r17
    2366:	cf 93       	push	r28
    2368:	df 93       	push	r29
    236a:	1f 92       	push	r1
    236c:	cd b7       	in	r28, 0x3d	; 61
    236e:	de b7       	in	r29, 0x3e	; 62
    2370:	7c 01       	movw	r14, r24
    2372:	16 2f       	mov	r17, r22
	uint8_t highnib = value & 0xF0;
    2374:	60 7f       	andi	r22, 0xF0	; 240
	uint8_t lownib = value << 4;
	write4bits((highnib)|mode);
    2376:	64 2b       	or	r22, r20
    2378:	49 83       	std	Y+1, r20	; 0x01
    237a:	e6 df       	rcall	.-52     	; 0x2348 <_ZN17LiquidCrystal_I2C10write4bitsEh>
    237c:	61 2f       	mov	r22, r17
/************ low level data pushing commands **********/

// write either command or data
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) {
	uint8_t highnib = value & 0xF0;
	uint8_t lownib = value << 4;
    237e:	62 95       	swap	r22
    2380:	60 7f       	andi	r22, 0xF0	; 240
    2382:	49 81       	ldd	r20, Y+1	; 0x01
	write4bits((highnib)|mode);
	write4bits((lownib)|mode);
    2384:	64 2b       	or	r22, r20
    2386:	c7 01       	movw	r24, r14
    2388:	0f 90       	pop	r0
}
    238a:	df 91       	pop	r29
    238c:	cf 91       	pop	r28
    238e:	1f 91       	pop	r17
    2390:	ff 90       	pop	r15
    2392:	ef 90       	pop	r14
    2394:	d9 cf       	rjmp	.-78     	; 0x2348 <_ZN17LiquidCrystal_I2C10write4bitsEh>

00002396 <_ZN17LiquidCrystal_I2C7commandEh>:


/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal_I2C::command(uint8_t value) {
	send(value, 0);
    2396:	40 e0       	ldi	r20, 0x00	; 0
    2398:	e3 cf       	rjmp	.-58     	; 0x2360 <_ZN17LiquidCrystal_I2C4sendEhh>

0000239a <_ZN17LiquidCrystal_I2C5clearEv>:



/********** high level commands, for the user! */
void LiquidCrystal_I2C::clear(){
	command(LCD_CLEARDISPLAY);// clear display, set cursor position to zero
    239a:	61 e0       	ldi	r22, 0x01	; 1
    239c:	fc df       	rcall	.-8      	; 0x2396 <_ZN17LiquidCrystal_I2C7commandEh>
    239e:	80 ed       	ldi	r24, 0xD0	; 208
	delayMicroseconds(2000);  // this command takes a long time!
    23a0:	97 e0       	ldi	r25, 0x07	; 7
    23a2:	0c 94 b9 05 	jmp	0xb72	; 0xb72 <delayMicroseconds>

000023a6 <_ZN17LiquidCrystal_I2C4homeEv>:
}

void LiquidCrystal_I2C::home(){
	command(LCD_RETURNHOME);  // set cursor position to zero
    23a6:	62 e0       	ldi	r22, 0x02	; 2
    23a8:	f6 df       	rcall	.-20     	; 0x2396 <_ZN17LiquidCrystal_I2C7commandEh>
    23aa:	80 ed       	ldi	r24, 0xD0	; 208
	delayMicroseconds(2000);  // this command takes a long time!
    23ac:	97 e0       	ldi	r25, 0x07	; 7
    23ae:	0c 94 b9 05 	jmp	0xb72	; 0xb72 <delayMicroseconds>

000023b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>:
}

void LiquidCrystal_I2C::setCursor(uint8_t col, uint8_t row){
    23b2:	cf 93       	push	r28
    23b4:	df 93       	push	r29
    23b6:	cd b7       	in	r28, 0x3d	; 61
    23b8:	de b7       	in	r29, 0x3e	; 62
    23ba:	28 97       	sbiw	r28, 0x08	; 8
    23bc:	0f b6       	in	r0, 0x3f	; 63
    23be:	f8 94       	cli
    23c0:	de bf       	out	0x3e, r29	; 62
    23c2:	0f be       	out	0x3f, r0	; 63
    23c4:	cd bf       	out	0x3d, r28	; 61
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
    23c6:	28 e0       	ldi	r18, 0x08	; 8
    23c8:	e4 e1       	ldi	r30, 0x14	; 20
    23ca:	f1 e0       	ldi	r31, 0x01	; 1
    23cc:	de 01       	movw	r26, r28
    23ce:	11 96       	adiw	r26, 0x01	; 1
    23d0:	01 90       	ld	r0, Z+
    23d2:	0d 92       	st	X+, r0
    23d4:	2a 95       	dec	r18
    23d6:	e1 f7       	brne	.-8      	; 0x23d0 <_ZN17LiquidCrystal_I2C9setCursorEhh+0x1e>
	if ( row > _numlines ) {
    23d8:	fc 01       	movw	r30, r24
    23da:	20 85       	ldd	r18, Z+8	; 0x08
    23dc:	24 17       	cp	r18, r20
    23de:	10 f4       	brcc	.+4      	; 0x23e4 <_ZN17LiquidCrystal_I2C9setCursorEhh+0x32>
		row = _numlines-1;    // we count rows starting w/0
    23e0:	4f ef       	ldi	r20, 0xFF	; 255
    23e2:	42 0f       	add	r20, r18
	}
	command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
    23e4:	fe 01       	movw	r30, r28
    23e6:	31 96       	adiw	r30, 0x01	; 1
    23e8:	e4 0f       	add	r30, r20
    23ea:	f1 1d       	adc	r31, r1
    23ec:	e4 0f       	add	r30, r20
    23ee:	f1 1d       	adc	r31, r1
    23f0:	20 81       	ld	r18, Z
    23f2:	26 0f       	add	r18, r22
    23f4:	20 68       	ori	r18, 0x80	; 128
    23f6:	62 2f       	mov	r22, r18
}
    23f8:	28 96       	adiw	r28, 0x08	; 8
    23fa:	0f b6       	in	r0, 0x3f	; 63
    23fc:	f8 94       	cli
    23fe:	de bf       	out	0x3e, r29	; 62
    2400:	0f be       	out	0x3f, r0	; 63
    2402:	cd bf       	out	0x3d, r28	; 61
    2404:	df 91       	pop	r29
    2406:	cf 91       	pop	r28
void LiquidCrystal_I2C::setCursor(uint8_t col, uint8_t row){
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
	if ( row > _numlines ) {
		row = _numlines-1;    // we count rows starting w/0
	}
	command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
    2408:	c6 cf       	rjmp	.-116    	; 0x2396 <_ZN17LiquidCrystal_I2C7commandEh>

0000240a <_ZN17LiquidCrystal_I2C7displayEv>:
void LiquidCrystal_I2C::noDisplay() {
	_displaycontrol &= ~LCD_DISPLAYON;
	command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void LiquidCrystal_I2C::display() {
	_displaycontrol |= LCD_DISPLAYON;
    240a:	fc 01       	movw	r30, r24
    240c:	66 81       	ldd	r22, Z+6	; 0x06
    240e:	26 2f       	mov	r18, r22
    2410:	24 60       	ori	r18, 0x04	; 4
    2412:	26 83       	std	Z+6, r18	; 0x06
	command(LCD_DISPLAYCONTROL | _displaycontrol);
    2414:	6c 60       	ori	r22, 0x0C	; 12
    2416:	bf cf       	rjmp	.-130    	; 0x2396 <_ZN17LiquidCrystal_I2C7commandEh>

00002418 <_ZN17LiquidCrystal_I2C10createCharEhPh>:
	command(LCD_ENTRYMODESET | _displaymode);
}

// Allows us to fill the first 8 CGRAM locations
// with custom characters
void LiquidCrystal_I2C::createChar(uint8_t location, uint8_t charmap[]) {
    2418:	cf 92       	push	r12
    241a:	df 92       	push	r13
    241c:	ef 92       	push	r14
    241e:	ff 92       	push	r15
    2420:	0f 93       	push	r16
    2422:	1f 93       	push	r17
    2424:	cf 93       	push	r28
    2426:	df 93       	push	r29
    2428:	00 d0       	rcall	.+0      	; 0x242a <_ZN17LiquidCrystal_I2C10createCharEhPh+0x12>
    242a:	cd b7       	in	r28, 0x3d	; 61
    242c:	de b7       	in	r29, 0x3e	; 62
    242e:	8c 01       	movw	r16, r24
	location &= 0x7; // we only have 8 locations 0-7
    2430:	67 70       	andi	r22, 0x07	; 7
	command(LCD_SETCGRAMADDR | (location << 3));
    2432:	88 e0       	ldi	r24, 0x08	; 8
    2434:	68 9f       	mul	r22, r24
    2436:	b0 01       	movw	r22, r0
    2438:	11 24       	eor	r1, r1
    243a:	60 64       	ori	r22, 0x40	; 64
    243c:	c8 01       	movw	r24, r16
    243e:	49 83       	std	Y+1, r20	; 0x01
    2440:	5a 83       	std	Y+2, r21	; 0x02
    2442:	a9 df       	rcall	.-174    	; 0x2396 <_ZN17LiquidCrystal_I2C7commandEh>
    2444:	49 81       	ldd	r20, Y+1	; 0x01
    2446:	c4 2e       	mov	r12, r20
    2448:	5a 81       	ldd	r21, Y+2	; 0x02
    244a:	d5 2e       	mov	r13, r21
    244c:	e1 2c       	mov	r14, r1
	for (int i=0; i<8; i++) {
    244e:	f1 2c       	mov	r15, r1
    2450:	d6 01       	movw	r26, r12
		write(charmap[i]);
    2452:	6d 91       	ld	r22, X+
    2454:	6d 01       	movw	r12, r26
    2456:	d8 01       	movw	r26, r16
    2458:	ed 91       	ld	r30, X+
    245a:	fc 91       	ld	r31, X
    245c:	01 90       	ld	r0, Z+
    245e:	f0 81       	ld	r31, Z
    2460:	e0 2d       	mov	r30, r0
    2462:	c8 01       	movw	r24, r16
    2464:	09 95       	icall
    2466:	bf ef       	ldi	r27, 0xFF	; 255
// Allows us to fill the first 8 CGRAM locations
// with custom characters
void LiquidCrystal_I2C::createChar(uint8_t location, uint8_t charmap[]) {
	location &= 0x7; // we only have 8 locations 0-7
	command(LCD_SETCGRAMADDR | (location << 3));
	for (int i=0; i<8; i++) {
    2468:	eb 1a       	sub	r14, r27
    246a:	fb 0a       	sbc	r15, r27
    246c:	e8 e0       	ldi	r30, 0x08	; 8
    246e:	ee 16       	cp	r14, r30
    2470:	f1 04       	cpc	r15, r1
    2472:	71 f7       	brne	.-36     	; 0x2450 <_ZN17LiquidCrystal_I2C10createCharEhPh+0x38>
    2474:	0f 90       	pop	r0
		write(charmap[i]);
	}
}
    2476:	0f 90       	pop	r0
    2478:	df 91       	pop	r29
    247a:	cf 91       	pop	r28
    247c:	1f 91       	pop	r17
    247e:	0f 91       	pop	r16
    2480:	ff 90       	pop	r15
    2482:	ef 90       	pop	r14
    2484:	df 90       	pop	r13
    2486:	cf 90       	pop	r12
    2488:	08 95       	ret

0000248a <_ZN17LiquidCrystal_I2C5writeEh>:
inline void LiquidCrystal_I2C::command(uint8_t value) {
	send(value, 0);
}

inline size_t LiquidCrystal_I2C::write(uint8_t value) {
	send(value, Rs);
    248a:	41 e0       	ldi	r20, 0x01	; 1
    248c:	69 df       	rcall	.-302    	; 0x2360 <_ZN17LiquidCrystal_I2C4sendEhh>
    248e:	80 e0       	ldi	r24, 0x00	; 0
	return 0;
}
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	08 95       	ret

00002494 <_ZN17LiquidCrystal_I2C5beginEhhh>:
	Wire.begin();
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
	begin(_cols, _rows);  
}

void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
    2494:	cf 93       	push	r28
    2496:	df 93       	push	r29
    2498:	ec 01       	movw	r28, r24
	if (lines > 1) {
    249a:	42 30       	cpi	r20, 0x02	; 2
    249c:	18 f0       	brcs	.+6      	; 0x24a4 <_ZN17LiquidCrystal_I2C5beginEhhh+0x10>
		_displayfunction |= LCD_2LINE;
    249e:	8d 81       	ldd	r24, Y+5	; 0x05
    24a0:	88 60       	ori	r24, 0x08	; 8
    24a2:	8d 83       	std	Y+5, r24	; 0x05
	}
	_numlines = lines;
    24a4:	48 87       	std	Y+8, r20	; 0x08

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotsize != 0) && (lines == 1)) {
    24a6:	22 23       	and	r18, r18
    24a8:	29 f0       	breq	.+10     	; 0x24b4 <_ZN17LiquidCrystal_I2C5beginEhhh+0x20>
    24aa:	41 30       	cpi	r20, 0x01	; 1
    24ac:	19 f4       	brne	.+6      	; 0x24b4 <_ZN17LiquidCrystal_I2C5beginEhhh+0x20>
		_displayfunction |= LCD_5x10DOTS;
    24ae:	8d 81       	ldd	r24, Y+5	; 0x05
    24b0:	84 60       	ori	r24, 0x04	; 4
    24b2:	8d 83       	std	Y+5, r24	; 0x05
	}

	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	delayMicroseconds(50000); 
    24b4:	80 e5       	ldi	r24, 0x50	; 80
    24b6:	93 ec       	ldi	r25, 0xC3	; 195
    24b8:	0e 94 b9 05 	call	0xb72	; 0xb72 <delayMicroseconds>
  
	// Now we pull both RS and R/W low to begin commands
	expanderWrite(_backlightval);	// reset expanderand turn backlight off (Bit 8 =1)
    24bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    24be:	ce 01       	movw	r24, r28
    24c0:	08 df       	rcall	.-496    	; 0x22d2 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    24c2:	68 ee       	ldi	r22, 0xE8	; 232
	delay(1000);
    24c4:	73 e0       	ldi	r23, 0x03	; 3
    24c6:	80 e0       	ldi	r24, 0x00	; 0
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	0e 94 94 05 	call	0xb28	; 0xb28 <delay>
    24ce:	60 e3       	ldi	r22, 0x30	; 48
  	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46
	
	// we start in 8bit mode, try to set 4 bit mode
	write4bits(0x30);
    24d0:	ce 01       	movw	r24, r28
    24d2:	3a df       	rcall	.-396    	; 0x2348 <_ZN17LiquidCrystal_I2C10write4bitsEh>
    24d4:	84 e9       	ldi	r24, 0x94	; 148
    24d6:	91 e1       	ldi	r25, 0x11	; 17
	delayMicroseconds(4500); // wait min 4.1ms
    24d8:	0e 94 b9 05 	call	0xb72	; 0xb72 <delayMicroseconds>
    24dc:	60 e3       	ldi	r22, 0x30	; 48
    24de:	ce 01       	movw	r24, r28
	
	// second try
	write4bits(0x30);
    24e0:	33 df       	rcall	.-410    	; 0x2348 <_ZN17LiquidCrystal_I2C10write4bitsEh>
    24e2:	84 e9       	ldi	r24, 0x94	; 148
    24e4:	91 e1       	ldi	r25, 0x11	; 17
    24e6:	0e 94 b9 05 	call	0xb72	; 0xb72 <delayMicroseconds>
	delayMicroseconds(4500); // wait min 4.1ms
    24ea:	60 e3       	ldi	r22, 0x30	; 48
    24ec:	ce 01       	movw	r24, r28
    24ee:	2c df       	rcall	.-424    	; 0x2348 <_ZN17LiquidCrystal_I2C10write4bitsEh>
	
	// third go!
	write4bits(0x30); 
    24f0:	86 e9       	ldi	r24, 0x96	; 150
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	0e 94 b9 05 	call	0xb72	; 0xb72 <delayMicroseconds>
	delayMicroseconds(150);
    24f8:	60 e2       	ldi	r22, 0x20	; 32
    24fa:	ce 01       	movw	r24, r28
    24fc:	25 df       	rcall	.-438    	; 0x2348 <_ZN17LiquidCrystal_I2C10write4bitsEh>
    24fe:	6d 81       	ldd	r22, Y+5	; 0x05
	
	// finally, set to 4-bit interface
	write4bits(0x20); 
    2500:	60 62       	ori	r22, 0x20	; 32
    2502:	ce 01       	movw	r24, r28
    2504:	48 df       	rcall	.-368    	; 0x2396 <_ZN17LiquidCrystal_I2C7commandEh>
    2506:	84 e0       	ldi	r24, 0x04	; 4


	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);  
    2508:	8e 83       	std	Y+6, r24	; 0x06
    250a:	ce 01       	movw	r24, r28
    250c:	7e df       	rcall	.-260    	; 0x240a <_ZN17LiquidCrystal_I2C7displayEv>
    250e:	ce 01       	movw	r24, r28
    2510:	44 df       	rcall	.-376    	; 0x239a <_ZN17LiquidCrystal_I2C5clearEv>
	
	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
    2512:	82 e0       	ldi	r24, 0x02	; 2
    2514:	8f 83       	std	Y+7, r24	; 0x07
	display();
    2516:	66 e0       	ldi	r22, 0x06	; 6
    2518:	ce 01       	movw	r24, r28
    251a:	3d df       	rcall	.-390    	; 0x2396 <_ZN17LiquidCrystal_I2C7commandEh>
	
	// clear it off
	clear();
    251c:	ce 01       	movw	r24, r28
    251e:	df 91       	pop	r29
    2520:	cf 91       	pop	r28
	
	// Initialize to default text direction (for roman languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
    2522:	41 cf       	rjmp	.-382    	; 0x23a6 <_ZN17LiquidCrystal_I2C4homeEv>

00002524 <_ZN17LiquidCrystal_I2C9init_privEv>:
void LiquidCrystal_I2C::init(){
	init_priv();
}

void LiquidCrystal_I2C::init_priv()
{
    2524:	cf 93       	push	r28
    2526:	df 93       	push	r29
    2528:	ec 01       	movw	r28, r24
	Wire.begin();
    252a:	81 e8       	ldi	r24, 0x81	; 129
    252c:	94 e0       	ldi	r25, 0x04	; 4
    252e:	0e 94 59 09 	call	0x12b2	; 0x12b2 <_ZN7TwoWire5beginEv>
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
    2532:	1d 82       	std	Y+5, r1	; 0x05
	begin(_cols, _rows);  
    2534:	20 e0       	ldi	r18, 0x00	; 0
    2536:	4a 85       	ldd	r20, Y+10	; 0x0a
    2538:	69 85       	ldd	r22, Y+9	; 0x09
    253a:	ce 01       	movw	r24, r28
}
    253c:	df 91       	pop	r29
    253e:	cf 91       	pop	r28

void LiquidCrystal_I2C::init_priv()
{
	Wire.begin();
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
	begin(_cols, _rows);  
    2540:	a9 cf       	rjmp	.-174    	; 0x2494 <_ZN17LiquidCrystal_I2C5beginEhhh>

00002542 <_ZN17LiquidCrystal_I2C4initEv>:
  _rows = lcd_rows;
  _backlightval = LCD_NOBACKLIGHT;
}

void LiquidCrystal_I2C::init(){
	init_priv();
    2542:	f0 cf       	rjmp	.-32     	; 0x2524 <_ZN17LiquidCrystal_I2C9init_privEv>

00002544 <_ZN7TwoWire5writeEi>:
    2544:	dc 01       	movw	r26, r24
    2546:	ed 91       	ld	r30, X+
    2548:	fc 91       	ld	r31, X
    254a:	01 90       	ld	r0, Z+
    254c:	f0 81       	ld	r31, Z
    254e:	e0 2d       	mov	r30, r0
    2550:	09 94       	ijmp

00002552 <_ZN9DS1337RTC11resetAlarmsEv>:
    2552:	68 e6       	ldi	r22, 0x68	; 104
    2554:	70 e0       	ldi	r23, 0x00	; 0
    2556:	81 e8       	ldi	r24, 0x81	; 129
    2558:	94 e0       	ldi	r25, 0x04	; 4
    255a:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <_ZN7TwoWire17beginTransmissionEi>
    255e:	6f e0       	ldi	r22, 0x0F	; 15
    2560:	70 e0       	ldi	r23, 0x00	; 0
    2562:	81 e8       	ldi	r24, 0x81	; 129
    2564:	94 e0       	ldi	r25, 0x04	; 4
    2566:	ee df       	rcall	.-36     	; 0x2544 <_ZN7TwoWire5writeEi>
    2568:	60 e0       	ldi	r22, 0x00	; 0
    256a:	70 e0       	ldi	r23, 0x00	; 0
    256c:	81 e8       	ldi	r24, 0x81	; 129
    256e:	94 e0       	ldi	r25, 0x04	; 4
    2570:	e9 df       	rcall	.-46     	; 0x2544 <_ZN7TwoWire5writeEi>
    2572:	81 e8       	ldi	r24, 0x81	; 129
    2574:	94 e0       	ldi	r25, 0x04	; 4
    2576:	0c 94 8d 09 	jmp	0x131a	; 0x131a <_ZN7TwoWire15endTransmissionEv>

0000257a <_ZN9DS1337RTC7dec2bcdEh>:
    257a:	6a e0       	ldi	r22, 0x0A	; 10
    257c:	0e 94 b8 1c 	call	0x3970	; 0x3970 <__udivmodqi4>
    2580:	20 e1       	ldi	r18, 0x10	; 16
    2582:	82 9f       	mul	r24, r18
    2584:	90 0d       	add	r25, r0
    2586:	11 24       	eor	r1, r1
    2588:	89 2f       	mov	r24, r25
    258a:	08 95       	ret

0000258c <_ZN9DS1337RTC7bcd2decEh>:
    258c:	98 2f       	mov	r25, r24
    258e:	92 95       	swap	r25
    2590:	9f 70       	andi	r25, 0x0F	; 15
    2592:	8f 70       	andi	r24, 0x0F	; 15
    2594:	2a e0       	ldi	r18, 0x0A	; 10
    2596:	92 9f       	mul	r25, r18
    2598:	80 0d       	add	r24, r0
    259a:	11 24       	eor	r1, r1
    259c:	08 95       	ret

0000259e <_GLOBAL__sub_I_controlRegister>:

class TwoWire : public Stream
{
  private:
    static uint8_t rxBuffer[];
    static uint8_t rxBufferIndex;
    259e:	81 e8       	ldi	r24, 0x81	; 129
    25a0:	94 e0       	ldi	r25, 0x04	; 4
    25a2:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <_ZN7TwoWire5beginEv>

000025a6 <_ZN9DS1337RTC4readER12tmElements_ti>:
    uint8_t endTransmission(void);
    uint8_t endTransmission(uint8_t);
    uint8_t requestFrom(uint8_t, uint8_t);
    uint8_t requestFrom(uint8_t, uint8_t, uint8_t);
    uint8_t requestFrom(int, int);
    uint8_t requestFrom(int, int, int);
    25a6:	ef 92       	push	r14
    25a8:	ff 92       	push	r15
    25aa:	0f 93       	push	r16
    25ac:	1f 93       	push	r17
    25ae:	cf 93       	push	r28
    25b0:	df 93       	push	r29
    25b2:	00 d0       	rcall	.+0      	; 0x25b4 <_ZN9DS1337RTC4readER12tmElements_ti+0xe>
    25b4:	cd b7       	in	r28, 0x3d	; 61
    25b6:	de b7       	in	r29, 0x3e	; 62
    25b8:	7c 01       	movw	r14, r24
    25ba:	8b 01       	movw	r16, r22
    virtual size_t write(uint8_t);
    virtual size_t write(const uint8_t *, size_t);
    virtual int available(void);
    25bc:	67 30       	cpi	r22, 0x07	; 7
    25be:	71 05       	cpc	r23, r1
    25c0:	49 f0       	breq	.+18     	; 0x25d4 <_ZN9DS1337RTC4readER12tmElements_ti+0x2e>
    25c2:	6b 30       	cpi	r22, 0x0B	; 11
    25c4:	71 05       	cpc	r23, r1
    25c6:	49 f0       	breq	.+18     	; 0x25da <_ZN9DS1337RTC4readER12tmElements_ti+0x34>
    25c8:	61 15       	cp	r22, r1
    25ca:	71 05       	cpc	r23, r1
    25cc:	41 f4       	brne	.+16     	; 0x25de <_ZN9DS1337RTC4readER12tmElements_ti+0x38>
    virtual int read(void);
    25ce:	47 e0       	ldi	r20, 0x07	; 7
    25d0:	50 e0       	ldi	r21, 0x00	; 0
    25d2:	05 c0       	rjmp	.+10     	; 0x25de <_ZN9DS1337RTC4readER12tmElements_ti+0x38>
    virtual int peek(void);
    25d4:	44 e0       	ldi	r20, 0x04	; 4
    25d6:	50 e0       	ldi	r21, 0x00	; 0
    25d8:	02 c0       	rjmp	.+4      	; 0x25de <_ZN9DS1337RTC4readER12tmElements_ti+0x38>
    virtual void flush(void);
    25da:	43 e0       	ldi	r20, 0x03	; 3
    25dc:	50 e0       	ldi	r21, 0x00	; 0
    void onReceive( void (*)(int) );
    void onRequest( void (*)(void) );

    25de:	68 e6       	ldi	r22, 0x68	; 104
    25e0:	70 e0       	ldi	r23, 0x00	; 0
    25e2:	81 e8       	ldi	r24, 0x81	; 129
    25e4:	94 e0       	ldi	r25, 0x04	; 4
    25e6:	49 83       	std	Y+1, r20	; 0x01
    25e8:	5a 83       	std	Y+2, r21	; 0x02
    25ea:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <_ZN7TwoWire17beginTransmissionEi>
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    25ee:	b8 01       	movw	r22, r16
    25f0:	81 e8       	ldi	r24, 0x81	; 129
    25f2:	94 e0       	ldi	r25, 0x04	; 4
    25f4:	a7 df       	rcall	.-178    	; 0x2544 <_ZN7TwoWire5writeEi>
    25f6:	81 e8       	ldi	r24, 0x81	; 129
    inline size_t write(long n) { return write((uint8_t)n); }
    25f8:	94 e0       	ldi	r25, 0x04	; 4
    25fa:	0e 94 8d 09 	call	0x131a	; 0x131a <_ZN7TwoWire15endTransmissionEv>
    25fe:	49 81       	ldd	r20, Y+1	; 0x01
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    2600:	5a 81       	ldd	r21, Y+2	; 0x02
    2602:	68 e6       	ldi	r22, 0x68	; 104
    2604:	70 e0       	ldi	r23, 0x00	; 0
    2606:	81 e8       	ldi	r24, 0x81	; 129
    2608:	94 e0       	ldi	r25, 0x04	; 4
    260a:	0e 94 6e 09 	call	0x12dc	; 0x12dc <_ZN7TwoWire11requestFromEii>
    260e:	0b 30       	cpi	r16, 0x0B	; 11
    using Print::write;
};
    2610:	11 05       	cpc	r17, r1
    2612:	39 f0       	breq	.+14     	; 0x2622 <_ZN9DS1337RTC4readER12tmElements_ti+0x7c>
    2614:	81 e8       	ldi	r24, 0x81	; 129

    2616:	94 e0       	ldi	r25, 0x04	; 4
    2618:	0e 94 cc 08 	call	0x1198	; 0x1198 <_ZN7TwoWire4readEv>
    261c:	b7 df       	rcall	.-146    	; 0x258c <_ZN9DS1337RTC7bcd2decEh>
    261e:	f7 01       	movw	r30, r14
    2620:	80 83       	st	Z, r24
    2622:	81 e8       	ldi	r24, 0x81	; 129
    2624:	94 e0       	ldi	r25, 0x04	; 4
extern TwoWire Wire;

    2626:	0e 94 cc 08 	call	0x1198	; 0x1198 <_ZN7TwoWire4readEv>
    262a:	b0 df       	rcall	.-160    	; 0x258c <_ZN9DS1337RTC7bcd2decEh>
    262c:	f7 01       	movw	r30, r14
    262e:	81 83       	std	Z+1, r24	; 0x01
    2630:	81 e8       	ldi	r24, 0x81	; 129
    2632:	94 e0       	ldi	r25, 0x04	; 4
    2634:	0e 94 cc 08 	call	0x1198	; 0x1198 <_ZN7TwoWire4readEv>
#endif
    2638:	a9 df       	rcall	.-174    	; 0x258c <_ZN9DS1337RTC7bcd2decEh>
    263a:	f7 01       	movw	r30, r14
    263c:	82 83       	std	Z+2, r24	; 0x02
    263e:	81 e8       	ldi	r24, 0x81	; 129
    2640:	94 e0       	ldi	r25, 0x04	; 4
    2642:	07 30       	cpi	r16, 0x07	; 7
    2644:	11 05       	cpc	r17, r1

    2646:	19 f0       	breq	.+6      	; 0x264e <_ZN9DS1337RTC4readER12tmElements_ti+0xa8>
    2648:	0b 30       	cpi	r16, 0x0B	; 11
};

extern TwoWire Wire;

#endif

    264a:	11 05       	cpc	r17, r1
    264c:	41 f4       	brne	.+16     	; 0x265e <_ZN9DS1337RTC4readER12tmElements_ti+0xb8>
    264e:	0e 94 cc 08 	call	0x1198	; 0x1198 <_ZN7TwoWire4readEv>
    2652:	9c df       	rcall	.-200    	; 0x258c <_ZN9DS1337RTC7bcd2decEh>
    2654:	f7 01       	movw	r30, r14
    2656:	84 83       	std	Z+4, r24	; 0x04
    2658:	15 82       	std	Z+5, r1	; 0x05
    265a:	16 82       	std	Z+6, r1	; 0x06
    265c:	1b c0       	rjmp	.+54     	; 0x2694 <_ZN9DS1337RTC4readER12tmElements_ti+0xee>
    265e:	0e 94 cc 08 	call	0x1198	; 0x1198 <_ZN7TwoWire4readEv>
    2662:	94 df       	rcall	.-216    	; 0x258c <_ZN9DS1337RTC7bcd2decEh>
    2664:	f7 01       	movw	r30, r14
    2666:	83 83       	std	Z+3, r24	; 0x03
    2668:	81 e8       	ldi	r24, 0x81	; 129
    266a:	94 e0       	ldi	r25, 0x04	; 4
    266c:	0e 94 cc 08 	call	0x1198	; 0x1198 <_ZN7TwoWire4readEv>
    2670:	8d df       	rcall	.-230    	; 0x258c <_ZN9DS1337RTC7bcd2decEh>
    2672:	f7 01       	movw	r30, r14
    2674:	84 83       	std	Z+4, r24	; 0x04
    2676:	81 e8       	ldi	r24, 0x81	; 129
    2678:	94 e0       	ldi	r25, 0x04	; 4
    267a:	0e 94 cc 08 	call	0x1198	; 0x1198 <_ZN7TwoWire4readEv>
    267e:	86 df       	rcall	.-244    	; 0x258c <_ZN9DS1337RTC7bcd2decEh>
    2680:	f7 01       	movw	r30, r14
    2682:	85 83       	std	Z+5, r24	; 0x05
    2684:	81 e8       	ldi	r24, 0x81	; 129
    2686:	94 e0       	ldi	r25, 0x04	; 4
    2688:	0e 94 cc 08 	call	0x1198	; 0x1198 <_ZN7TwoWire4readEv>
    268c:	7f df       	rcall	.-258    	; 0x258c <_ZN9DS1337RTC7bcd2decEh>
    268e:	82 5e       	subi	r24, 0xE2	; 226
    2690:	f7 01       	movw	r30, r14
    2692:	86 83       	std	Z+6, r24	; 0x06
    2694:	0f 90       	pop	r0
    2696:	0f 90       	pop	r0
    2698:	df 91       	pop	r29
    269a:	cf 91       	pop	r28
    269c:	1f 91       	pop	r17
    269e:	0f 91       	pop	r16
    26a0:	ff 90       	pop	r15
    26a2:	ef 90       	pop	r14
    26a4:	08 95       	ret

000026a6 <_ZN9DS1337RTC5writeER12tmElements_ti>:
    26a6:	0f 93       	push	r16
    26a8:	1f 93       	push	r17
    26aa:	cf 93       	push	r28
    26ac:	df 93       	push	r29
    26ae:	ec 01       	movw	r28, r24
    26b0:	8b 01       	movw	r16, r22
    26b2:	68 e6       	ldi	r22, 0x68	; 104
    26b4:	70 e0       	ldi	r23, 0x00	; 0
    26b6:	81 e8       	ldi	r24, 0x81	; 129
    26b8:	94 e0       	ldi	r25, 0x04	; 4
    26ba:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <_ZN7TwoWire17beginTransmissionEi>
    26be:	b8 01       	movw	r22, r16
    26c0:	81 e8       	ldi	r24, 0x81	; 129
    26c2:	94 e0       	ldi	r25, 0x04	; 4
    26c4:	3f df       	rcall	.-386    	; 0x2544 <_ZN7TwoWire5writeEi>
    26c6:	0b 30       	cpi	r16, 0x0B	; 11
    26c8:	11 05       	cpc	r17, r1
    26ca:	39 f0       	breq	.+14     	; 0x26da <_ZN9DS1337RTC5writeER12tmElements_ti+0x34>
    26cc:	88 81       	ld	r24, Y
    26ce:	55 df       	rcall	.-342    	; 0x257a <_ZN9DS1337RTC7dec2bcdEh>
    26d0:	68 2f       	mov	r22, r24
    26d2:	81 e8       	ldi	r24, 0x81	; 129
    26d4:	94 e0       	ldi	r25, 0x04	; 4
    26d6:	0e 94 1b 09 	call	0x1236	; 0x1236 <_ZN7TwoWire5writeEh>
    26da:	89 81       	ldd	r24, Y+1	; 0x01
    26dc:	4e df       	rcall	.-356    	; 0x257a <_ZN9DS1337RTC7dec2bcdEh>
    26de:	68 2f       	mov	r22, r24
    26e0:	81 e8       	ldi	r24, 0x81	; 129
    26e2:	94 e0       	ldi	r25, 0x04	; 4
    26e4:	0e 94 1b 09 	call	0x1236	; 0x1236 <_ZN7TwoWire5writeEh>
    26e8:	8a 81       	ldd	r24, Y+2	; 0x02
    26ea:	47 df       	rcall	.-370    	; 0x257a <_ZN9DS1337RTC7dec2bcdEh>
    26ec:	68 2f       	mov	r22, r24
    26ee:	81 e8       	ldi	r24, 0x81	; 129
    26f0:	94 e0       	ldi	r25, 0x04	; 4
    26f2:	0e 94 1b 09 	call	0x1236	; 0x1236 <_ZN7TwoWire5writeEh>
    26f6:	07 30       	cpi	r16, 0x07	; 7
    26f8:	11 05       	cpc	r17, r1
    26fa:	19 f0       	breq	.+6      	; 0x2702 <_ZN9DS1337RTC5writeER12tmElements_ti+0x5c>
    26fc:	0b 30       	cpi	r16, 0x0B	; 11
    26fe:	11 05       	cpc	r17, r1
    2700:	11 f4       	brne	.+4      	; 0x2706 <_ZN9DS1337RTC5writeER12tmElements_ti+0x60>
    2702:	8c 81       	ldd	r24, Y+4	; 0x04
    2704:	17 c0       	rjmp	.+46     	; 0x2734 <_ZN9DS1337RTC5writeER12tmElements_ti+0x8e>
    2706:	8b 81       	ldd	r24, Y+3	; 0x03
    2708:	38 df       	rcall	.-400    	; 0x257a <_ZN9DS1337RTC7dec2bcdEh>
    270a:	68 2f       	mov	r22, r24
    270c:	81 e8       	ldi	r24, 0x81	; 129
    270e:	94 e0       	ldi	r25, 0x04	; 4
    2710:	0e 94 1b 09 	call	0x1236	; 0x1236 <_ZN7TwoWire5writeEh>
    2714:	8c 81       	ldd	r24, Y+4	; 0x04
    2716:	31 df       	rcall	.-414    	; 0x257a <_ZN9DS1337RTC7dec2bcdEh>
    2718:	68 2f       	mov	r22, r24
    271a:	81 e8       	ldi	r24, 0x81	; 129
    271c:	94 e0       	ldi	r25, 0x04	; 4
    271e:	0e 94 1b 09 	call	0x1236	; 0x1236 <_ZN7TwoWire5writeEh>
    2722:	8d 81       	ldd	r24, Y+5	; 0x05
    2724:	2a df       	rcall	.-428    	; 0x257a <_ZN9DS1337RTC7dec2bcdEh>
    2726:	68 2f       	mov	r22, r24
    2728:	81 e8       	ldi	r24, 0x81	; 129
    272a:	94 e0       	ldi	r25, 0x04	; 4
    272c:	0e 94 1b 09 	call	0x1236	; 0x1236 <_ZN7TwoWire5writeEh>
    2730:	8e 81       	ldd	r24, Y+6	; 0x06
    2732:	8e 51       	subi	r24, 0x1E	; 30
    2734:	22 df       	rcall	.-444    	; 0x257a <_ZN9DS1337RTC7dec2bcdEh>
    2736:	68 2f       	mov	r22, r24
    2738:	81 e8       	ldi	r24, 0x81	; 129
    273a:	94 e0       	ldi	r25, 0x04	; 4
    273c:	0e 94 1b 09 	call	0x1236	; 0x1236 <_ZN7TwoWire5writeEh>
    2740:	81 e8       	ldi	r24, 0x81	; 129
    2742:	94 e0       	ldi	r25, 0x04	; 4
    2744:	df 91       	pop	r29
    2746:	cf 91       	pop	r28
    2748:	1f 91       	pop	r17
    274a:	0f 91       	pop	r16
    274c:	0c 94 8d 09 	jmp	0x131a	; 0x131a <_ZN7TwoWire15endTransmissionEv>

00002750 <_ZN9DS1337RTC12disableAlarmEi>:
    2750:	cf 93       	push	r28
    2752:	df 93       	push	r29
    2754:	ec 01       	movw	r28, r24
    2756:	68 e6       	ldi	r22, 0x68	; 104
    2758:	70 e0       	ldi	r23, 0x00	; 0
    275a:	81 e8       	ldi	r24, 0x81	; 129
    275c:	94 e0       	ldi	r25, 0x04	; 4
    275e:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <_ZN7TwoWire17beginTransmissionEi>
    2762:	6e e0       	ldi	r22, 0x0E	; 14
    2764:	70 e0       	ldi	r23, 0x00	; 0
    2766:	81 e8       	ldi	r24, 0x81	; 129
    2768:	94 e0       	ldi	r25, 0x04	; 4
    276a:	ec de       	rcall	.-552    	; 0x2544 <_ZN7TwoWire5writeEi>
    276c:	80 91 11 01 	lds	r24, 0x0111
    2770:	27 97       	sbiw	r28, 0x07	; 7
    2772:	11 f4       	brne	.+4      	; 0x2778 <_ZN9DS1337RTC12disableAlarmEi+0x28>
    2774:	8e 7f       	andi	r24, 0xFE	; 254
    2776:	01 c0       	rjmp	.+2      	; 0x277a <_ZN9DS1337RTC12disableAlarmEi+0x2a>
    2778:	8d 7f       	andi	r24, 0xFD	; 253
    277a:	80 93 11 01 	sts	0x0111, r24
    277e:	60 91 11 01 	lds	r22, 0x0111
    2782:	81 e8       	ldi	r24, 0x81	; 129
    2784:	94 e0       	ldi	r25, 0x04	; 4
    2786:	0e 94 1b 09 	call	0x1236	; 0x1236 <_ZN7TwoWire5writeEh>
    278a:	81 e8       	ldi	r24, 0x81	; 129
    278c:	94 e0       	ldi	r25, 0x04	; 4
    278e:	df 91       	pop	r29
    2790:	cf 91       	pop	r28
    2792:	0c 94 8d 09 	jmp	0x131a	; 0x131a <_ZN7TwoWire15endTransmissionEv>

00002796 <_ZN9DS1337RTC15interruptSelectEi>:
    2796:	cf 93       	push	r28
    2798:	df 93       	push	r29
    279a:	ec 01       	movw	r28, r24
    279c:	68 e6       	ldi	r22, 0x68	; 104
    279e:	70 e0       	ldi	r23, 0x00	; 0
    27a0:	81 e8       	ldi	r24, 0x81	; 129
    27a2:	94 e0       	ldi	r25, 0x04	; 4
    27a4:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <_ZN7TwoWire17beginTransmissionEi>
    27a8:	6e e0       	ldi	r22, 0x0E	; 14
    27aa:	70 e0       	ldi	r23, 0x00	; 0
    27ac:	81 e8       	ldi	r24, 0x81	; 129
    27ae:	94 e0       	ldi	r25, 0x04	; 4
    27b0:	c9 de       	rcall	.-622    	; 0x2544 <_ZN7TwoWire5writeEi>
    27b2:	80 91 11 01 	lds	r24, 0x0111
    27b6:	cd 2b       	or	r28, r29
    27b8:	11 f4       	brne	.+4      	; 0x27be <_ZN9DS1337RTC15interruptSelectEi+0x28>
    27ba:	84 60       	ori	r24, 0x04	; 4
    27bc:	01 c0       	rjmp	.+2      	; 0x27c0 <_ZN9DS1337RTC15interruptSelectEi+0x2a>
    27be:	8b 7f       	andi	r24, 0xFB	; 251
    27c0:	80 93 11 01 	sts	0x0111, r24
    27c4:	60 91 11 01 	lds	r22, 0x0111
    27c8:	81 e8       	ldi	r24, 0x81	; 129
    27ca:	94 e0       	ldi	r25, 0x04	; 4
    27cc:	0e 94 1b 09 	call	0x1236	; 0x1236 <_ZN7TwoWire5writeEh>
    27d0:	81 e8       	ldi	r24, 0x81	; 129
    27d2:	94 e0       	ldi	r25, 0x04	; 4
    27d4:	df 91       	pop	r29
    27d6:	cf 91       	pop	r28
    27d8:	0c 94 8d 09 	jmp	0x131a	; 0x131a <_ZN7TwoWire15endTransmissionEv>

000027dc <_Z11interrupt_0v>:



// interrupt routine for pin2 alarm.
void interrupt_0 () {
	if (digitalRead(BPOK) == 0)
    27dc:	83 e0       	ldi	r24, 0x03	; 3
    27de:	0e 94 96 06 	call	0xd2c	; 0xd2c <digitalRead>
    27e2:	89 2b       	or	r24, r25
    27e4:	19 f4       	brne	.+6      	; 0x27ec <_Z11interrupt_0v+0x10>
		timeToGo=1;
    27e6:	81 e0       	ldi	r24, 0x01	; 1
    27e8:	80 93 43 07 	sts	0x0743, r24
    27ec:	08 95       	ret

000027ee <_Z17interrupt_blinkerv>:
}

void interrupt_blinker(void)
{
	if (blink==0) {
    27ee:	80 91 3b 07 	lds	r24, 0x073B
    27f2:	81 11       	cpse	r24, r1
    27f4:	09 c0       	rjmp	.+18     	; 0x2808 <_Z17interrupt_blinkerv+0x1a>
		blink=1;
    27f6:	81 e0       	ldi	r24, 0x01	; 1
    27f8:	80 93 3b 07 	sts	0x073B, r24
		blinkCount++;  // increase when LED turns on
    27fc:	80 91 3a 07 	lds	r24, 0x073A
    2800:	8f 5f       	subi	r24, 0xFF	; 255
    2802:	80 93 3a 07 	sts	0x073A, r24
    2806:	08 95       	ret
	} else {
		blink=0;
    2808:	10 92 3b 07 	sts	0x073B, r1
    280c:	08 95       	ret

0000280e <setup>:

void pushLog(String);

//The setup function is called once at startup of the sketch
void setup()
{
    280e:	df 92       	push	r13
    2810:	ef 92       	push	r14
    2812:	ff 92       	push	r15
    2814:	0f 93       	push	r16
    2816:	1f 93       	push	r17
    2818:	cf 93       	push	r28
    281a:	df 93       	push	r29
    281c:	cd b7       	in	r28, 0x3d	; 61
    281e:	de b7       	in	r29, 0x3e	; 62
    2820:	28 97       	sbiw	r28, 0x08	; 8
    2822:	0f b6       	in	r0, 0x3f	; 63
    2824:	f8 94       	cli
    2826:	de bf       	out	0x3e, r29	; 62
    2828:	0f be       	out	0x3f, r0	; 63
    282a:	cd bf       	out	0x3d, r28	; 61
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    282c:	26 e0       	ldi	r18, 0x06	; 6
    282e:	40 e8       	ldi	r20, 0x80	; 128
    2830:	55 e2       	ldi	r21, 0x25	; 37
    2832:	60 e0       	ldi	r22, 0x00	; 0
    2834:	70 e0       	ldi	r23, 0x00	; 0
    2836:	8c e5       	ldi	r24, 0x5C	; 92
    2838:	93 e0       	ldi	r25, 0x03	; 3
    283a:	0e 94 72 01 	call	0x2e4	; 0x2e4 <_ZN14HardwareSerial5beginEmh>


// Open serial communications and wait for port to open:
	Serial.begin(9600);
	Serial.print("\n\n");
    283e:	63 e6       	ldi	r22, 0x63	; 99
    2840:	71 e0       	ldi	r23, 0x01	; 1
    2842:	8c e5       	ldi	r24, 0x5C	; 92
    2844:	93 e0       	ldi	r25, 0x03	; 3
    2846:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN5Print5printEPKc>
	Serial.println("Beggining of protortc");
    284a:	66 e6       	ldi	r22, 0x66	; 102
    284c:	71 e0       	ldi	r23, 0x01	; 1
    284e:	8c e5       	ldi	r24, 0x5C	; 92
    2850:	93 e0       	ldi	r25, 0x03	; 3
    2852:	0e 94 06 03 	call	0x60c	; 0x60c <_ZN5Print7printlnEPKc>

//setup des boutons
	pinMode(BPUP, INPUT);
    2856:	60 e0       	ldi	r22, 0x00	; 0
    2858:	81 e0       	ldi	r24, 0x01	; 1
    285a:	0e 94 28 06 	call	0xc50	; 0xc50 <pinMode>
	pinMode(BPDW, INPUT);
    285e:	60 e0       	ldi	r22, 0x00	; 0
    2860:	80 e0       	ldi	r24, 0x00	; 0
    2862:	0e 94 28 06 	call	0xc50	; 0xc50 <pinMode>
	pinMode(BPOK, INPUT);
    2866:	60 e0       	ldi	r22, 0x00	; 0
    2868:	83 e0       	ldi	r24, 0x03	; 3
    286a:	0e 94 28 06 	call	0xc50	; 0xc50 <pinMode>
	digitalWrite(BPUP,1);
    286e:	61 e0       	ldi	r22, 0x01	; 1
    2870:	81 e0       	ldi	r24, 0x01	; 1
    2872:	0e 94 61 06 	call	0xcc2	; 0xcc2 <digitalWrite>
	digitalWrite(BPDW,1);
    2876:	61 e0       	ldi	r22, 0x01	; 1
    2878:	80 e0       	ldi	r24, 0x00	; 0
    287a:	0e 94 61 06 	call	0xcc2	; 0xcc2 <digitalWrite>
	digitalWrite(BPOK,1);
    287e:	61 e0       	ldi	r22, 0x01	; 1
    2880:	83 e0       	ldi	r24, 0x03	; 3
    2882:	0e 94 61 06 	call	0xcc2	; 0xcc2 <digitalWrite>


//setup du lcd
	lcd.init();
    2886:	8e e2       	ldi	r24, 0x2E	; 46
    2888:	97 e0       	ldi	r25, 0x07	; 7
    288a:	5b de       	rcall	.-842    	; 0x2542 <_ZN17LiquidCrystal_I2C4initEv>
    288c:	8e e2       	ldi	r24, 0x2E	; 46
	lcd.backlight();
    288e:	97 e0       	ldi	r25, 0x07	; 7
    2890:	40 dd       	rcall	.-1408   	; 0x2312 <_ZN17LiquidCrystal_I2C9backlightEv>
    2892:	8e e2       	ldi	r24, 0x2E	; 46
    2894:	97 e0       	ldi	r25, 0x07	; 7
	lcd.clear();
    2896:	81 dd       	rcall	.-1278   	; 0x239a <_ZN17LiquidCrystal_I2C5clearEv>
    2898:	88 e0       	ldi	r24, 0x08	; 8
    289a:	e8 2e       	mov	r14, r24
    289c:	8e 01       	movw	r16, r28
	{
		uint8_t check[8] = {0x0,0x1,0x3,0x16,0x1c,0x8,0x0};
    289e:	0f 5f       	subi	r16, 0xFF	; 255
    28a0:	1f 4f       	sbci	r17, 0xFF	; 255
    28a2:	f8 01       	movw	r30, r16
    28a4:	8e 2d       	mov	r24, r14
    28a6:	11 92       	st	Z+, r1
    28a8:	8a 95       	dec	r24
    28aa:	e9 f7       	brne	.-6      	; 0x28a6 <setup+0x98>
    28ac:	ff 24       	eor	r15, r15
    28ae:	f3 94       	inc	r15
    28b0:	fa 82       	std	Y+2, r15	; 0x02
    28b2:	83 e0       	ldi	r24, 0x03	; 3
    28b4:	8b 83       	std	Y+3, r24	; 0x03
    28b6:	86 e1       	ldi	r24, 0x16	; 22
    28b8:	8c 83       	std	Y+4, r24	; 0x04
    28ba:	8c e1       	ldi	r24, 0x1C	; 28
    28bc:	8d 83       	std	Y+5, r24	; 0x05
    28be:	ee 82       	std	Y+6, r14	; 0x06
    28c0:	a8 01       	movw	r20, r16
    28c2:	60 e0       	ldi	r22, 0x00	; 0
    28c4:	8e e2       	ldi	r24, 0x2E	; 46
		 lcd.createChar(CHECK_CHAR, check);
    28c6:	97 e0       	ldi	r25, 0x07	; 7
    28c8:	a7 dd       	rcall	.-1202   	; 0x2418 <_ZN17LiquidCrystal_I2C10createCharEhPh>
    28ca:	f8 01       	movw	r30, r16
    28cc:	8e 2d       	mov	r24, r14
    28ce:	11 92       	st	Z+, r1
    28d0:	8a 95       	dec	r24
	}{
		uint8_t check2[8] = {0x0,0x0,0x1,0x2,0x14,0x8,0x0};
    28d2:	e9 f7       	brne	.-6      	; 0x28ce <setup+0xc0>
    28d4:	fb 82       	std	Y+3, r15	; 0x03
    28d6:	82 e0       	ldi	r24, 0x02	; 2
    28d8:	8c 83       	std	Y+4, r24	; 0x04
    28da:	84 e1       	ldi	r24, 0x14	; 20
    28dc:	8d 83       	std	Y+5, r24	; 0x05
    28de:	ee 82       	std	Y+6, r14	; 0x06
    28e0:	a8 01       	movw	r20, r16
    28e2:	61 e0       	ldi	r22, 0x01	; 1
    28e4:	8e e2       	ldi	r24, 0x2E	; 46
    28e6:	97 e0       	ldi	r25, 0x07	; 7
		 lcd.createChar(CHECK2_CHAR, check2);
    28e8:	97 dd       	rcall	.-1234   	; 0x2418 <_ZN17LiquidCrystal_I2C10createCharEhPh>
    28ea:	f8 01       	movw	r30, r16
    28ec:	8e 2d       	mov	r24, r14
    28ee:	11 92       	st	Z+, r1
    28f0:	8a 95       	dec	r24
    28f2:	e9 f7       	brne	.-6      	; 0x28ee <setup+0xe0>
	}{
		uint8_t bat1[8] = {0x0,0x0,0x0,0x0,0xe,0x1f,0x1f};
    28f4:	9e e0       	ldi	r25, 0x0E	; 14
    28f6:	d9 2e       	mov	r13, r25
    28f8:	dd 82       	std	Y+5, r13	; 0x05
    28fa:	2f e1       	ldi	r18, 0x1F	; 31
    28fc:	f2 2e       	mov	r15, r18
    28fe:	fe 82       	std	Y+6, r15	; 0x06
    2900:	ff 82       	std	Y+7, r15	; 0x07
    2902:	a8 01       	movw	r20, r16
    2904:	63 e0       	ldi	r22, 0x03	; 3
    2906:	8e e2       	ldi	r24, 0x2E	; 46
    2908:	97 e0       	ldi	r25, 0x07	; 7
    290a:	86 dd       	rcall	.-1268   	; 0x2418 <_ZN17LiquidCrystal_I2C10createCharEhPh>
		 lcd.createChar(BAT1_CHAR, bat1);
    290c:	f8 01       	movw	r30, r16
    290e:	8e 2d       	mov	r24, r14
    2910:	11 92       	st	Z+, r1
    2912:	8a 95       	dec	r24
    2914:	e9 f7       	brne	.-6      	; 0x2910 <setup+0x102>
    2916:	db 82       	std	Y+3, r13	; 0x03
	}{
		uint8_t bat2[8] = {0x0,0x0,0xe,0x1f,0x1f,0x1f,0x1f};
    2918:	fc 82       	std	Y+4, r15	; 0x04
    291a:	fd 82       	std	Y+5, r15	; 0x05
    291c:	fe 82       	std	Y+6, r15	; 0x06
    291e:	ff 82       	std	Y+7, r15	; 0x07
    2920:	a8 01       	movw	r20, r16
    2922:	64 e0       	ldi	r22, 0x04	; 4
    2924:	8e e2       	ldi	r24, 0x2E	; 46
    2926:	97 e0       	ldi	r25, 0x07	; 7
    2928:	77 dd       	rcall	.-1298   	; 0x2418 <_ZN17LiquidCrystal_I2C10createCharEhPh>
    292a:	f8 01       	movw	r30, r16
		 lcd.createChar(BAT2_CHAR, bat2);
    292c:	11 92       	st	Z+, r1
    292e:	ea 94       	dec	r14
    2930:	e9 f7       	brne	.-6      	; 0x292c <setup+0x11e>
    2932:	d9 82       	std	Y+1, r13	; 0x01
    2934:	fa 82       	std	Y+2, r15	; 0x02
    2936:	fb 82       	std	Y+3, r15	; 0x03
	}{
		uint8_t bat3[8] = {0xe,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f};
    2938:	fc 82       	std	Y+4, r15	; 0x04
    293a:	fd 82       	std	Y+5, r15	; 0x05
    293c:	fe 82       	std	Y+6, r15	; 0x06
    293e:	ff 82       	std	Y+7, r15	; 0x07
    2940:	a8 01       	movw	r20, r16
    2942:	65 e0       	ldi	r22, 0x05	; 5
    2944:	8e e2       	ldi	r24, 0x2E	; 46
    2946:	97 e0       	ldi	r25, 0x07	; 7
    2948:	67 dd       	rcall	.-1330   	; 0x2418 <_ZN17LiquidCrystal_I2C10createCharEhPh>
    294a:	40 e0       	ldi	r20, 0x00	; 0
    294c:	60 e0       	ldi	r22, 0x00	; 0
		 lcd.createChar(BAT3_CHAR, bat3);
    294e:	8e e2       	ldi	r24, 0x2E	; 46
    2950:	97 e0       	ldi	r25, 0x07	; 7
    2952:	2f dd       	rcall	.-1442   	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    2954:	87 e0       	ldi	r24, 0x07	; 7
    2956:	90 e0       	ldi	r25, 0x00	; 0
    2958:	fb de       	rcall	.-522    	; 0x2750 <_ZN9DS1337RTC12disableAlarmEi>
	}
	lcd.setCursor(0,0);
    295a:	8b e0       	ldi	r24, 0x0B	; 11
    295c:	90 e0       	ldi	r25, 0x00	; 0
    295e:	f8 de       	rcall	.-528    	; 0x2750 <_ZN9DS1337RTC12disableAlarmEi>
    2960:	80 e0       	ldi	r24, 0x00	; 0
    2962:	90 e0       	ldi	r25, 0x00	; 0
    2964:	18 df       	rcall	.-464    	; 0x2796 <_ZN9DS1337RTC15interruptSelectEi>

	//Init of RTC
	//RTC.set(SECS_YR_2000,CLOCK_ADDRESS);
    RTC.disableAlarm(ALARM1_ADDRESS);
    2966:	f5 dd       	rcall	.-1046   	; 0x2552 <_ZN9DS1337RTC11resetAlarmsEv>
    2968:	60 e0       	ldi	r22, 0x00	; 0
    296a:	82 e0       	ldi	r24, 0x02	; 2
    296c:	0e 94 28 06 	call	0xc50	; 0xc50 <pinMode>
    RTC.disableAlarm(ALARM2_ADDRESS);
    2970:	42 e0       	ldi	r20, 0x02	; 2
    2972:	50 e0       	ldi	r21, 0x00	; 0
    2974:	6e ee       	ldi	r22, 0xEE	; 238
    RTC.interruptSelect(INTB);
    2976:	73 e1       	ldi	r23, 0x13	; 19
    2978:	81 e0       	ldi	r24, 0x01	; 1
    297a:	0e 94 13 04 	call	0x826	; 0x826 <attachInterrupt>
    RTC.resetAlarms();
    297e:	6c e7       	ldi	r22, 0x7C	; 124
    2980:	71 e0       	ldi	r23, 0x01	; 1
	pinMode(alarmPin, INPUT);
    2982:	8c e5       	ldi	r24, 0x5C	; 92
    2984:	93 e0       	ldi	r25, 0x03	; 3
    2986:	0e 94 06 03 	call	0x60c	; 0x60c <_ZN5Print7printlnEPKc>
	attachInterrupt(digitalPinToInterrupt(3), interrupt_0 , FALLING);
    298a:	28 96       	adiw	r28, 0x08	; 8
    298c:	0f b6       	in	r0, 0x3f	; 63
    298e:	f8 94       	cli
    2990:	de bf       	out	0x3e, r29	; 62
    2992:	0f be       	out	0x3f, r0	; 63
    2994:	cd bf       	out	0x3d, r28	; 61
    2996:	df 91       	pop	r29
	pushLog("Let the log beggin!\n");

	//analog init
	analogReference(EXTERNAL);
*/
	Serial.println("end of setup");
    2998:	cf 91       	pop	r28
    299a:	1f 91       	pop	r17
    299c:	0f 91       	pop	r16
    299e:	ff 90       	pop	r15
    29a0:	ef 90       	pop	r14
    29a2:	df 90       	pop	r13
}
    29a4:	08 95       	ret

000029a6 <_Z10waitButtonv>:
		delay(1000);
	}
}

uint8_t waitButton()
{
    29a6:	cf 92       	push	r12
    29a8:	df 92       	push	r13
    29aa:	ef 92       	push	r14
    29ac:	ff 92       	push	r15
	uint32_t timeout=millis()+10000;
    29ae:	0e 94 65 05 	call	0xaca	; 0xaca <millis>
    29b2:	6b 01       	movw	r12, r22
    29b4:	7c 01       	movw	r14, r24
    29b6:	80 e1       	ldi	r24, 0x10	; 16
    29b8:	c8 0e       	add	r12, r24
    29ba:	87 e2       	ldi	r24, 0x27	; 39
    29bc:	d8 1e       	adc	r13, r24
    29be:	e1 1c       	adc	r14, r1
    29c0:	f1 1c       	adc	r15, r1
	delay(500);//debouncing
    29c2:	64 ef       	ldi	r22, 0xF4	; 244
    29c4:	71 e0       	ldi	r23, 0x01	; 1
    29c6:	80 e0       	ldi	r24, 0x00	; 0
    29c8:	90 e0       	ldi	r25, 0x00	; 0
    29ca:	0e 94 94 05 	call	0xb28	; 0xb28 <delay>
	while(1){//will have to handle timeout
		if(!digitalRead(BPUP))
    29ce:	81 e0       	ldi	r24, 0x01	; 1
    29d0:	0e 94 96 06 	call	0xd2c	; 0xd2c <digitalRead>
    29d4:	89 2b       	or	r24, r25
    29d6:	99 f0       	breq	.+38     	; 0x29fe <_Z10waitButtonv+0x58>
			return BPUP;
		if(!digitalRead(BPOK))
    29d8:	83 e0       	ldi	r24, 0x03	; 3
    29da:	0e 94 96 06 	call	0xd2c	; 0xd2c <digitalRead>
    29de:	89 2b       	or	r24, r25
    29e0:	81 f0       	breq	.+32     	; 0x2a02 <_Z10waitButtonv+0x5c>
			return BPOK;
		if(!digitalRead(BPDW))
    29e2:	80 e0       	ldi	r24, 0x00	; 0
    29e4:	0e 94 96 06 	call	0xd2c	; 0xd2c <digitalRead>
    29e8:	89 2b       	or	r24, r25
    29ea:	69 f0       	breq	.+26     	; 0x2a06 <_Z10waitButtonv+0x60>
			return BPDW;
		if(millis()>timeout)
    29ec:	0e 94 65 05 	call	0xaca	; 0xaca <millis>
    29f0:	c6 16       	cp	r12, r22
    29f2:	d7 06       	cpc	r13, r23
    29f4:	e8 06       	cpc	r14, r24
    29f6:	f9 06       	cpc	r15, r25
    29f8:	50 f7       	brcc	.-44     	; 0x29ce <_Z10waitButtonv+0x28>
			return TIMEOUT;
    29fa:	82 e3       	ldi	r24, 0x32	; 50
    29fc:	05 c0       	rjmp	.+10     	; 0x2a08 <_Z10waitButtonv+0x62>
{
	uint32_t timeout=millis()+10000;
	delay(500);//debouncing
	while(1){//will have to handle timeout
		if(!digitalRead(BPUP))
			return BPUP;
    29fe:	81 e0       	ldi	r24, 0x01	; 1
    2a00:	03 c0       	rjmp	.+6      	; 0x2a08 <_Z10waitButtonv+0x62>
		if(!digitalRead(BPOK))
			return BPOK;
    2a02:	83 e0       	ldi	r24, 0x03	; 3
    2a04:	01 c0       	rjmp	.+2      	; 0x2a08 <_Z10waitButtonv+0x62>
		if(!digitalRead(BPDW))
			return BPDW;
    2a06:	80 e0       	ldi	r24, 0x00	; 0
		if(millis()>timeout)
			return TIMEOUT;
	}

}
    2a08:	ff 90       	pop	r15
    2a0a:	ef 90       	pop	r14
    2a0c:	df 90       	pop	r13
    2a0e:	cf 90       	pop	r12
    2a10:	08 95       	ret

00002a12 <_Z11isDateValidP12tmElements_t>:

}

#define LEAP_YEAR(Y)     ( ((1970+Y)>0) && !((1970+Y)%4) && ( ((1970+Y)%100) || !((1970+Y)%400) ) )
const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31};
bool isDateValid(tmElements_t *te){
    2a12:	dc 01       	movw	r26, r24
	if (te->Month>12)
    2a14:	15 96       	adiw	r26, 0x05	; 5
    2a16:	ec 91       	ld	r30, X
    2a18:	15 97       	sbiw	r26, 0x05	; 5
    2a1a:	ed 30       	cpi	r30, 0x0D	; 13
    2a1c:	20 f5       	brcc	.+72     	; 0x2a66 <_Z11isDateValidP12tmElements_t+0x54>
    2a1e:	14 96       	adiw	r26, 0x04	; 4
    2a20:	4c 91       	ld	r20, X
    2a22:	14 97       	sbiw	r26, 0x04	; 4
		return 0;
	if ((te->Month==2)&&(!LEAP_YEAR(te->Year))&&(te->Day==29))
    2a24:	e2 30       	cpi	r30, 0x02	; 2
    2a26:	c1 f4       	brne	.+48     	; 0x2a58 <_Z11isDateValidP12tmElements_t+0x46>
    2a28:	16 96       	adiw	r26, 0x06	; 6
    2a2a:	2c 91       	ld	r18, X
    2a2c:	30 e0       	ldi	r19, 0x00	; 0
    2a2e:	2e 54       	subi	r18, 0x4E	; 78
    2a30:	38 4f       	sbci	r19, 0xF8	; 248
    2a32:	c9 01       	movw	r24, r18
    2a34:	83 70       	andi	r24, 0x03	; 3
    2a36:	99 27       	eor	r25, r25
    2a38:	89 2b       	or	r24, r25
    2a3a:	61 f4       	brne	.+24     	; 0x2a54 <_Z11isDateValidP12tmElements_t+0x42>
    2a3c:	c9 01       	movw	r24, r18
    2a3e:	64 e6       	ldi	r22, 0x64	; 100
    2a40:	70 e0       	ldi	r23, 0x00	; 0
    2a42:	a2 d7       	rcall	.+3908   	; 0x3988 <__divmodhi4>
    2a44:	89 2b       	or	r24, r25
    2a46:	41 f4       	brne	.+16     	; 0x2a58 <_Z11isDateValidP12tmElements_t+0x46>
    2a48:	c9 01       	movw	r24, r18
    2a4a:	60 e9       	ldi	r22, 0x90	; 144
    2a4c:	71 e0       	ldi	r23, 0x01	; 1
    2a4e:	9c d7       	rcall	.+3896   	; 0x3988 <__divmodhi4>
    2a50:	89 2b       	or	r24, r25
    2a52:	11 f0       	breq	.+4      	; 0x2a58 <_Z11isDateValidP12tmElements_t+0x46>
    2a54:	4d 31       	cpi	r20, 0x1D	; 29
    2a56:	49 f0       	breq	.+18     	; 0x2a6a <_Z11isDateValidP12tmElements_t+0x58>
    2a58:	f0 e0       	ldi	r31, 0x00	; 0
    2a5a:	e1 5b       	subi	r30, 0xB1	; 177
		return 1;
	if (te->Day>monthDays[(te->Month)-1])
    2a5c:	fc 4f       	sbci	r31, 0xFC	; 252
    2a5e:	81 e0       	ldi	r24, 0x01	; 1
    2a60:	90 81       	ld	r25, Z
    2a62:	94 17       	cp	r25, r20
    2a64:	18 f4       	brcc	.+6      	; 0x2a6c <_Z11isDateValidP12tmElements_t+0x5a>
    2a66:	80 e0       	ldi	r24, 0x00	; 0
    2a68:	08 95       	ret

#define LEAP_YEAR(Y)     ( ((1970+Y)>0) && !((1970+Y)%4) && ( ((1970+Y)%100) || !((1970+Y)%400) ) )
const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31};
bool isDateValid(tmElements_t *te){
	if (te->Month>12)
		return 0;
    2a6a:	81 e0       	ldi	r24, 0x01	; 1
    2a6c:	08 95       	ret

00002a6e <_Z9enterTimeP12tmElements_t>:
	if (te->Second>59 || te->Minute>59 ||te->Hour>23)
		return 0;
	return 1;
}

void enterTime(tmElements_t *te){
    2a6e:	cf 93       	push	r28
    2a70:	df 93       	push	r29
    2a72:	ec 01       	movw	r28, r24
  public:
    //****************************
    //  Configuration
    //****************************
    void initialize(unsigned long microseconds=1000000) __attribute__((always_inline)) {
	TCCR1B = _BV(WGM13);        // set mode as phase and frequency correct pwm, stop the timer
    2a74:	80 e1       	ldi	r24, 0x10	; 16
    2a76:	80 93 81 00 	sts	0x0081, r24
	TCCR1A = 0;                 // clear control register A 
    2a7a:	10 92 80 00 	sts	0x0080, r1
	if (cycles < TIMER1_RESOLUTION * 8) {
		clockSelectBits = _BV(CS11);
		pwmPeriod = cycles / 8;
	} else
	if (cycles < TIMER1_RESOLUTION * 64) {
		clockSelectBits = _BV(CS11) | _BV(CS10);
    2a7e:	83 e0       	ldi	r24, 0x03	; 3
    2a80:	80 93 d3 04 	sts	0x04D3, r24
		pwmPeriod = cycles / 64;
    2a84:	84 e2       	ldi	r24, 0x24	; 36
    2a86:	94 ef       	ldi	r25, 0xF4	; 244
    2a88:	90 93 d5 04 	sts	0x04D5, r25
    2a8c:	80 93 d4 04 	sts	0x04D4, r24
		pwmPeriod = cycles / 1024;
	} else {
		clockSelectBits = _BV(CS12) | _BV(CS10);
		pwmPeriod = TIMER1_RESOLUTION - 1;
	}
	ICR1 = pwmPeriod;
    2a90:	90 93 87 00 	sts	0x0087, r25
    2a94:	80 93 86 00 	sts	0x0086, r24
	TCCR1B = _BV(WGM13) | clockSelectBits;
    2a98:	83 e1       	ldi	r24, 0x13	; 19
    2a9a:	80 93 81 00 	sts	0x0081, r24

    //****************************
    //  Interrupt Function
    //****************************
    void attachInterrupt(void (*isr)()) __attribute__((always_inline)) {
	isrCallback = isr;
    2a9e:	87 ef       	ldi	r24, 0xF7	; 247
    2aa0:	93 e1       	ldi	r25, 0x13	; 19
    2aa2:	90 93 0c 01 	sts	0x010C, r25
    2aa6:	80 93 0b 01 	sts	0x010B, r24
	TIMSK1 = _BV(TOIE1);
    2aaa:	81 e0       	ldi	r24, 0x01	; 1
    2aac:	80 93 6f 00 	sts	0x006F, r24

    //****************************
    //  Run Control
    //****************************
    void start() __attribute__((always_inline)) {
	TCCR1B = 0;
    2ab0:	10 92 81 00 	sts	0x0081, r1
	TCNT1 = 0;		// TODO: does this cause an undesired interrupt?
    2ab4:	10 92 85 00 	sts	0x0085, r1
    2ab8:	10 92 84 00 	sts	0x0084, r1
    }
    void restart() __attribute__((always_inline)) {
	start();
    }
    void resume() __attribute__((always_inline)) {
	TCCR1B = _BV(WGM13) | clockSelectBits;
    2abc:	80 91 d3 04 	lds	r24, 0x04D3
    2ac0:	80 61       	ori	r24, 0x10	; 16
    2ac2:	80 93 81 00 	sts	0x0081, r24
	//init du timer1 et de son interrupt de clignotage
	Timer1.initialize(500000);
	Timer1.attachInterrupt(interrupt_blinker);
	Timer1.start();
ENTER_DATE:
	lcd.setCursor(0,0);
    2ac6:	40 e0       	ldi	r20, 0x00	; 0
    2ac8:	60 e0       	ldi	r22, 0x00	; 0
    2aca:	8e e2       	ldi	r24, 0x2E	; 46
    2acc:	97 e0       	ldi	r25, 0x07	; 7
    2ace:	71 dc       	rcall	.-1822   	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    2ad0:	69 e8       	ldi	r22, 0x89	; 137
	lcd.print("DATE:           ");
    2ad2:	71 e0       	ldi	r23, 0x01	; 1
    2ad4:	8e e2       	ldi	r24, 0x2E	; 46
    2ad6:	97 e0       	ldi	r25, 0x07	; 7
    2ad8:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN5Print5printEPKc>
    2adc:	41 e0       	ldi	r20, 0x01	; 1
	lcd.setCursor(0,1);
    2ade:	60 e0       	ldi	r22, 0x00	; 0
    2ae0:	8e e2       	ldi	r24, 0x2E	; 46
    2ae2:	97 e0       	ldi	r25, 0x07	; 7
    2ae4:	66 dc       	rcall	.-1844   	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    2ae6:	8c 81       	ldd	r24, Y+4	; 0x04
    2ae8:	8a 30       	cpi	r24, 0x0A	; 10
	if (te->Day<10)
    2aea:	28 f4       	brcc	.+10     	; 0x2af6 <_Z9enterTimeP12tmElements_t+0x88>
    2aec:	60 e3       	ldi	r22, 0x30	; 48
    2aee:	8e e2       	ldi	r24, 0x2E	; 46
		lcd.print('0');
    2af0:	97 e0       	ldi	r25, 0x07	; 7
    2af2:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <_ZN5Print5printEc>
    2af6:	4a e0       	ldi	r20, 0x0A	; 10
    2af8:	50 e0       	ldi	r21, 0x00	; 0
	lcd.print(te->Day);
    2afa:	6c 81       	ldd	r22, Y+4	; 0x04
    2afc:	8e e2       	ldi	r24, 0x2E	; 46
    2afe:	97 e0       	ldi	r25, 0x07	; 7
    2b00:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <_ZN5Print5printEhi>
    2b04:	6f e2       	ldi	r22, 0x2F	; 47
    2b06:	8e e2       	ldi	r24, 0x2E	; 46
	lcd.print('/');
    2b08:	97 e0       	ldi	r25, 0x07	; 7
    2b0a:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <_ZN5Print5printEc>
    2b0e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b10:	8a 30       	cpi	r24, 0x0A	; 10
	if (te->Month<10)
    2b12:	28 f4       	brcc	.+10     	; 0x2b1e <_Z9enterTimeP12tmElements_t+0xb0>
    2b14:	60 e3       	ldi	r22, 0x30	; 48
    2b16:	8e e2       	ldi	r24, 0x2E	; 46
		lcd.print('0');
    2b18:	97 e0       	ldi	r25, 0x07	; 7
    2b1a:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <_ZN5Print5printEc>
    2b1e:	4a e0       	ldi	r20, 0x0A	; 10
    2b20:	50 e0       	ldi	r21, 0x00	; 0
	lcd.print(te->Month);
    2b22:	6d 81       	ldd	r22, Y+5	; 0x05
    2b24:	8e e2       	ldi	r24, 0x2E	; 46
    2b26:	97 e0       	ldi	r25, 0x07	; 7
    2b28:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <_ZN5Print5printEhi>
    2b2c:	6f e2       	ldi	r22, 0x2F	; 47
    2b2e:	8e e2       	ldi	r24, 0x2E	; 46
	lcd.print('/');
    2b30:	97 e0       	ldi	r25, 0x07	; 7
    2b32:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <_ZN5Print5printEc>
    2b36:	6e 81       	ldd	r22, Y+6	; 0x06
    2b38:	70 e0       	ldi	r23, 0x00	; 0
	lcd.print((uint16_t(te->Year)+1970));
    2b3a:	6e 54       	subi	r22, 0x4E	; 78
    2b3c:	78 4f       	sbci	r23, 0xF8	; 248
    2b3e:	4a e0       	ldi	r20, 0x0A	; 10
    2b40:	50 e0       	ldi	r21, 0x00	; 0
    2b42:	8e e2       	ldi	r24, 0x2E	; 46
    2b44:	97 e0       	ldi	r25, 0x07	; 7
    2b46:	0e 94 80 03 	call	0x700	; 0x700 <_ZN5Print5printEji>
    2b4a:	65 eb       	ldi	r22, 0xB5	; 181
    2b4c:	71 e0       	ldi	r23, 0x01	; 1
	lcd.print("      ");
    2b4e:	8e e2       	ldi	r24, 0x2E	; 46
    2b50:	97 e0       	ldi	r25, 0x07	; 7
    2b52:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN5Print5printEPKc>
    2b56:	64 ef       	ldi	r22, 0xF4	; 244
    2b58:	71 e0       	ldi	r23, 0x01	; 1
	while(1){
		delay(500);
    2b5a:	80 e0       	ldi	r24, 0x00	; 0
    2b5c:	90 e0       	ldi	r25, 0x00	; 0
    2b5e:	0e 94 94 05 	call	0xb28	; 0xb28 <delay>
    2b62:	f8 94       	cli
    2b64:	80 91 3b 07 	lds	r24, 0x073B
		noInterrupts();
		bool blinkCopy=blink;
    2b68:	78 94       	sei
    2b6a:	41 e0       	ldi	r20, 0x01	; 1
		interrupts();
    2b6c:	60 e0       	ldi	r22, 0x00	; 0
		if (blinkCopy==1){
			lcd.setCursor(0,1);
    2b6e:	88 23       	and	r24, r24
    2b70:	99 f0       	breq	.+38     	; 0x2b98 <_Z9enterTimeP12tmElements_t+0x12a>
	while(1){
		delay(500);
		noInterrupts();
		bool blinkCopy=blink;
		interrupts();
		if (blinkCopy==1){
    2b72:	8e e2       	ldi	r24, 0x2E	; 46
    2b74:	97 e0       	ldi	r25, 0x07	; 7
			lcd.setCursor(0,1);
    2b76:	1d dc       	rcall	.-1990   	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    2b78:	8c 81       	ldd	r24, Y+4	; 0x04
    2b7a:	8a 30       	cpi	r24, 0x0A	; 10
    2b7c:	28 f4       	brcc	.+10     	; 0x2b88 <_Z9enterTimeP12tmElements_t+0x11a>
			if (te->Day<10)
    2b7e:	60 e3       	ldi	r22, 0x30	; 48
    2b80:	8e e2       	ldi	r24, 0x2E	; 46
    2b82:	97 e0       	ldi	r25, 0x07	; 7
				lcd.print('0');
    2b84:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <_ZN5Print5printEc>
    2b88:	4a e0       	ldi	r20, 0x0A	; 10
    2b8a:	50 e0       	ldi	r21, 0x00	; 0
    2b8c:	6c 81       	ldd	r22, Y+4	; 0x04
			lcd.print(te->Day);
    2b8e:	8e e2       	ldi	r24, 0x2E	; 46
    2b90:	97 e0       	ldi	r25, 0x07	; 7
    2b92:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <_ZN5Print5printEhi>
    2b96:	09 c0       	rjmp	.+18     	; 0x2baa <_Z9enterTimeP12tmElements_t+0x13c>
    2b98:	8e e2       	ldi	r24, 0x2E	; 46
    2b9a:	97 e0       	ldi	r25, 0x07	; 7
    2b9c:	0a dc       	rcall	.-2028   	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
		}else{
			lcd.setCursor(0,1);
    2b9e:	69 eb       	ldi	r22, 0xB9	; 185
    2ba0:	71 e0       	ldi	r23, 0x01	; 1
    2ba2:	8e e2       	ldi	r24, 0x2E	; 46
    2ba4:	97 e0       	ldi	r25, 0x07	; 7
			lcd.print("  ");
    2ba6:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN5Print5printEPKc>
    2baa:	81 e0       	ldi	r24, 0x01	; 1
    2bac:	0e 94 96 06 	call	0xd2c	; 0xd2c <digitalRead>
    2bb0:	89 2b       	or	r24, r25
		}
		if((!digitalRead(BPUP))&&(te->Day<31)){
    2bb2:	c9 f4       	brne	.+50     	; 0x2be6 <_Z9enterTimeP12tmElements_t+0x178>
    2bb4:	8c 81       	ldd	r24, Y+4	; 0x04
    2bb6:	8f 31       	cpi	r24, 0x1F	; 31
    2bb8:	b0 f4       	brcc	.+44     	; 0x2be6 <_Z9enterTimeP12tmElements_t+0x178>
    2bba:	8f 5f       	subi	r24, 0xFF	; 255
    2bbc:	8c 83       	std	Y+4, r24	; 0x04
    2bbe:	41 e0       	ldi	r20, 0x01	; 1
    2bc0:	60 e0       	ldi	r22, 0x00	; 0
			te->Day+=1;
    2bc2:	8e e2       	ldi	r24, 0x2E	; 46
    2bc4:	97 e0       	ldi	r25, 0x07	; 7
			lcd.setCursor(0,1);
    2bc6:	f5 db       	rcall	.-2070   	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    2bc8:	8c 81       	ldd	r24, Y+4	; 0x04
    2bca:	8a 30       	cpi	r24, 0x0A	; 10
    2bcc:	28 f4       	brcc	.+10     	; 0x2bd8 <_Z9enterTimeP12tmElements_t+0x16a>
    2bce:	60 e3       	ldi	r22, 0x30	; 48
    2bd0:	8e e2       	ldi	r24, 0x2E	; 46
			if (te->Day<10)
    2bd2:	97 e0       	ldi	r25, 0x07	; 7
    2bd4:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <_ZN5Print5printEc>
				lcd.print('0');
    2bd8:	4a e0       	ldi	r20, 0x0A	; 10
    2bda:	50 e0       	ldi	r21, 0x00	; 0
    2bdc:	6c 81       	ldd	r22, Y+4	; 0x04
    2bde:	8e e2       	ldi	r24, 0x2E	; 46
    2be0:	97 e0       	ldi	r25, 0x07	; 7
			lcd.print(te->Day);
    2be2:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <_ZN5Print5printEhi>
    2be6:	80 e0       	ldi	r24, 0x00	; 0
    2be8:	0e 94 96 06 	call	0xd2c	; 0xd2c <digitalRead>
    2bec:	89 2b       	or	r24, r25
    2bee:	c9 f4       	brne	.+50     	; 0x2c22 <_Z9enterTimeP12tmElements_t+0x1b4>
		}
		if((!digitalRead(BPDW))&&(te->Day>0)){
    2bf0:	8c 81       	ldd	r24, Y+4	; 0x04
    2bf2:	88 23       	and	r24, r24
    2bf4:	b1 f0       	breq	.+44     	; 0x2c22 <_Z9enterTimeP12tmElements_t+0x1b4>
    2bf6:	81 50       	subi	r24, 0x01	; 1
    2bf8:	8c 83       	std	Y+4, r24	; 0x04
    2bfa:	41 e0       	ldi	r20, 0x01	; 1
    2bfc:	60 e0       	ldi	r22, 0x00	; 0
    2bfe:	8e e2       	ldi	r24, 0x2E	; 46
			te->Day-=1;
    2c00:	97 e0       	ldi	r25, 0x07	; 7
    2c02:	d7 db       	rcall	.-2130   	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.setCursor(0,1);
    2c04:	8c 81       	ldd	r24, Y+4	; 0x04
    2c06:	8a 30       	cpi	r24, 0x0A	; 10
    2c08:	28 f4       	brcc	.+10     	; 0x2c14 <_Z9enterTimeP12tmElements_t+0x1a6>
    2c0a:	60 e3       	ldi	r22, 0x30	; 48
    2c0c:	8e e2       	ldi	r24, 0x2E	; 46
    2c0e:	97 e0       	ldi	r25, 0x07	; 7
			if (te->Day<10)
    2c10:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <_ZN5Print5printEc>
    2c14:	4a e0       	ldi	r20, 0x0A	; 10
				lcd.print('0');
    2c16:	50 e0       	ldi	r21, 0x00	; 0
    2c18:	6c 81       	ldd	r22, Y+4	; 0x04
    2c1a:	8e e2       	ldi	r24, 0x2E	; 46
    2c1c:	97 e0       	ldi	r25, 0x07	; 7
    2c1e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <_ZN5Print5printEhi>
			lcd.print(te->Day);
    2c22:	83 e0       	ldi	r24, 0x03	; 3
    2c24:	0e 94 96 06 	call	0xd2c	; 0xd2c <digitalRead>
    2c28:	89 2b       	or	r24, r25
    2c2a:	09 f0       	breq	.+2      	; 0x2c2e <_Z9enterTimeP12tmElements_t+0x1c0>
    2c2c:	94 cf       	rjmp	.-216    	; 0x2b56 <_Z9enterTimeP12tmElements_t+0xe8>
		}
		if(!digitalRead(BPOK)){
    2c2e:	41 e0       	ldi	r20, 0x01	; 1
    2c30:	60 e0       	ldi	r22, 0x00	; 0
    2c32:	8e e2       	ldi	r24, 0x2E	; 46
    2c34:	97 e0       	ldi	r25, 0x07	; 7
    2c36:	bd db       	rcall	.-2182   	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    2c38:	8c 81       	ldd	r24, Y+4	; 0x04
			lcd.setCursor(0,1);
    2c3a:	8a 30       	cpi	r24, 0x0A	; 10
    2c3c:	28 f4       	brcc	.+10     	; 0x2c48 <_Z9enterTimeP12tmElements_t+0x1da>
    2c3e:	60 e3       	ldi	r22, 0x30	; 48
    2c40:	8e e2       	ldi	r24, 0x2E	; 46
    2c42:	97 e0       	ldi	r25, 0x07	; 7
    2c44:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <_ZN5Print5printEc>
			if (te->Day<10)
    2c48:	4a e0       	ldi	r20, 0x0A	; 10
    2c4a:	50 e0       	ldi	r21, 0x00	; 0
				lcd.print('0');
    2c4c:	6c 81       	ldd	r22, Y+4	; 0x04
    2c4e:	8e e2       	ldi	r24, 0x2E	; 46
    2c50:	97 e0       	ldi	r25, 0x07	; 7
    2c52:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <_ZN5Print5printEhi>
			lcd.print(te->Day);
    2c56:	64 ef       	ldi	r22, 0xF4	; 244
    2c58:	71 e0       	ldi	r23, 0x01	; 1
    2c5a:	80 e0       	ldi	r24, 0x00	; 0
    2c5c:	90 e0       	ldi	r25, 0x00	; 0
    2c5e:	0e 94 94 05 	call	0xb28	; 0xb28 <delay>
    2c62:	f8 94       	cli
			break;
		}
	}
	while(1){
		delay(500);
    2c64:	80 91 3b 07 	lds	r24, 0x073B
    2c68:	78 94       	sei
    2c6a:	41 e0       	ldi	r20, 0x01	; 1
    2c6c:	63 e0       	ldi	r22, 0x03	; 3
    2c6e:	88 23       	and	r24, r24
		noInterrupts();
    2c70:	99 f0       	breq	.+38     	; 0x2c98 <_Z9enterTimeP12tmElements_t+0x22a>
		bool blinkCopy=blink;
    2c72:	8e e2       	ldi	r24, 0x2E	; 46
    2c74:	97 e0       	ldi	r25, 0x07	; 7
		interrupts();
    2c76:	9d db       	rcall	.-2246   	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
		if (blinkCopy==1){
			lcd.setCursor(3,1);
    2c78:	8d 81       	ldd	r24, Y+5	; 0x05
    2c7a:	8a 30       	cpi	r24, 0x0A	; 10
	while(1){
		delay(500);
		noInterrupts();
		bool blinkCopy=blink;
		interrupts();
		if (blinkCopy==1){
    2c7c:	28 f4       	brcc	.+10     	; 0x2c88 <_Z9enterTimeP12tmElements_t+0x21a>
    2c7e:	60 e3       	ldi	r22, 0x30	; 48
			lcd.setCursor(3,1);
    2c80:	8e e2       	ldi	r24, 0x2E	; 46
    2c82:	97 e0       	ldi	r25, 0x07	; 7
    2c84:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <_ZN5Print5printEc>
			if (te->Month<10)
    2c88:	4a e0       	ldi	r20, 0x0A	; 10
    2c8a:	50 e0       	ldi	r21, 0x00	; 0
    2c8c:	6d 81       	ldd	r22, Y+5	; 0x05
				lcd.print('0');
    2c8e:	8e e2       	ldi	r24, 0x2E	; 46
    2c90:	97 e0       	ldi	r25, 0x07	; 7
    2c92:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <_ZN5Print5printEhi>
    2c96:	09 c0       	rjmp	.+18     	; 0x2caa <_Z9enterTimeP12tmElements_t+0x23c>
			lcd.print(te->Month);
    2c98:	8e e2       	ldi	r24, 0x2E	; 46
    2c9a:	97 e0       	ldi	r25, 0x07	; 7
    2c9c:	8a db       	rcall	.-2284   	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    2c9e:	69 eb       	ldi	r22, 0xB9	; 185
    2ca0:	71 e0       	ldi	r23, 0x01	; 1
    2ca2:	8e e2       	ldi	r24, 0x2E	; 46
    2ca4:	97 e0       	ldi	r25, 0x07	; 7
    2ca6:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN5Print5printEPKc>
		}else{
			lcd.setCursor(3,1);
    2caa:	81 e0       	ldi	r24, 0x01	; 1
    2cac:	0e 94 96 06 	call	0xd2c	; 0xd2c <digitalRead>
			lcd.print("  ");
    2cb0:	89 2b       	or	r24, r25
    2cb2:	c9 f4       	brne	.+50     	; 0x2ce6 <_Z9enterTimeP12tmElements_t+0x278>
    2cb4:	8d 81       	ldd	r24, Y+5	; 0x05
    2cb6:	8c 30       	cpi	r24, 0x0C	; 12
    2cb8:	b0 f4       	brcc	.+44     	; 0x2ce6 <_Z9enterTimeP12tmElements_t+0x278>
    2cba:	8f 5f       	subi	r24, 0xFF	; 255
		}
		if((!digitalRead(BPUP))&&(te->Month<12)){
    2cbc:	8d 83       	std	Y+5, r24	; 0x05
    2cbe:	41 e0       	ldi	r20, 0x01	; 1
    2cc0:	63 e0       	ldi	r22, 0x03	; 3
    2cc2:	8e e2       	ldi	r24, 0x2E	; 46
    2cc4:	97 e0       	ldi	r25, 0x07	; 7
    2cc6:	75 db       	rcall	.-2326   	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    2cc8:	8d 81       	ldd	r24, Y+5	; 0x05
    2cca:	8a 30       	cpi	r24, 0x0A	; 10
			te->Month+=1;
    2ccc:	28 f4       	brcc	.+10     	; 0x2cd8 <_Z9enterTimeP12tmElements_t+0x26a>
    2cce:	60 e3       	ldi	r22, 0x30	; 48
			lcd.setCursor(3,1);
    2cd0:	8e e2       	ldi	r24, 0x2E	; 46
    2cd2:	97 e0       	ldi	r25, 0x07	; 7
    2cd4:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <_ZN5Print5printEc>
    2cd8:	4a e0       	ldi	r20, 0x0A	; 10
    2cda:	50 e0       	ldi	r21, 0x00	; 0
			if (te->Month<10)
    2cdc:	6d 81       	ldd	r22, Y+5	; 0x05
    2cde:	8e e2       	ldi	r24, 0x2E	; 46
    2ce0:	97 e0       	ldi	r25, 0x07	; 7
				lcd.print('0');
    2ce2:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <_ZN5Print5printEhi>
    2ce6:	80 e0       	ldi	r24, 0x00	; 0
    2ce8:	0e 94 96 06 	call	0xd2c	; 0xd2c <digitalRead>
			lcd.print(te->Month);
    2cec:	89 2b       	or	r24, r25
    2cee:	c9 f4       	brne	.+50     	; 0x2d22 <_Z9enterTimeP12tmElements_t+0x2b4>
    2cf0:	8d 81       	ldd	r24, Y+5	; 0x05
    2cf2:	88 23       	and	r24, r24
    2cf4:	b1 f0       	breq	.+44     	; 0x2d22 <_Z9enterTimeP12tmElements_t+0x2b4>
    2cf6:	81 50       	subi	r24, 0x01	; 1
    2cf8:	8d 83       	std	Y+5, r24	; 0x05
		}
		if((!digitalRead(BPDW))&&(te->Month>0)){
    2cfa:	41 e0       	ldi	r20, 0x01	; 1
    2cfc:	63 e0       	ldi	r22, 0x03	; 3
    2cfe:	8e e2       	ldi	r24, 0x2E	; 46
    2d00:	97 e0       	ldi	r25, 0x07	; 7
    2d02:	57 db       	rcall	.-2386   	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    2d04:	8d 81       	ldd	r24, Y+5	; 0x05
    2d06:	8a 30       	cpi	r24, 0x0A	; 10
    2d08:	28 f4       	brcc	.+10     	; 0x2d14 <_Z9enterTimeP12tmElements_t+0x2a6>
			te->Month-=1;
    2d0a:	60 e3       	ldi	r22, 0x30	; 48
    2d0c:	8e e2       	ldi	r24, 0x2E	; 46
			lcd.setCursor(3,1);
    2d0e:	97 e0       	ldi	r25, 0x07	; 7
    2d10:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <_ZN5Print5printEc>
    2d14:	4a e0       	ldi	r20, 0x0A	; 10
    2d16:	50 e0       	ldi	r21, 0x00	; 0
    2d18:	6d 81       	ldd	r22, Y+5	; 0x05
			if (te->Month<10)
    2d1a:	8e e2       	ldi	r24, 0x2E	; 46
    2d1c:	97 e0       	ldi	r25, 0x07	; 7
    2d1e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <_ZN5Print5printEhi>
				lcd.print('0');
    2d22:	83 e0       	ldi	r24, 0x03	; 3
    2d24:	0e 94 96 06 	call	0xd2c	; 0xd2c <digitalRead>
    2d28:	89 2b       	or	r24, r25
			lcd.print(te->Month);
    2d2a:	09 f0       	breq	.+2      	; 0x2d2e <_Z9enterTimeP12tmElements_t+0x2c0>
    2d2c:	94 cf       	rjmp	.-216    	; 0x2c56 <_Z9enterTimeP12tmElements_t+0x1e8>
    2d2e:	41 e0       	ldi	r20, 0x01	; 1
    2d30:	63 e0       	ldi	r22, 0x03	; 3
    2d32:	8e e2       	ldi	r24, 0x2E	; 46
    2d34:	97 e0       	ldi	r25, 0x07	; 7
    2d36:	3d db       	rcall	.-2438   	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
		}
		if(!digitalRead(BPOK)){
    2d38:	8d 81       	ldd	r24, Y+5	; 0x05
    2d3a:	8a 30       	cpi	r24, 0x0A	; 10
    2d3c:	28 f4       	brcc	.+10     	; 0x2d48 <_Z9enterTimeP12tmElements_t+0x2da>
    2d3e:	60 e3       	ldi	r22, 0x30	; 48
    2d40:	8e e2       	ldi	r24, 0x2E	; 46
    2d42:	97 e0       	ldi	r25, 0x07	; 7
			lcd.setCursor(3,1);
    2d44:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <_ZN5Print5printEc>
    2d48:	4a e0       	ldi	r20, 0x0A	; 10
    2d4a:	50 e0       	ldi	r21, 0x00	; 0
    2d4c:	6d 81       	ldd	r22, Y+5	; 0x05
    2d4e:	8e e2       	ldi	r24, 0x2E	; 46
			if (te->Month<10)
    2d50:	97 e0       	ldi	r25, 0x07	; 7
    2d52:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <_ZN5Print5printEhi>
				lcd.print('0');
    2d56:	64 ef       	ldi	r22, 0xF4	; 244
    2d58:	71 e0       	ldi	r23, 0x01	; 1
    2d5a:	80 e0       	ldi	r24, 0x00	; 0
    2d5c:	90 e0       	ldi	r25, 0x00	; 0
    2d5e:	0e 94 94 05 	call	0xb28	; 0xb28 <delay>
			lcd.print(te->Month);
    2d62:	f8 94       	cli
    2d64:	80 91 3b 07 	lds	r24, 0x073B
    2d68:	78 94       	sei
    2d6a:	41 e0       	ldi	r20, 0x01	; 1
    2d6c:	66 e0       	ldi	r22, 0x06	; 6
			break;
		}
	}
	while(1){
		delay(500);
    2d6e:	88 23       	and	r24, r24
    2d70:	71 f0       	breq	.+28     	; 0x2d8e <_Z9enterTimeP12tmElements_t+0x320>
    2d72:	8e e2       	ldi	r24, 0x2E	; 46
    2d74:	97 e0       	ldi	r25, 0x07	; 7
    2d76:	1d db       	rcall	.-2502   	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    2d78:	6e 81       	ldd	r22, Y+6	; 0x06
		noInterrupts();
    2d7a:	70 e0       	ldi	r23, 0x00	; 0
		bool blinkCopy=blink;
    2d7c:	6e 54       	subi	r22, 0x4E	; 78
    2d7e:	78 4f       	sbci	r23, 0xF8	; 248
		interrupts();
    2d80:	4a e0       	ldi	r20, 0x0A	; 10
		if (blinkCopy==1){
			lcd.setCursor(6,1);
    2d82:	50 e0       	ldi	r21, 0x00	; 0
    2d84:	8e e2       	ldi	r24, 0x2E	; 46
	while(1){
		delay(500);
		noInterrupts();
		bool blinkCopy=blink;
		interrupts();
		if (blinkCopy==1){
    2d86:	97 e0       	ldi	r25, 0x07	; 7
    2d88:	0e 94 80 03 	call	0x700	; 0x700 <_ZN5Print5printEji>
			lcd.setCursor(6,1);
    2d8c:	09 c0       	rjmp	.+18     	; 0x2da0 <_Z9enterTimeP12tmElements_t+0x332>
    2d8e:	8e e2       	ldi	r24, 0x2E	; 46
    2d90:	97 e0       	ldi	r25, 0x07	; 7
			lcd.print(uint16_t(te->Year)+1970);
    2d92:	0f db       	rcall	.-2530   	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    2d94:	67 eb       	ldi	r22, 0xB7	; 183
    2d96:	71 e0       	ldi	r23, 0x01	; 1
    2d98:	8e e2       	ldi	r24, 0x2E	; 46
    2d9a:	97 e0       	ldi	r25, 0x07	; 7
    2d9c:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN5Print5printEPKc>
    2da0:	81 e0       	ldi	r24, 0x01	; 1
    2da2:	0e 94 96 06 	call	0xd2c	; 0xd2c <digitalRead>
    2da6:	89 2b       	or	r24, r25
		}else{
			lcd.setCursor(6,1);
    2da8:	21 f4       	brne	.+8      	; 0x2db2 <_Z9enterTimeP12tmElements_t+0x344>
    2daa:	8e 81       	ldd	r24, Y+6	; 0x06
    2dac:	8e 3f       	cpi	r24, 0xFE	; 254
    2dae:	08 f4       	brcc	.+2      	; 0x2db2 <_Z9enterTimeP12tmElements_t+0x344>
			lcd.print("    ");
    2db0:	ee c1       	rjmp	.+988    	; 0x318e <_Z9enterTimeP12tmElements_t+0x720>
    2db2:	80 e0       	ldi	r24, 0x00	; 0
    2db4:	0e 94 96 06 	call	0xd2c	; 0xd2c <digitalRead>
    2db8:	89 2b       	or	r24, r25
    2dba:	19 f4       	brne	.+6      	; 0x2dc2 <_Z9enterTimeP12tmElements_t+0x354>
		}
		if((!digitalRead(BPUP))&&(te->Year<254)){
    2dbc:	8e 81       	ldd	r24, Y+6	; 0x06
    2dbe:	81 11       	cpse	r24, r1
    2dc0:	f8 c1       	rjmp	.+1008   	; 0x31b2 <_Z9enterTimeP12tmElements_t+0x744>
    2dc2:	83 e0       	ldi	r24, 0x03	; 3
    2dc4:	0e 94 96 06 	call	0xd2c	; 0xd2c <digitalRead>
    2dc8:	89 2b       	or	r24, r25
    2dca:	09 f0       	breq	.+2      	; 0x2dce <_Z9enterTimeP12tmElements_t+0x360>
    2dcc:	c4 cf       	rjmp	.-120    	; 0x2d56 <_Z9enterTimeP12tmElements_t+0x2e8>
			te->Year+=1;
			lcd.setCursor(6,1);
			lcd.print(uint16_t(te->Year)+1970);
		}
		if((!digitalRead(BPDW))&&(te->Year>0)){
    2dce:	41 e0       	ldi	r20, 0x01	; 1
    2dd0:	60 e0       	ldi	r22, 0x00	; 0
    2dd2:	8e e2       	ldi	r24, 0x2E	; 46
    2dd4:	97 e0       	ldi	r25, 0x07	; 7
    2dd6:	ed da       	rcall	.-2598   	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    2dd8:	6e 81       	ldd	r22, Y+6	; 0x06
    2dda:	70 e0       	ldi	r23, 0x00	; 0
    2ddc:	6e 54       	subi	r22, 0x4E	; 78
			te->Year-=1;
			lcd.setCursor(6,1);
			lcd.print(uint16_t(te->Year)+1970);
		}
		if(!digitalRead(BPOK)){
    2dde:	78 4f       	sbci	r23, 0xF8	; 248
    2de0:	4a e0       	ldi	r20, 0x0A	; 10
    2de2:	50 e0       	ldi	r21, 0x00	; 0
    2de4:	8e e2       	ldi	r24, 0x2E	; 46
    2de6:	97 e0       	ldi	r25, 0x07	; 7
    2de8:	0e 94 80 03 	call	0x700	; 0x700 <_ZN5Print5printEji>
			lcd.setCursor(0,1);
    2dec:	ce 01       	movw	r24, r28
    2dee:	11 de       	rcall	.-990    	; 0x2a12 <_Z11isDateValidP12tmElements_t>
    2df0:	81 11       	cpse	r24, r1
    2df2:	72 c1       	rjmp	.+740    	; 0x30d8 <_Z9enterTimeP12tmElements_t+0x66a>
    2df4:	40 e0       	ldi	r20, 0x00	; 0
			lcd.print(uint16_t(te->Year)+1970);
    2df6:	60 e0       	ldi	r22, 0x00	; 0
    2df8:	8e e2       	ldi	r24, 0x2E	; 46
    2dfa:	97 e0       	ldi	r25, 0x07	; 7
    2dfc:	da da       	rcall	.-2636   	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    2dfe:	6a e9       	ldi	r22, 0x9A	; 154
    2e00:	71 e0       	ldi	r23, 0x01	; 1
    2e02:	8e e2       	ldi	r24, 0x2E	; 46
    2e04:	97 e0       	ldi	r25, 0x07	; 7
    2e06:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN5Print5printEPKc>
			break;
		}
	}

	if(!isDateValid(te)){	//check date validity
    2e0a:	68 ee       	ldi	r22, 0xE8	; 232
    2e0c:	73 e0       	ldi	r23, 0x03	; 3
    2e0e:	80 e0       	ldi	r24, 0x00	; 0
    2e10:	90 e0       	ldi	r25, 0x00	; 0
    2e12:	0e 94 94 05 	call	0xb28	; 0xb28 <delay>

		lcd.setCursor(0,0);
    2e16:	40 e0       	ldi	r20, 0x00	; 0
    2e18:	60 e0       	ldi	r22, 0x00	; 0
    2e1a:	8e e2       	ldi	r24, 0x2E	; 46
    2e1c:	97 e0       	ldi	r25, 0x07	; 7
    2e1e:	c9 da       	rcall	.-2670   	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
		lcd.print("DATE NON VALIDE ");
    2e20:	6b ea       	ldi	r22, 0xAB	; 171
    2e22:	71 e0       	ldi	r23, 0x01	; 1
    2e24:	8e e2       	ldi	r24, 0x2E	; 46
    2e26:	97 e0       	ldi	r25, 0x07	; 7
    2e28:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN5Print5printEPKc>
		delay(1000);
    2e2c:	64 ef       	ldi	r22, 0xF4	; 244
    2e2e:	71 e0       	ldi	r23, 0x01	; 1
    2e30:	80 e0       	ldi	r24, 0x00	; 0
    2e32:	90 e0       	ldi	r25, 0x00	; 0
    2e34:	0e 94 94 05 	call	0xb28	; 0xb28 <delay>
		lcd.setCursor(0,0);
    2e38:	40 e0       	ldi	r20, 0x00	; 0
    2e3a:	60 e0       	ldi	r22, 0x00	; 0
    2e3c:	8e e2       	ldi	r24, 0x2E	; 46
    2e3e:	97 e0       	ldi	r25, 0x07	; 7
    2e40:	b8 da       	rcall	.-2704   	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    2e42:	6a e9       	ldi	r22, 0x9A	; 154
		lcd.print("                ");
    2e44:	71 e0       	ldi	r23, 0x01	; 1
    2e46:	8e e2       	ldi	r24, 0x2E	; 46
    2e48:	97 e0       	ldi	r25, 0x07	; 7
    2e4a:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN5Print5printEPKc>
    2e4e:	68 ee       	ldi	r22, 0xE8	; 232
		delay(500);
    2e50:	73 e0       	ldi	r23, 0x03	; 3
    2e52:	80 e0       	ldi	r24, 0x00	; 0
    2e54:	90 e0       	ldi	r25, 0x00	; 0
    2e56:	0e 94 94 05 	call	0xb28	; 0xb28 <delay>
    2e5a:	35 ce       	rjmp	.-918    	; 0x2ac6 <_Z9enterTimeP12tmElements_t+0x58>
		lcd.setCursor(0,0);
    2e5c:	4a e0       	ldi	r20, 0x0A	; 10
    2e5e:	50 e0       	ldi	r21, 0x00	; 0
    2e60:	6a 81       	ldd	r22, Y+2	; 0x02
    2e62:	8e e2       	ldi	r24, 0x2E	; 46
    2e64:	97 e0       	ldi	r25, 0x07	; 7
    2e66:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <_ZN5Print5printEhi>
		lcd.print("DATE NON VALIDE ");
    2e6a:	6a e3       	ldi	r22, 0x3A	; 58
    2e6c:	8e e2       	ldi	r24, 0x2E	; 46
    2e6e:	97 e0       	ldi	r25, 0x07	; 7
    2e70:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <_ZN5Print5printEc>
		delay(1000);
    2e74:	89 81       	ldd	r24, Y+1	; 0x01
    2e76:	8a 30       	cpi	r24, 0x0A	; 10
    2e78:	28 f4       	brcc	.+10     	; 0x2e84 <_Z9enterTimeP12tmElements_t+0x416>
    2e7a:	60 e3       	ldi	r22, 0x30	; 48
    2e7c:	8e e2       	ldi	r24, 0x2E	; 46
    2e7e:	97 e0       	ldi	r25, 0x07	; 7
		goto ENTER_DATE;
    2e80:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <_ZN5Print5printEc>
	lcd.setCursor(0,0);
	lcd.print("HEURE:          ");
	lcd.setCursor(0,1);
	if (te->Hour<10)
		lcd.print('0');
	lcd.print(te->Hour);
    2e84:	4a e0       	ldi	r20, 0x0A	; 10
    2e86:	50 e0       	ldi	r21, 0x00	; 0
    2e88:	69 81       	ldd	r22, Y+1	; 0x01
    2e8a:	8e e2       	ldi	r24, 0x2E	; 46
    2e8c:	97 e0       	ldi	r25, 0x07	; 7
    2e8e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <_ZN5Print5printEhi>
	lcd.print(':');
    2e92:	6a e3       	ldi	r22, 0x3A	; 58
    2e94:	8e e2       	ldi	r24, 0x2E	; 46
    2e96:	97 e0       	ldi	r25, 0x07	; 7
    2e98:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <_ZN5Print5printEc>
	if (te->Minute<10)
    2e9c:	88 81       	ld	r24, Y
    2e9e:	8a 30       	cpi	r24, 0x0A	; 10
		lcd.print('0');
    2ea0:	28 f4       	brcc	.+10     	; 0x2eac <_Z9enterTimeP12tmElements_t+0x43e>
    2ea2:	60 e3       	ldi	r22, 0x30	; 48
    2ea4:	8e e2       	ldi	r24, 0x2E	; 46
    2ea6:	97 e0       	ldi	r25, 0x07	; 7
    2ea8:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <_ZN5Print5printEc>
	lcd.print(te->Minute);
    2eac:	4a e0       	ldi	r20, 0x0A	; 10
    2eae:	50 e0       	ldi	r21, 0x00	; 0
    2eb0:	68 81       	ld	r22, Y
    2eb2:	8e e2       	ldi	r24, 0x2E	; 46
    2eb4:	97 e0       	ldi	r25, 0x07	; 7
    2eb6:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <_ZN5Print5printEhi>
	lcd.print(':');
    2eba:	63 eb       	ldi	r22, 0xB3	; 179
    2ebc:	71 e0       	ldi	r23, 0x01	; 1
    2ebe:	8e e2       	ldi	r24, 0x2E	; 46
    2ec0:	97 e0       	ldi	r25, 0x07	; 7
	if (te->Second<10)
    2ec2:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN5Print5printEPKc>
    2ec6:	64 ef       	ldi	r22, 0xF4	; 244
		lcd.print('0');
    2ec8:	71 e0       	ldi	r23, 0x01	; 1
    2eca:	80 e0       	ldi	r24, 0x00	; 0
    2ecc:	90 e0       	ldi	r25, 0x00	; 0
    2ece:	0e 94 94 05 	call	0xb28	; 0xb28 <delay>
	lcd.print(te->Second);
    2ed2:	f8 94       	cli
    2ed4:	80 91 3b 07 	lds	r24, 0x073B
    2ed8:	78 94       	sei
    2eda:	41 e0       	ldi	r20, 0x01	; 1
    2edc:	60 e0       	ldi	r22, 0x00	; 0
    2ede:	88 23       	and	r24, r24
	lcd.print("        ");
    2ee0:	09 f4       	brne	.+2      	; 0x2ee4 <_Z9enterTimeP12tmElements_t+0x476>
    2ee2:	14 c1       	rjmp	.+552    	; 0x310c <_Z9enterTimeP12tmElements_t+0x69e>
    2ee4:	8e e2       	ldi	r24, 0x2E	; 46
    2ee6:	97 e0       	ldi	r25, 0x07	; 7
    2ee8:	64 da       	rcall	.-2872   	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    2eea:	8a 81       	ldd	r24, Y+2	; 0x02
	while(1){
		delay(500);
    2eec:	8a 30       	cpi	r24, 0x0A	; 10
    2eee:	28 f4       	brcc	.+10     	; 0x2efa <_Z9enterTimeP12tmElements_t+0x48c>
    2ef0:	60 e3       	ldi	r22, 0x30	; 48
    2ef2:	8e e2       	ldi	r24, 0x2E	; 46
    2ef4:	97 e0       	ldi	r25, 0x07	; 7
    2ef6:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <_ZN5Print5printEc>
		noInterrupts();
		bool blinkCopy=blink;
    2efa:	4a e0       	ldi	r20, 0x0A	; 10
    2efc:	50 e0       	ldi	r21, 0x00	; 0
		interrupts();
    2efe:	6a 81       	ldd	r22, Y+2	; 0x02
		if (blinkCopy==1){
			lcd.setCursor(0,1);
    2f00:	8e e2       	ldi	r24, 0x2E	; 46
    2f02:	97 e0       	ldi	r25, 0x07	; 7
	while(1){
		delay(500);
		noInterrupts();
		bool blinkCopy=blink;
		interrupts();
		if (blinkCopy==1){
    2f04:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <_ZN5Print5printEhi>
    2f08:	81 e0       	ldi	r24, 0x01	; 1
			lcd.setCursor(0,1);
    2f0a:	0e 94 96 06 	call	0xd2c	; 0xd2c <digitalRead>
    2f0e:	89 2b       	or	r24, r25
    2f10:	09 f4       	brne	.+2      	; 0x2f14 <_Z9enterTimeP12tmElements_t+0x4a6>
			if (te->Hour<10)
    2f12:	06 c1       	rjmp	.+524    	; 0x3120 <_Z9enterTimeP12tmElements_t+0x6b2>
    2f14:	80 e0       	ldi	r24, 0x00	; 0
    2f16:	0e 94 96 06 	call	0xd2c	; 0xd2c <digitalRead>
				lcd.print('0');
    2f1a:	89 2b       	or	r24, r25
    2f1c:	09 f4       	brne	.+2      	; 0x2f20 <_Z9enterTimeP12tmElements_t+0x4b2>
    2f1e:	05 c1       	rjmp	.+522    	; 0x312a <_Z9enterTimeP12tmElements_t+0x6bc>
    2f20:	83 e0       	ldi	r24, 0x03	; 3
			lcd.print(te->Hour);
    2f22:	0e 94 96 06 	call	0xd2c	; 0xd2c <digitalRead>
    2f26:	89 2b       	or	r24, r25
    2f28:	71 f6       	brne	.-100    	; 0x2ec6 <_Z9enterTimeP12tmElements_t+0x458>
    2f2a:	41 e0       	ldi	r20, 0x01	; 1
    2f2c:	60 e0       	ldi	r22, 0x00	; 0
    2f2e:	8e e2       	ldi	r24, 0x2E	; 46
		}else{
			lcd.setCursor(0,1);
			lcd.print("  ");
		}
		if((!digitalRead(BPUP))&&te->Hour<23){
    2f30:	97 e0       	ldi	r25, 0x07	; 7
    2f32:	3f da       	rcall	.-2946   	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    2f34:	8a 81       	ldd	r24, Y+2	; 0x02
    2f36:	8a 30       	cpi	r24, 0x0A	; 10
    2f38:	28 f4       	brcc	.+10     	; 0x2f44 <_Z9enterTimeP12tmElements_t+0x4d6>
    2f3a:	60 e3       	ldi	r22, 0x30	; 48
			lcd.setCursor(0,1);
			if (te->Hour<10)
				lcd.print('0');
			lcd.print(te->Hour);
		}
		if((!digitalRead(BPDW))&&te->Hour>0){
    2f3c:	8e e2       	ldi	r24, 0x2E	; 46
    2f3e:	97 e0       	ldi	r25, 0x07	; 7
    2f40:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <_ZN5Print5printEc>
    2f44:	4a e0       	ldi	r20, 0x0A	; 10
    2f46:	50 e0       	ldi	r21, 0x00	; 0
			lcd.setCursor(0,1);
			if (te->Hour<10)
				lcd.print('0');
			lcd.print(te->Hour);
		}
		if(!digitalRead(BPOK)){
    2f48:	6a 81       	ldd	r22, Y+2	; 0x02
    2f4a:	8e e2       	ldi	r24, 0x2E	; 46
    2f4c:	97 e0       	ldi	r25, 0x07	; 7
    2f4e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <_ZN5Print5printEhi>
			lcd.setCursor(0,1);
    2f52:	64 ef       	ldi	r22, 0xF4	; 244
    2f54:	71 e0       	ldi	r23, 0x01	; 1
    2f56:	80 e0       	ldi	r24, 0x00	; 0
    2f58:	90 e0       	ldi	r25, 0x00	; 0
    2f5a:	0e 94 94 05 	call	0xb28	; 0xb28 <delay>
			if (te->Hour<10)
    2f5e:	f8 94       	cli
    2f60:	80 91 3b 07 	lds	r24, 0x073B
				lcd.print('0');
    2f64:	78 94       	sei
    2f66:	41 e0       	ldi	r20, 0x01	; 1
    2f68:	63 e0       	ldi	r22, 0x03	; 3
    2f6a:	88 23       	and	r24, r24
    2f6c:	09 f4       	brne	.+2      	; 0x2f70 <_Z9enterTimeP12tmElements_t+0x502>
			lcd.print(te->Hour);
    2f6e:	e1 c0       	rjmp	.+450    	; 0x3132 <_Z9enterTimeP12tmElements_t+0x6c4>
    2f70:	8e e2       	ldi	r24, 0x2E	; 46
    2f72:	97 e0       	ldi	r25, 0x07	; 7
    2f74:	1e da       	rcall	.-3012   	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    2f76:	89 81       	ldd	r24, Y+1	; 0x01
    2f78:	8a 30       	cpi	r24, 0x0A	; 10
    2f7a:	28 f4       	brcc	.+10     	; 0x2f86 <_Z9enterTimeP12tmElements_t+0x518>
			break;
		}
	}
	while(1){
		delay(500);
    2f7c:	60 e3       	ldi	r22, 0x30	; 48
    2f7e:	8e e2       	ldi	r24, 0x2E	; 46
    2f80:	97 e0       	ldi	r25, 0x07	; 7
    2f82:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <_ZN5Print5printEc>
    2f86:	4a e0       	ldi	r20, 0x0A	; 10
		noInterrupts();
    2f88:	50 e0       	ldi	r21, 0x00	; 0
		bool blinkCopy=blink;
    2f8a:	69 81       	ldd	r22, Y+1	; 0x01
    2f8c:	8e e2       	ldi	r24, 0x2E	; 46
		interrupts();
    2f8e:	97 e0       	ldi	r25, 0x07	; 7
		if (blinkCopy==1){
			lcd.setCursor(3,1);
    2f90:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <_ZN5Print5printEhi>
	while(1){
		delay(500);
		noInterrupts();
		bool blinkCopy=blink;
		interrupts();
		if (blinkCopy==1){
    2f94:	81 e0       	ldi	r24, 0x01	; 1
    2f96:	0e 94 96 06 	call	0xd2c	; 0xd2c <digitalRead>
			lcd.setCursor(3,1);
    2f9a:	89 2b       	or	r24, r25
    2f9c:	09 f4       	brne	.+2      	; 0x2fa0 <_Z9enterTimeP12tmElements_t+0x532>
    2f9e:	d3 c0       	rjmp	.+422    	; 0x3146 <_Z9enterTimeP12tmElements_t+0x6d8>
    2fa0:	80 e0       	ldi	r24, 0x00	; 0
			if (te->Minute<10)
    2fa2:	0e 94 96 06 	call	0xd2c	; 0xd2c <digitalRead>
    2fa6:	89 2b       	or	r24, r25
				lcd.print('0');
    2fa8:	09 f4       	brne	.+2      	; 0x2fac <_Z9enterTimeP12tmElements_t+0x53e>
    2faa:	d2 c0       	rjmp	.+420    	; 0x3150 <_Z9enterTimeP12tmElements_t+0x6e2>
    2fac:	83 e0       	ldi	r24, 0x03	; 3
    2fae:	0e 94 96 06 	call	0xd2c	; 0xd2c <digitalRead>
			lcd.print(te->Minute);
    2fb2:	89 2b       	or	r24, r25
    2fb4:	71 f6       	brne	.-100    	; 0x2f52 <_Z9enterTimeP12tmElements_t+0x4e4>
    2fb6:	41 e0       	ldi	r20, 0x01	; 1
    2fb8:	63 e0       	ldi	r22, 0x03	; 3
    2fba:	8e e2       	ldi	r24, 0x2E	; 46
    2fbc:	97 e0       	ldi	r25, 0x07	; 7
    2fbe:	f9 d9       	rcall	.-3086   	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
		}else{
			lcd.setCursor(3,1);
			lcd.print("  ");
		}
		if((!digitalRead(BPUP))&&te->Minute<59){
    2fc0:	89 81       	ldd	r24, Y+1	; 0x01
    2fc2:	8a 30       	cpi	r24, 0x0A	; 10
    2fc4:	28 f4       	brcc	.+10     	; 0x2fd0 <_Z9enterTimeP12tmElements_t+0x562>
    2fc6:	60 e3       	ldi	r22, 0x30	; 48
    2fc8:	8e e2       	ldi	r24, 0x2E	; 46
    2fca:	97 e0       	ldi	r25, 0x07	; 7
			lcd.setCursor(3,1);
			if (te->Minute<10)
				lcd.print('0');
			lcd.print(te->Minute);
		}
		if((!digitalRead(BPDW))&&te->Minute>0){
    2fcc:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <_ZN5Print5printEc>
    2fd0:	4a e0       	ldi	r20, 0x0A	; 10
    2fd2:	50 e0       	ldi	r21, 0x00	; 0
    2fd4:	69 81       	ldd	r22, Y+1	; 0x01
    2fd6:	8e e2       	ldi	r24, 0x2E	; 46
			lcd.setCursor(3,1);
			if (te->Minute<10)
				lcd.print('0');
			lcd.print(te->Minute);
		}
		if(!digitalRead(BPOK)){
    2fd8:	97 e0       	ldi	r25, 0x07	; 7
    2fda:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <_ZN5Print5printEhi>
    2fde:	64 ef       	ldi	r22, 0xF4	; 244
    2fe0:	71 e0       	ldi	r23, 0x01	; 1
			lcd.setCursor(3,1);
    2fe2:	80 e0       	ldi	r24, 0x00	; 0
    2fe4:	90 e0       	ldi	r25, 0x00	; 0
    2fe6:	0e 94 94 05 	call	0xb28	; 0xb28 <delay>
    2fea:	f8 94       	cli
    2fec:	80 91 3b 07 	lds	r24, 0x073B
			if (te->Minute<10)
    2ff0:	78 94       	sei
    2ff2:	41 e0       	ldi	r20, 0x01	; 1
				lcd.print('0');
    2ff4:	66 e0       	ldi	r22, 0x06	; 6
    2ff6:	88 23       	and	r24, r24
    2ff8:	09 f4       	brne	.+2      	; 0x2ffc <_Z9enterTimeP12tmElements_t+0x58e>
    2ffa:	ae c0       	rjmp	.+348    	; 0x3158 <_Z9enterTimeP12tmElements_t+0x6ea>
    2ffc:	8e e2       	ldi	r24, 0x2E	; 46
			lcd.print(te->Minute);
    2ffe:	97 e0       	ldi	r25, 0x07	; 7
    3000:	d8 d9       	rcall	.-3152   	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    3002:	88 81       	ld	r24, Y
    3004:	8a 30       	cpi	r24, 0x0A	; 10
    3006:	28 f4       	brcc	.+10     	; 0x3012 <_Z9enterTimeP12tmElements_t+0x5a4>
    3008:	60 e3       	ldi	r22, 0x30	; 48
    300a:	8e e2       	ldi	r24, 0x2E	; 46
			break;
		}
	}
	while(1){
		delay(500);
    300c:	97 e0       	ldi	r25, 0x07	; 7
    300e:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <_ZN5Print5printEc>
    3012:	4a e0       	ldi	r20, 0x0A	; 10
    3014:	50 e0       	ldi	r21, 0x00	; 0
    3016:	68 81       	ld	r22, Y
		noInterrupts();
    3018:	8e e2       	ldi	r24, 0x2E	; 46
		bool blinkCopy=blink;
    301a:	97 e0       	ldi	r25, 0x07	; 7
    301c:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <_ZN5Print5printEhi>
		interrupts();
		if (blinkCopy==1){
			lcd.setCursor(6,1);
    3020:	81 e0       	ldi	r24, 0x01	; 1
    3022:	0e 94 96 06 	call	0xd2c	; 0xd2c <digitalRead>
	while(1){
		delay(500);
		noInterrupts();
		bool blinkCopy=blink;
		interrupts();
		if (blinkCopy==1){
    3026:	89 2b       	or	r24, r25
    3028:	09 f4       	brne	.+2      	; 0x302c <_Z9enterTimeP12tmElements_t+0x5be>
			lcd.setCursor(6,1);
    302a:	a0 c0       	rjmp	.+320    	; 0x316c <_Z9enterTimeP12tmElements_t+0x6fe>
    302c:	80 e0       	ldi	r24, 0x00	; 0
    302e:	0e 94 96 06 	call	0xd2c	; 0xd2c <digitalRead>
			if (te->Second<10)
    3032:	89 2b       	or	r24, r25
    3034:	09 f4       	brne	.+2      	; 0x3038 <_Z9enterTimeP12tmElements_t+0x5ca>
    3036:	9f c0       	rjmp	.+318    	; 0x3176 <_Z9enterTimeP12tmElements_t+0x708>
				lcd.print('0');
    3038:	83 e0       	ldi	r24, 0x03	; 3
    303a:	0e 94 96 06 	call	0xd2c	; 0xd2c <digitalRead>
    303e:	89 2b       	or	r24, r25
    3040:	71 f6       	brne	.-100    	; 0x2fde <_Z9enterTimeP12tmElements_t+0x570>
			lcd.print(te->Second);
    3042:	41 e0       	ldi	r20, 0x01	; 1
    3044:	66 e0       	ldi	r22, 0x06	; 6
    3046:	8e e2       	ldi	r24, 0x2E	; 46
    3048:	97 e0       	ldi	r25, 0x07	; 7
    304a:	b3 d9       	rcall	.-3226   	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    304c:	88 81       	ld	r24, Y
    304e:	8a 30       	cpi	r24, 0x0A	; 10
		}else{
			lcd.setCursor(6,1);
			lcd.print("  ");
		}
		if((!digitalRead(BPUP))&&te->Second<59){
    3050:	28 f4       	brcc	.+10     	; 0x305c <_Z9enterTimeP12tmElements_t+0x5ee>
    3052:	60 e3       	ldi	r22, 0x30	; 48
    3054:	8e e2       	ldi	r24, 0x2E	; 46
    3056:	97 e0       	ldi	r25, 0x07	; 7
    3058:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <_ZN5Print5printEc>
			lcd.setCursor(6,1);
			if (te->Second<10)
				lcd.print('0');
			lcd.print(te->Second);
		}
		if((!digitalRead(BPDW))&&te->Second>0){
    305c:	4a e0       	ldi	r20, 0x0A	; 10
    305e:	50 e0       	ldi	r21, 0x00	; 0
    3060:	68 81       	ld	r22, Y
    3062:	8e e2       	ldi	r24, 0x2E	; 46
    3064:	97 e0       	ldi	r25, 0x07	; 7
    3066:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <_ZN5Print5printEhi>
			lcd.setCursor(6,1);
			if (te->Second<10)
				lcd.print('0');
			lcd.print(te->Second);
		}
		if(!digitalRead(BPOK)){
    306a:	ce 01       	movw	r24, r28
    306c:	d2 dc       	rcall	.-1628   	; 0x2a12 <_Z11isDateValidP12tmElements_t>
    306e:	81 11       	cpse	r24, r1
    3070:	86 c0       	rjmp	.+268    	; 0x317e <_Z9enterTimeP12tmElements_t+0x710>
			lcd.setCursor(6,1);
    3072:	40 e0       	ldi	r20, 0x00	; 0
    3074:	60 e0       	ldi	r22, 0x00	; 0
    3076:	8e e2       	ldi	r24, 0x2E	; 46
    3078:	97 e0       	ldi	r25, 0x07	; 7
    307a:	9b d9       	rcall	.-3274   	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    307c:	6d ec       	ldi	r22, 0xCD	; 205
			if (te->Second<10)
    307e:	71 e0       	ldi	r23, 0x01	; 1
    3080:	8e e2       	ldi	r24, 0x2E	; 46
    3082:	97 e0       	ldi	r25, 0x07	; 7
				lcd.print('0');
    3084:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN5Print5printEPKc>
    3088:	68 ee       	ldi	r22, 0xE8	; 232
    308a:	73 e0       	ldi	r23, 0x03	; 3
    308c:	80 e0       	ldi	r24, 0x00	; 0
			lcd.print(te->Second);
    308e:	90 e0       	ldi	r25, 0x00	; 0
    3090:	0e 94 94 05 	call	0xb28	; 0xb28 <delay>
    3094:	40 e0       	ldi	r20, 0x00	; 0
    3096:	60 e0       	ldi	r22, 0x00	; 0
    3098:	8e e2       	ldi	r24, 0x2E	; 46
    309a:	97 e0       	ldi	r25, 0x07	; 7
			break;
		}
	}

	if(!isDateValid(te)){	//check date validity
    309c:	8a d9       	rcall	.-3308   	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    309e:	6b ea       	ldi	r22, 0xAB	; 171
    30a0:	71 e0       	ldi	r23, 0x01	; 1
    30a2:	8e e2       	ldi	r24, 0x2E	; 46
    30a4:	97 e0       	ldi	r25, 0x07	; 7

		lcd.setCursor(0,0);
    30a6:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN5Print5printEPKc>
    30aa:	64 ef       	ldi	r22, 0xF4	; 244
    30ac:	71 e0       	ldi	r23, 0x01	; 1
    30ae:	80 e0       	ldi	r24, 0x00	; 0
    30b0:	90 e0       	ldi	r25, 0x00	; 0
		lcd.print("HEURE NON VALIDE");
    30b2:	0e 94 94 05 	call	0xb28	; 0xb28 <delay>
    30b6:	40 e0       	ldi	r20, 0x00	; 0
    30b8:	60 e0       	ldi	r22, 0x00	; 0
    30ba:	8e e2       	ldi	r24, 0x2E	; 46
    30bc:	97 e0       	ldi	r25, 0x07	; 7
		delay(1000);
    30be:	79 d9       	rcall	.-3342   	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    30c0:	6d ec       	ldi	r22, 0xCD	; 205
    30c2:	71 e0       	ldi	r23, 0x01	; 1
    30c4:	8e e2       	ldi	r24, 0x2E	; 46
    30c6:	97 e0       	ldi	r25, 0x07	; 7
    30c8:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN5Print5printEPKc>
		lcd.setCursor(0,0);
    30cc:	68 ee       	ldi	r22, 0xE8	; 232
    30ce:	73 e0       	ldi	r23, 0x03	; 3
    30d0:	80 e0       	ldi	r24, 0x00	; 0
    30d2:	90 e0       	ldi	r25, 0x00	; 0
    30d4:	0e 94 94 05 	call	0xb28	; 0xb28 <delay>
		lcd.print("                ");
    30d8:	40 e0       	ldi	r20, 0x00	; 0
    30da:	60 e0       	ldi	r22, 0x00	; 0
    30dc:	8e e2       	ldi	r24, 0x2E	; 46
    30de:	97 e0       	ldi	r25, 0x07	; 7
    30e0:	68 d9       	rcall	.-3376   	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
		delay(500);
    30e2:	6c eb       	ldi	r22, 0xBC	; 188
    30e4:	71 e0       	ldi	r23, 0x01	; 1
    30e6:	8e e2       	ldi	r24, 0x2E	; 46
    30e8:	97 e0       	ldi	r25, 0x07	; 7
    30ea:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN5Print5printEPKc>
		lcd.setCursor(0,0);
    30ee:	41 e0       	ldi	r20, 0x01	; 1
    30f0:	60 e0       	ldi	r22, 0x00	; 0
    30f2:	8e e2       	ldi	r24, 0x2E	; 46
    30f4:	97 e0       	ldi	r25, 0x07	; 7
    30f6:	5d d9       	rcall	.-3398   	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    30f8:	8a 81       	ldd	r24, Y+2	; 0x02
		lcd.print("HEURE NON VALIDE");
    30fa:	8a 30       	cpi	r24, 0x0A	; 10
    30fc:	08 f0       	brcs	.+2      	; 0x3100 <_Z9enterTimeP12tmElements_t+0x692>
    30fe:	ae ce       	rjmp	.-676    	; 0x2e5c <_Z9enterTimeP12tmElements_t+0x3ee>
    3100:	60 e3       	ldi	r22, 0x30	; 48
    3102:	8e e2       	ldi	r24, 0x2E	; 46
    3104:	97 e0       	ldi	r25, 0x07	; 7
		delay(1000);
    3106:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <_ZN5Print5printEc>
    310a:	a8 ce       	rjmp	.-688    	; 0x2e5c <_Z9enterTimeP12tmElements_t+0x3ee>
    310c:	8e e2       	ldi	r24, 0x2E	; 46
    310e:	97 e0       	ldi	r25, 0x07	; 7
    3110:	50 d9       	rcall	.-3424   	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
		delay(1000);
		goto ENTER_DATE;
	}

ENTER_TIME:
	lcd.setCursor(0,0);
    3112:	69 eb       	ldi	r22, 0xB9	; 185
    3114:	71 e0       	ldi	r23, 0x01	; 1
    3116:	8e e2       	ldi	r24, 0x2E	; 46
    3118:	97 e0       	ldi	r25, 0x07	; 7
    311a:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN5Print5printEPKc>
	lcd.print("HEURE:          ");
    311e:	f4 ce       	rjmp	.-536    	; 0x2f08 <_Z9enterTimeP12tmElements_t+0x49a>
    3120:	8a 81       	ldd	r24, Y+2	; 0x02
    3122:	87 31       	cpi	r24, 0x17	; 23
    3124:	08 f4       	brcc	.+2      	; 0x3128 <_Z9enterTimeP12tmElements_t+0x6ba>
    3126:	57 c0       	rjmp	.+174    	; 0x31d6 <_Z9enterTimeP12tmElements_t+0x768>
    3128:	f5 ce       	rjmp	.-534    	; 0x2f14 <_Z9enterTimeP12tmElements_t+0x4a6>
	lcd.setCursor(0,1);
    312a:	8a 81       	ldd	r24, Y+2	; 0x02
    312c:	81 11       	cpse	r24, r1
    312e:	6a c0       	rjmp	.+212    	; 0x3204 <_Z9enterTimeP12tmElements_t+0x796>
    3130:	f7 ce       	rjmp	.-530    	; 0x2f20 <_Z9enterTimeP12tmElements_t+0x4b2>
    3132:	8e e2       	ldi	r24, 0x2E	; 46
    3134:	97 e0       	ldi	r25, 0x07	; 7
	if (te->Hour<10)
    3136:	3d d9       	rcall	.-3462   	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    3138:	69 eb       	ldi	r22, 0xB9	; 185
    313a:	71 e0       	ldi	r23, 0x01	; 1
    313c:	8e e2       	ldi	r24, 0x2E	; 46
		lcd.print('0');
    313e:	97 e0       	ldi	r25, 0x07	; 7
    3140:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN5Print5printEPKc>
    3144:	27 cf       	rjmp	.-434    	; 0x2f94 <_Z9enterTimeP12tmElements_t+0x526>
    3146:	89 81       	ldd	r24, Y+1	; 0x01
    3148:	8b 33       	cpi	r24, 0x3B	; 59
			lcd.setCursor(0,1);
			if (te->Hour<10)
				lcd.print('0');
			lcd.print(te->Hour);
		}else{
			lcd.setCursor(0,1);
    314a:	08 f4       	brcc	.+2      	; 0x314e <_Z9enterTimeP12tmElements_t+0x6e0>
    314c:	72 c0       	rjmp	.+228    	; 0x3232 <_Z9enterTimeP12tmElements_t+0x7c4>
    314e:	28 cf       	rjmp	.-432    	; 0x2fa0 <_Z9enterTimeP12tmElements_t+0x532>
    3150:	89 81       	ldd	r24, Y+1	; 0x01
			lcd.print("  ");
    3152:	81 11       	cpse	r24, r1
    3154:	85 c0       	rjmp	.+266    	; 0x3260 <_Z9enterTimeP12tmElements_t+0x7f2>
    3156:	2a cf       	rjmp	.-428    	; 0x2fac <_Z9enterTimeP12tmElements_t+0x53e>
    3158:	8e e2       	ldi	r24, 0x2E	; 46
    315a:	97 e0       	ldi	r25, 0x07	; 7
    315c:	2a d9       	rcall	.-3500   	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    315e:	69 eb       	ldi	r22, 0xB9	; 185
		}
		if((!digitalRead(BPUP))&&te->Hour<23){
    3160:	71 e0       	ldi	r23, 0x01	; 1
    3162:	8e e2       	ldi	r24, 0x2E	; 46
    3164:	97 e0       	ldi	r25, 0x07	; 7
    3166:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN5Print5printEPKc>
			lcd.setCursor(0,1);
			if (te->Hour<10)
				lcd.print('0');
			lcd.print(te->Hour);
		}
		if((!digitalRead(BPDW))&&te->Hour>0){
    316a:	5a cf       	rjmp	.-332    	; 0x3020 <_Z9enterTimeP12tmElements_t+0x5b2>
    316c:	88 81       	ld	r24, Y
    316e:	8b 33       	cpi	r24, 0x3B	; 59
    3170:	08 f4       	brcc	.+2      	; 0x3174 <_Z9enterTimeP12tmElements_t+0x706>
			lcd.setCursor(3,1);
			if (te->Minute<10)
				lcd.print('0');
			lcd.print(te->Minute);
		}else{
			lcd.setCursor(3,1);
    3172:	8d c0       	rjmp	.+282    	; 0x328e <_Z9enterTimeP12tmElements_t+0x820>
    3174:	5b cf       	rjmp	.-330    	; 0x302c <_Z9enterTimeP12tmElements_t+0x5be>
    3176:	88 81       	ld	r24, Y
    3178:	81 11       	cpse	r24, r1
			lcd.print("  ");
    317a:	a0 c0       	rjmp	.+320    	; 0x32bc <_Z9enterTimeP12tmElements_t+0x84e>
    317c:	5d cf       	rjmp	.-326    	; 0x3038 <_Z9enterTimeP12tmElements_t+0x5ca>
    317e:	80 e1       	ldi	r24, 0x10	; 16
    3180:	80 93 81 00 	sts	0x0081, r24
    3184:	10 92 6f 00 	sts	0x006F, r1
		}
		if((!digitalRead(BPUP))&&te->Minute<59){
    3188:	df 91       	pop	r29
    318a:	cf 91       	pop	r28
    318c:	08 95       	ret
    318e:	8f 5f       	subi	r24, 0xFF	; 255
    3190:	8e 83       	std	Y+6, r24	; 0x06
			lcd.setCursor(3,1);
			if (te->Minute<10)
				lcd.print('0');
			lcd.print(te->Minute);
		}
		if((!digitalRead(BPDW))&&te->Minute>0){
    3192:	41 e0       	ldi	r20, 0x01	; 1
    3194:	66 e0       	ldi	r22, 0x06	; 6
    3196:	8e e2       	ldi	r24, 0x2E	; 46
    3198:	97 e0       	ldi	r25, 0x07	; 7
			lcd.setCursor(6,1);
			if (te->Second<10)
				lcd.print('0');
			lcd.print(te->Second);
		}else{
			lcd.setCursor(6,1);
    319a:	0b d9       	rcall	.-3562   	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    319c:	6e 81       	ldd	r22, Y+6	; 0x06
    319e:	70 e0       	ldi	r23, 0x00	; 0
    31a0:	6e 54       	subi	r22, 0x4E	; 78
			lcd.print("  ");
    31a2:	78 4f       	sbci	r23, 0xF8	; 248
    31a4:	4a e0       	ldi	r20, 0x0A	; 10
    31a6:	50 e0       	ldi	r21, 0x00	; 0
    31a8:	8e e2       	ldi	r24, 0x2E	; 46
    31aa:	97 e0       	ldi	r25, 0x07	; 7
    31ac:	0e 94 80 03 	call	0x700	; 0x700 <_ZN5Print5printEji>
		}
		if((!digitalRead(BPUP))&&te->Second<59){
    31b0:	00 ce       	rjmp	.-1024   	; 0x2db2 <_Z9enterTimeP12tmElements_t+0x344>
    31b2:	81 50       	subi	r24, 0x01	; 1
    31b4:	8e 83       	std	Y+6, r24	; 0x06
    31b6:	41 e0       	ldi	r20, 0x01	; 1
    31b8:	66 e0       	ldi	r22, 0x06	; 6
    31ba:	8e e2       	ldi	r24, 0x2E	; 46
    31bc:	97 e0       	ldi	r25, 0x07	; 7
    31be:	f9 d8       	rcall	.-3598   	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    31c0:	6e 81       	ldd	r22, Y+6	; 0x06
	TCCR1B = 0;
	TCNT1 = 0;		// TODO: does this cause an undesired interrupt?
	resume();
    }
    void stop() __attribute__((always_inline)) {
	TCCR1B = _BV(WGM13);
    31c2:	70 e0       	ldi	r23, 0x00	; 0
    31c4:	6e 54       	subi	r22, 0x4E	; 78
    31c6:	78 4f       	sbci	r23, 0xF8	; 248
    31c8:	4a e0       	ldi	r20, 0x0A	; 10
    31ca:	50 e0       	ldi	r21, 0x00	; 0

WRAP_UP:
	Timer1.stop();
	Timer1.detachInterrupt();

}
    31cc:	8e e2       	ldi	r24, 0x2E	; 46
    31ce:	97 e0       	ldi	r25, 0x07	; 7
    31d0:	0e 94 80 03 	call	0x700	; 0x700 <_ZN5Print5printEji>
		}else{
			lcd.setCursor(6,1);
			lcd.print("    ");
		}
		if((!digitalRead(BPUP))&&(te->Year<254)){
			te->Year+=1;
    31d4:	f6 cd       	rjmp	.-1044   	; 0x2dc2 <_Z9enterTimeP12tmElements_t+0x354>
			lcd.setCursor(6,1);
    31d6:	8f 5f       	subi	r24, 0xFF	; 255
    31d8:	8a 83       	std	Y+2, r24	; 0x02
    31da:	41 e0       	ldi	r20, 0x01	; 1
    31dc:	60 e0       	ldi	r22, 0x00	; 0
    31de:	8e e2       	ldi	r24, 0x2E	; 46
    31e0:	97 e0       	ldi	r25, 0x07	; 7
			lcd.print(uint16_t(te->Year)+1970);
    31e2:	e7 d8       	rcall	.-3634   	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    31e4:	8a 81       	ldd	r24, Y+2	; 0x02
    31e6:	8a 30       	cpi	r24, 0x0A	; 10
    31e8:	28 f4       	brcc	.+10     	; 0x31f4 <_Z9enterTimeP12tmElements_t+0x786>
    31ea:	60 e3       	ldi	r22, 0x30	; 48
    31ec:	8e e2       	ldi	r24, 0x2E	; 46
    31ee:	97 e0       	ldi	r25, 0x07	; 7
    31f0:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <_ZN5Print5printEc>
    31f4:	4a e0       	ldi	r20, 0x0A	; 10
    31f6:	50 e0       	ldi	r21, 0x00	; 0
		}
		if((!digitalRead(BPDW))&&(te->Year>0)){
			te->Year-=1;
    31f8:	6a 81       	ldd	r22, Y+2	; 0x02
    31fa:	8e e2       	ldi	r24, 0x2E	; 46
			lcd.setCursor(6,1);
    31fc:	97 e0       	ldi	r25, 0x07	; 7
    31fe:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <_ZN5Print5printEhi>
    3202:	88 ce       	rjmp	.-752    	; 0x2f14 <_Z9enterTimeP12tmElements_t+0x4a6>
    3204:	81 50       	subi	r24, 0x01	; 1
    3206:	8a 83       	std	Y+2, r24	; 0x02
			lcd.print(uint16_t(te->Year)+1970);
    3208:	41 e0       	ldi	r20, 0x01	; 1
    320a:	60 e0       	ldi	r22, 0x00	; 0
    320c:	8e e2       	ldi	r24, 0x2E	; 46
    320e:	97 e0       	ldi	r25, 0x07	; 7
    3210:	d0 d8       	rcall	.-3680   	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    3212:	8a 81       	ldd	r24, Y+2	; 0x02
    3214:	8a 30       	cpi	r24, 0x0A	; 10
    3216:	28 f4       	brcc	.+10     	; 0x3222 <_Z9enterTimeP12tmElements_t+0x7b4>
    3218:	60 e3       	ldi	r22, 0x30	; 48
    321a:	8e e2       	ldi	r24, 0x2E	; 46
    321c:	97 e0       	ldi	r25, 0x07	; 7
		}else{
			lcd.setCursor(0,1);
			lcd.print("  ");
		}
		if((!digitalRead(BPUP))&&te->Hour<23){
			te->Hour+=1;
    321e:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <_ZN5Print5printEc>
			lcd.setCursor(0,1);
    3222:	4a e0       	ldi	r20, 0x0A	; 10
    3224:	50 e0       	ldi	r21, 0x00	; 0
    3226:	6a 81       	ldd	r22, Y+2	; 0x02
    3228:	8e e2       	ldi	r24, 0x2E	; 46
    322a:	97 e0       	ldi	r25, 0x07	; 7
    322c:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <_ZN5Print5printEhi>
			if (te->Hour<10)
    3230:	77 ce       	rjmp	.-786    	; 0x2f20 <_Z9enterTimeP12tmElements_t+0x4b2>
    3232:	8f 5f       	subi	r24, 0xFF	; 255
				lcd.print('0');
    3234:	89 83       	std	Y+1, r24	; 0x01
    3236:	41 e0       	ldi	r20, 0x01	; 1
    3238:	63 e0       	ldi	r22, 0x03	; 3
    323a:	8e e2       	ldi	r24, 0x2E	; 46
    323c:	97 e0       	ldi	r25, 0x07	; 7
			lcd.print(te->Hour);
    323e:	b9 d8       	rcall	.-3726   	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    3240:	89 81       	ldd	r24, Y+1	; 0x01
    3242:	8a 30       	cpi	r24, 0x0A	; 10
    3244:	28 f4       	brcc	.+10     	; 0x3250 <_Z9enterTimeP12tmElements_t+0x7e2>
    3246:	60 e3       	ldi	r22, 0x30	; 48
    3248:	8e e2       	ldi	r24, 0x2E	; 46
    324a:	97 e0       	ldi	r25, 0x07	; 7
    324c:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <_ZN5Print5printEc>
		}
		if((!digitalRead(BPDW))&&te->Hour>0){
			te->Hour-=1;
    3250:	4a e0       	ldi	r20, 0x0A	; 10
			lcd.setCursor(0,1);
    3252:	50 e0       	ldi	r21, 0x00	; 0
    3254:	69 81       	ldd	r22, Y+1	; 0x01
    3256:	8e e2       	ldi	r24, 0x2E	; 46
    3258:	97 e0       	ldi	r25, 0x07	; 7
    325a:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <_ZN5Print5printEhi>
			if (te->Hour<10)
    325e:	a0 ce       	rjmp	.-704    	; 0x2fa0 <_Z9enterTimeP12tmElements_t+0x532>
    3260:	81 50       	subi	r24, 0x01	; 1
    3262:	89 83       	std	Y+1, r24	; 0x01
				lcd.print('0');
    3264:	41 e0       	ldi	r20, 0x01	; 1
    3266:	63 e0       	ldi	r22, 0x03	; 3
    3268:	8e e2       	ldi	r24, 0x2E	; 46
    326a:	97 e0       	ldi	r25, 0x07	; 7
    326c:	a2 d8       	rcall	.-3772   	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.print(te->Hour);
    326e:	89 81       	ldd	r24, Y+1	; 0x01
    3270:	8a 30       	cpi	r24, 0x0A	; 10
    3272:	28 f4       	brcc	.+10     	; 0x327e <_Z9enterTimeP12tmElements_t+0x810>
    3274:	60 e3       	ldi	r22, 0x30	; 48
    3276:	8e e2       	ldi	r24, 0x2E	; 46
    3278:	97 e0       	ldi	r25, 0x07	; 7
    327a:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <_ZN5Print5printEc>
		}else{
			lcd.setCursor(3,1);
			lcd.print("  ");
		}
		if((!digitalRead(BPUP))&&te->Minute<59){
			te->Minute+=1;
    327e:	4a e0       	ldi	r20, 0x0A	; 10
    3280:	50 e0       	ldi	r21, 0x00	; 0
			lcd.setCursor(3,1);
    3282:	69 81       	ldd	r22, Y+1	; 0x01
    3284:	8e e2       	ldi	r24, 0x2E	; 46
    3286:	97 e0       	ldi	r25, 0x07	; 7
    3288:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <_ZN5Print5printEhi>
    328c:	8f ce       	rjmp	.-738    	; 0x2fac <_Z9enterTimeP12tmElements_t+0x53e>
			if (te->Minute<10)
    328e:	8f 5f       	subi	r24, 0xFF	; 255
    3290:	88 83       	st	Y, r24
    3292:	41 e0       	ldi	r20, 0x01	; 1
				lcd.print('0');
    3294:	66 e0       	ldi	r22, 0x06	; 6
    3296:	8e e2       	ldi	r24, 0x2E	; 46
    3298:	97 e0       	ldi	r25, 0x07	; 7
    329a:	8b d8       	rcall	.-3818   	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    329c:	88 81       	ld	r24, Y
			lcd.print(te->Minute);
    329e:	8a 30       	cpi	r24, 0x0A	; 10
    32a0:	28 f4       	brcc	.+10     	; 0x32ac <_Z9enterTimeP12tmElements_t+0x83e>
    32a2:	60 e3       	ldi	r22, 0x30	; 48
    32a4:	8e e2       	ldi	r24, 0x2E	; 46
    32a6:	97 e0       	ldi	r25, 0x07	; 7
    32a8:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <_ZN5Print5printEc>
    32ac:	4a e0       	ldi	r20, 0x0A	; 10
		}
		if((!digitalRead(BPDW))&&te->Minute>0){
			te->Minute-=1;
    32ae:	50 e0       	ldi	r21, 0x00	; 0
    32b0:	68 81       	ld	r22, Y
			lcd.setCursor(3,1);
    32b2:	8e e2       	ldi	r24, 0x2E	; 46
    32b4:	97 e0       	ldi	r25, 0x07	; 7
    32b6:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <_ZN5Print5printEhi>
    32ba:	b8 ce       	rjmp	.-656    	; 0x302c <_Z9enterTimeP12tmElements_t+0x5be>
    32bc:	81 50       	subi	r24, 0x01	; 1
			if (te->Minute<10)
    32be:	88 83       	st	Y, r24
    32c0:	41 e0       	ldi	r20, 0x01	; 1
    32c2:	66 e0       	ldi	r22, 0x06	; 6
				lcd.print('0');
    32c4:	8e e2       	ldi	r24, 0x2E	; 46
    32c6:	97 e0       	ldi	r25, 0x07	; 7
    32c8:	74 d8       	rcall	.-3864   	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    32ca:	88 81       	ld	r24, Y
    32cc:	8a 30       	cpi	r24, 0x0A	; 10
			lcd.print(te->Minute);
    32ce:	28 f4       	brcc	.+10     	; 0x32da <_Z9enterTimeP12tmElements_t+0x86c>
    32d0:	60 e3       	ldi	r22, 0x30	; 48
    32d2:	8e e2       	ldi	r24, 0x2E	; 46
    32d4:	97 e0       	ldi	r25, 0x07	; 7
    32d6:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <_ZN5Print5printEc>
    32da:	4a e0       	ldi	r20, 0x0A	; 10
    32dc:	50 e0       	ldi	r21, 0x00	; 0
		}else{
			lcd.setCursor(6,1);
			lcd.print("  ");
		}
		if((!digitalRead(BPUP))&&te->Second<59){
			te->Second+=1;
    32de:	68 81       	ld	r22, Y
    32e0:	8e e2       	ldi	r24, 0x2E	; 46
			lcd.setCursor(6,1);
    32e2:	97 e0       	ldi	r25, 0x07	; 7
    32e4:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <_ZN5Print5printEhi>
    32e8:	a7 ce       	rjmp	.-690    	; 0x3038 <_Z9enterTimeP12tmElements_t+0x5ca>

000032ea <_GLOBAL__sub_I_timeToGo>:



//SDconfig : set up variables using the SD utility library functions:
const uint8_t SDchipSelect = 10;
const String LogFileName = "moulog.txt";
    32ea:	68 ee       	ldi	r22, 0xE8	; 232
    32ec:	71 e0       	ldi	r23, 0x01	; 1
    32ee:	84 e4       	ldi	r24, 0x44	; 68
    32f0:	97 e0       	ldi	r25, 0x07	; 7
    32f2:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <_ZN6StringC1EPKc>
//timer1config
volatile bool blink=0;
volatile uint8_t blinkCount=0;

//lcd_I2C config
LiquidCrystal_I2C lcd(0x27,16,2);
    32f6:	22 e0       	ldi	r18, 0x02	; 2
    32f8:	40 e1       	ldi	r20, 0x10	; 16
    32fa:	67 e2       	ldi	r22, 0x27	; 39
    32fc:	8e e2       	ldi	r24, 0x2E	; 46
    32fe:	97 e0       	ldi	r25, 0x07	; 7
    3300:	0c 94 5d 11 	jmp	0x22ba	; 0x22ba <_ZN17LiquidCrystal_I2CC1Ehhh>

00003304 <_GLOBAL__sub_D_timeToGo>:



//SDconfig : set up variables using the SD utility library functions:
const uint8_t SDchipSelect = 10;
const String LogFileName = "moulog.txt";
    3304:	84 e4       	ldi	r24, 0x44	; 68
    3306:	97 e0       	ldi	r25, 0x07	; 7
    3308:	0c 94 8d 04 	jmp	0x91a	; 0x91a <_ZN6StringD1Ev>

0000330c <_Z13userInterfacev>:
	Timer1.detachInterrupt();

}

void userInterface()
{
    330c:	cf 93       	push	r28
    330e:	df 93       	push	r29
		case BPDW:
			goto MENU_FERMETURE_MINIMUM;
		case TIMEOUT:
			goto MENU_TIMEOUT;
		case BPOK:
			closeMode=FIXE;
    3310:	c2 e0       	ldi	r28, 0x02	; 2
    3312:	d2 e0       	ldi	r29, 0x02	; 2
}

void userInterface()
{
	MENU:
		delay(500);
    3314:	64 ef       	ldi	r22, 0xF4	; 244
    3316:	71 e0       	ldi	r23, 0x01	; 1
    3318:	80 e0       	ldi	r24, 0x00	; 0
    331a:	90 e0       	ldi	r25, 0x00	; 0
    331c:	0e 94 94 05 	call	0xb28	; 0xb28 <delay>
		while(1){
			RTC.read(timeElements,CLOCK_ADDRESS);
    3320:	60 e0       	ldi	r22, 0x00	; 0
    3322:	70 e0       	ldi	r23, 0x00	; 0
    3324:	8c e3       	ldi	r24, 0x3C	; 60
    3326:	97 e0       	ldi	r25, 0x07	; 7
    3328:	3e d9       	rcall	.-3460   	; 0x25a6 <_ZN9DS1337RTC4readER12tmElements_ti>
    332a:	40 e0       	ldi	r20, 0x00	; 0
			lcd.setCursor(0,0);
    332c:	60 e0       	ldi	r22, 0x00	; 0
    332e:	8e e2       	ldi	r24, 0x2E	; 46
    3330:	97 e0       	ldi	r25, 0x07	; 7
    3332:	3f d8       	rcall	.-3970   	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    3334:	80 91 3e 07 	lds	r24, 0x073E
			if (timeElements.Hour<10)
    3338:	8a 30       	cpi	r24, 0x0A	; 10
    333a:	28 f4       	brcc	.+10     	; 0x3346 <_Z13userInterfacev+0x3a>
    333c:	60 e3       	ldi	r22, 0x30	; 48
    333e:	8e e2       	ldi	r24, 0x2E	; 46
				lcd.print('0');
    3340:	97 e0       	ldi	r25, 0x07	; 7
    3342:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <_ZN5Print5printEc>
    3346:	4a e0       	ldi	r20, 0x0A	; 10
    3348:	50 e0       	ldi	r21, 0x00	; 0
			lcd.print(timeElements.Hour);
    334a:	60 91 3e 07 	lds	r22, 0x073E
    334e:	8e e2       	ldi	r24, 0x2E	; 46
    3350:	97 e0       	ldi	r25, 0x07	; 7
    3352:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <_ZN5Print5printEhi>
    3356:	68 e4       	ldi	r22, 0x48	; 72
    3358:	8e e2       	ldi	r24, 0x2E	; 46
			lcd.print('H');
    335a:	97 e0       	ldi	r25, 0x07	; 7
    335c:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <_ZN5Print5printEc>
    3360:	80 91 3d 07 	lds	r24, 0x073D
			if (timeElements.Minute<10)
    3364:	8a 30       	cpi	r24, 0x0A	; 10
    3366:	28 f4       	brcc	.+10     	; 0x3372 <_Z13userInterfacev+0x66>
    3368:	60 e3       	ldi	r22, 0x30	; 48
    336a:	8e e2       	ldi	r24, 0x2E	; 46
				lcd.print('0');
    336c:	97 e0       	ldi	r25, 0x07	; 7
    336e:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <_ZN5Print5printEc>
    3372:	4a e0       	ldi	r20, 0x0A	; 10
    3374:	50 e0       	ldi	r21, 0x00	; 0
			lcd.print(timeElements.Minute);
    3376:	60 91 3d 07 	lds	r22, 0x073D
    337a:	8e e2       	ldi	r24, 0x2E	; 46
    337c:	97 e0       	ldi	r25, 0x07	; 7
    337e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <_ZN5Print5printEhi>
    3382:	6a e3       	ldi	r22, 0x3A	; 58
    3384:	8e e2       	ldi	r24, 0x2E	; 46
			lcd.print(':');
    3386:	97 e0       	ldi	r25, 0x07	; 7
    3388:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <_ZN5Print5printEc>
    338c:	4a e0       	ldi	r20, 0x0A	; 10
    338e:	50 e0       	ldi	r21, 0x00	; 0
			lcd.print(timeElements.Second);
    3390:	60 91 3c 07 	lds	r22, 0x073C
    3394:	8e e2       	ldi	r24, 0x2E	; 46
    3396:	97 e0       	ldi	r25, 0x07	; 7
    3398:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <_ZN5Print5printEhi>
    339c:	63 ef       	ldi	r22, 0xF3	; 243
    339e:	71 e0       	ldi	r23, 0x01	; 1
			lcd.print(" BAT:XX%");
    33a0:	8e e2       	ldi	r24, 0x2E	; 46
    33a2:	97 e0       	ldi	r25, 0x07	; 7
    33a4:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN5Print5printEPKc>
    33a8:	41 e0       	ldi	r20, 0x01	; 1
    33aa:	60 e0       	ldi	r22, 0x00	; 0
	/*		lcd.setCursor(9,0);
			lcd.write(BAT1_CHAR);
			lcd.write(BAT2_CHAR);
			lcd.write(BAT3_CHAR);*/
			lcd.setCursor(0,1);
    33ac:	8e e2       	ldi	r24, 0x2E	; 46
    33ae:	97 e0       	ldi	r25, 0x07	; 7
    33b0:	00 d8       	rcall	.-4096   	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    33b2:	6c ef       	ldi	r22, 0xFC	; 252
    33b4:	71 e0       	ldi	r23, 0x01	; 1
    33b6:	8e e2       	ldi	r24, 0x2E	; 46
			lcd.print("OUVRIRA A HH:MM ");
    33b8:	97 e0       	ldi	r25, 0x07	; 7
    33ba:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN5Print5printEPKc>
    33be:	83 e0       	ldi	r24, 0x03	; 3
    33c0:	0e 94 96 06 	call	0xd2c	; 0xd2c <digitalRead>
		//	lcd.print("FERMERA A HH:MM ");

			if(!digitalRead(BPOK))
    33c4:	89 2b       	or	r24, r25
    33c6:	09 f0       	breq	.+2      	; 0x33ca <_Z13userInterfacev+0xbe>
    33c8:	ab cf       	rjmp	.-170    	; 0x3320 <_Z13userInterfacev+0x14>
    33ca:	40 e0       	ldi	r20, 0x00	; 0
    33cc:	60 e0       	ldi	r22, 0x00	; 0
    33ce:	8e e2       	ldi	r24, 0x2E	; 46
				goto MENU_OUVERTURE;
		}

	MENU_OUVERTURE:
		lcd.setCursor(0,0);
    33d0:	97 e0       	ldi	r25, 0x07	; 7
    33d2:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    33d6:	6d e0       	ldi	r22, 0x0D	; 13
    33d8:	72 e0       	ldi	r23, 0x02	; 2
    33da:	8e e2       	ldi	r24, 0x2E	; 46
		lcd.print("REGLAGE DU MODE ");
    33dc:	97 e0       	ldi	r25, 0x07	; 7
    33de:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN5Print5printEPKc>
    33e2:	41 e0       	ldi	r20, 0x01	; 1
    33e4:	60 e0       	ldi	r22, 0x00	; 0
    33e6:	8e e2       	ldi	r24, 0x2E	; 46
		lcd.setCursor(0,1);
    33e8:	97 e0       	ldi	r25, 0x07	; 7
    33ea:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    33ee:	6e e1       	ldi	r22, 0x1E	; 30
    33f0:	72 e0       	ldi	r23, 0x02	; 2
    33f2:	8e e2       	ldi	r24, 0x2E	; 46
		lcd.print("D'OUVERTURE     ");
    33f4:	97 e0       	ldi	r25, 0x07	; 7
    33f6:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN5Print5printEPKc>
    33fa:	d5 da       	rcall	.-2646   	; 0x29a6 <_Z10waitButtonv>
    33fc:	81 30       	cpi	r24, 0x01	; 1
    33fe:	29 f3       	breq	.-54     	; 0x33ca <_Z13userInterfacev+0xbe>
		switch(waitButton()){
    3400:	08 f4       	brcc	.+2      	; 0x3404 <_Z13userInterfacev+0xf8>
    3402:	6e c1       	rjmp	.+732    	; 0x36e0 <_Z13userInterfacev+0x3d4>
    3404:	83 30       	cpi	r24, 0x03	; 3
    3406:	09 f0       	breq	.+2      	; 0x340a <_Z13userInterfacev+0xfe>
    3408:	61 c2       	rjmp	.+1218   	; 0x38cc <_Z13userInterfacev+0x5c0>
    340a:	40 e0       	ldi	r20, 0x00	; 0
    340c:	60 e0       	ldi	r22, 0x00	; 0
    340e:	8e e2       	ldi	r24, 0x2E	; 46
    3410:	97 e0       	ldi	r25, 0x07	; 7
		default:
			goto MENU_ERROR;
		}

	MENU_OUVERTURE_SOLEIL:
		lcd.setCursor(0,0);
    3412:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    3416:	6f e2       	ldi	r22, 0x2F	; 47
    3418:	72 e0       	ldi	r23, 0x02	; 2
    341a:	8e e2       	ldi	r24, 0x2E	; 46
    341c:	97 e0       	ldi	r25, 0x07	; 7
		lcd.print("OUVERTURE       ");
    341e:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN5Print5printEPKc>
    3422:	41 e0       	ldi	r20, 0x01	; 1
    3424:	60 e0       	ldi	r22, 0x00	; 0
    3426:	8e e2       	ldi	r24, 0x2E	; 46
    3428:	97 e0       	ldi	r25, 0x07	; 7
		lcd.setCursor(0,1);
    342a:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    342e:	60 e4       	ldi	r22, 0x40	; 64
    3430:	72 e0       	ldi	r23, 0x02	; 2
    3432:	8e e2       	ldi	r24, 0x2E	; 46
    3434:	97 e0       	ldi	r25, 0x07	; 7
		lcd.print("LEVE DU SOLEIL  ");
    3436:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN5Print5printEPKc>
    343a:	80 91 13 01 	lds	r24, 0x0113
    343e:	81 30       	cpi	r24, 0x01	; 1
    3440:	99 f4       	brne	.+38     	; 0x3468 <_Z13userInterfacev+0x15c>
		if (openMode==SOLEIL){
    3442:	40 e0       	ldi	r20, 0x00	; 0
    3444:	6d e0       	ldi	r22, 0x0D	; 13
    3446:	8e e2       	ldi	r24, 0x2E	; 46
    3448:	97 e0       	ldi	r25, 0x07	; 7
			lcd.setCursor(13,0);
    344a:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    344e:	60 e0       	ldi	r22, 0x00	; 0
    3450:	8e e2       	ldi	r24, 0x2E	; 46
    3452:	97 e0       	ldi	r25, 0x07	; 7
    3454:	1a d8       	rcall	.-4044   	; 0x248a <_ZN17LiquidCrystal_I2C5writeEh>
			lcd.write(CHECK_CHAR);
    3456:	60 e2       	ldi	r22, 0x20	; 32
    3458:	8e e2       	ldi	r24, 0x2E	; 46
    345a:	97 e0       	ldi	r25, 0x07	; 7
    345c:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <_ZN5Print5printEc>
			lcd.print(' ');
    3460:	61 e0       	ldi	r22, 0x01	; 1
    3462:	8e e2       	ldi	r24, 0x2E	; 46
    3464:	97 e0       	ldi	r25, 0x07	; 7
    3466:	11 d8       	rcall	.-4062   	; 0x248a <_ZN17LiquidCrystal_I2C5writeEh>
    3468:	9e da       	rcall	.-2756   	; 0x29a6 <_Z10waitButtonv>
			lcd.write(CHECK2_CHAR);
    346a:	81 30       	cpi	r24, 0x01	; 1
    346c:	71 f2       	breq	.-100    	; 0x340a <_Z13userInterfacev+0xfe>
    346e:	88 f0       	brcs	.+34     	; 0x3492 <_Z13userInterfacev+0x186>
    3470:	83 30       	cpi	r24, 0x03	; 3
    3472:	09 f0       	breq	.+2      	; 0x3476 <_Z13userInterfacev+0x16a>

		}
		switch(waitButton()){
    3474:	2b c2       	rjmp	.+1110   	; 0x38cc <_Z13userInterfacev+0x5c0>
    3476:	81 e0       	ldi	r24, 0x01	; 1
    3478:	80 93 13 01 	sts	0x0113, r24
    347c:	c6 cf       	rjmp	.-116    	; 0x340a <_Z13userInterfacev+0xfe>
    347e:	93 da       	rcall	.-2778   	; 0x29a6 <_Z10waitButtonv>
    3480:	81 30       	cpi	r24, 0x01	; 1
    3482:	09 f4       	brne	.+2      	; 0x3486 <_Z13userInterfacev+0x17a>
		case BPDW:
			goto MENU_OUVERTURE_FIXE;
		case TIMEOUT:
			goto MENU_TIMEOUT;
		case BPOK:
			openMode=SOLEIL;
    3484:	c2 cf       	rjmp	.-124    	; 0x340a <_Z13userInterfacev+0xfe>
    3486:	b0 f1       	brcs	.+108    	; 0x34f4 <_Z13userInterfacev+0x1e8>
    3488:	83 30       	cpi	r24, 0x03	; 3
			goto MENU_OUVERTURE_SOLEIL;
    348a:	09 f0       	breq	.+2      	; 0x348e <_Z13userInterfacev+0x182>
		lcd.print("HEURE FIXE      ");
		if (openMode==FIXE){
			lcd.setCursor(15,0);
			lcd.write(CHECK_CHAR);
		}
		switch(waitButton()){
    348c:	1f c2       	rjmp	.+1086   	; 0x38cc <_Z13userInterfacev+0x5c0>
    348e:	c0 93 13 01 	sts	0x0113, r28
    3492:	40 e0       	ldi	r20, 0x00	; 0
    3494:	60 e0       	ldi	r22, 0x00	; 0
    3496:	8e e2       	ldi	r24, 0x2E	; 46
    3498:	97 e0       	ldi	r25, 0x07	; 7
    349a:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
		case BPDW:
			goto MENU_OUVERTURE_MINIMUM;
		case TIMEOUT:
			goto MENU_TIMEOUT;
		case BPOK:
			openMode=FIXE;
    349e:	6f e2       	ldi	r22, 0x2F	; 47
    34a0:	72 e0       	ldi	r23, 0x02	; 2
			goto MENU_ERROR;
		}


	MENU_OUVERTURE_FIXE:
		lcd.setCursor(0,0);
    34a2:	8e e2       	ldi	r24, 0x2E	; 46
    34a4:	97 e0       	ldi	r25, 0x07	; 7
    34a6:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN5Print5printEPKc>
    34aa:	41 e0       	ldi	r20, 0x01	; 1
    34ac:	60 e0       	ldi	r22, 0x00	; 0
		lcd.print("OUVERTURE       ");
    34ae:	8e e2       	ldi	r24, 0x2E	; 46
    34b0:	97 e0       	ldi	r25, 0x07	; 7
    34b2:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    34b6:	61 e5       	ldi	r22, 0x51	; 81
    34b8:	72 e0       	ldi	r23, 0x02	; 2
		lcd.setCursor(0,1);
    34ba:	8e e2       	ldi	r24, 0x2E	; 46
    34bc:	97 e0       	ldi	r25, 0x07	; 7
    34be:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN5Print5printEPKc>
    34c2:	80 91 13 01 	lds	r24, 0x0113
		lcd.print("HEURE FIXE      ");
    34c6:	82 30       	cpi	r24, 0x02	; 2
    34c8:	d1 f6       	brne	.-76     	; 0x347e <_Z13userInterfacev+0x172>
    34ca:	40 e0       	ldi	r20, 0x00	; 0
    34cc:	6f e0       	ldi	r22, 0x0F	; 15
    34ce:	8e e2       	ldi	r24, 0x2E	; 46
    34d0:	97 e0       	ldi	r25, 0x07	; 7
		if (openMode==FIXE){
    34d2:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    34d6:	60 e0       	ldi	r22, 0x00	; 0
    34d8:	8e e2       	ldi	r24, 0x2E	; 46
			lcd.setCursor(15,0);
    34da:	97 e0       	ldi	r25, 0x07	; 7
    34dc:	0e 94 45 12 	call	0x248a	; 0x248a <_ZN17LiquidCrystal_I2C5writeEh>
    34e0:	ce cf       	rjmp	.-100    	; 0x347e <_Z13userInterfacev+0x172>
    34e2:	61 da       	rcall	.-2878   	; 0x29a6 <_Z10waitButtonv>
    34e4:	81 30       	cpi	r24, 0x01	; 1
			lcd.write(CHECK_CHAR);
    34e6:	a9 f2       	breq	.-86     	; 0x3492 <_Z13userInterfacev+0x186>
    34e8:	78 f1       	brcs	.+94     	; 0x3548 <_Z13userInterfacev+0x23c>
    34ea:	83 30       	cpi	r24, 0x03	; 3
    34ec:	09 f0       	breq	.+2      	; 0x34f0 <_Z13userInterfacev+0x1e4>
    34ee:	ee c1       	rjmp	.+988    	; 0x38cc <_Z13userInterfacev+0x5c0>
    34f0:	80 93 13 01 	sts	0x0113, r24
		lcd.print("HEURE MINIMUM   ");
		if (openMode==MINIMUM){
			lcd.setCursor(15,0);
			lcd.write(CHECK2_CHAR);
		}
		switch(waitButton()){
    34f4:	40 e0       	ldi	r20, 0x00	; 0
    34f6:	60 e0       	ldi	r22, 0x00	; 0
    34f8:	8e e2       	ldi	r24, 0x2E	; 46
    34fa:	97 e0       	ldi	r25, 0x07	; 7
    34fc:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    3500:	6f e2       	ldi	r22, 0x2F	; 47
		case BPDW:
			goto MENU_OUVERTURE_RETOUR;
		case TIMEOUT:
			goto MENU_TIMEOUT;
		case BPOK:
			openMode=MINIMUM;
    3502:	72 e0       	ldi	r23, 0x02	; 2
    3504:	8e e2       	ldi	r24, 0x2E	; 46
			goto MENU_ERROR;
		}


	MENU_OUVERTURE_MINIMUM:
		lcd.setCursor(0,0);
    3506:	97 e0       	ldi	r25, 0x07	; 7
    3508:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN5Print5printEPKc>
    350c:	41 e0       	ldi	r20, 0x01	; 1
    350e:	60 e0       	ldi	r22, 0x00	; 0
    3510:	8e e2       	ldi	r24, 0x2E	; 46
		lcd.print("OUVERTURE       ");
    3512:	97 e0       	ldi	r25, 0x07	; 7
    3514:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    3518:	62 e6       	ldi	r22, 0x62	; 98
    351a:	72 e0       	ldi	r23, 0x02	; 2
    351c:	8e e2       	ldi	r24, 0x2E	; 46
		lcd.setCursor(0,1);
    351e:	97 e0       	ldi	r25, 0x07	; 7
    3520:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN5Print5printEPKc>
    3524:	80 91 13 01 	lds	r24, 0x0113
    3528:	83 30       	cpi	r24, 0x03	; 3
		lcd.print("HEURE MINIMUM   ");
    352a:	d9 f6       	brne	.-74     	; 0x34e2 <_Z13userInterfacev+0x1d6>
    352c:	40 e0       	ldi	r20, 0x00	; 0
    352e:	6f e0       	ldi	r22, 0x0F	; 15
    3530:	8e e2       	ldi	r24, 0x2E	; 46
    3532:	97 e0       	ldi	r25, 0x07	; 7
    3534:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
		if (openMode==MINIMUM){
    3538:	61 e0       	ldi	r22, 0x01	; 1
    353a:	8e e2       	ldi	r24, 0x2E	; 46
    353c:	97 e0       	ldi	r25, 0x07	; 7
			lcd.setCursor(15,0);
    353e:	0e 94 45 12 	call	0x248a	; 0x248a <_ZN17LiquidCrystal_I2C5writeEh>
    3542:	cf cf       	rjmp	.-98     	; 0x34e2 <_Z13userInterfacev+0x1d6>
    3544:	81 30       	cpi	r24, 0x01	; 1
    3546:	e0 f4       	brcc	.+56     	; 0x3580 <_Z13userInterfacev+0x274>
    3548:	40 e0       	ldi	r20, 0x00	; 0
			lcd.write(CHECK2_CHAR);
    354a:	60 e0       	ldi	r22, 0x00	; 0
    354c:	8e e2       	ldi	r24, 0x2E	; 46
    354e:	97 e0       	ldi	r25, 0x07	; 7
    3550:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    3554:	63 e7       	ldi	r22, 0x73	; 115
	MENU_OUVERTURE_RETOUR:
		lcd.setCursor(0,0);
		lcd.print("RETOUR          ");
		lcd.setCursor(0,1);
		lcd.print("                ");
		switch(waitButton()){
    3556:	72 e0       	ldi	r23, 0x02	; 2
    3558:	8e e2       	ldi	r24, 0x2E	; 46
			goto MENU_ERROR;
		}


	MENU_OUVERTURE_RETOUR:
		lcd.setCursor(0,0);
    355a:	97 e0       	ldi	r25, 0x07	; 7
    355c:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN5Print5printEPKc>
    3560:	41 e0       	ldi	r20, 0x01	; 1
    3562:	60 e0       	ldi	r22, 0x00	; 0
    3564:	8e e2       	ldi	r24, 0x2E	; 46
		lcd.print("RETOUR          ");
    3566:	97 e0       	ldi	r25, 0x07	; 7
    3568:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    356c:	6b ea       	ldi	r22, 0xAB	; 171
    356e:	71 e0       	ldi	r23, 0x01	; 1
    3570:	8e e2       	ldi	r24, 0x2E	; 46
		lcd.setCursor(0,1);
    3572:	97 e0       	ldi	r25, 0x07	; 7
    3574:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN5Print5printEPKc>
    3578:	16 da       	rcall	.-3028   	; 0x29a6 <_Z10waitButtonv>
    357a:	81 30       	cpi	r24, 0x01	; 1
    357c:	19 f7       	brne	.-58     	; 0x3544 <_Z13userInterfacev+0x238>
		lcd.print("                ");
    357e:	ba cf       	rjmp	.-140    	; 0x34f4 <_Z13userInterfacev+0x1e8>
    3580:	83 30       	cpi	r24, 0x03	; 3
    3582:	09 f0       	breq	.+2      	; 0x3586 <_Z13userInterfacev+0x27a>
    3584:	a3 c1       	rjmp	.+838    	; 0x38cc <_Z13userInterfacev+0x5c0>
    3586:	21 cf       	rjmp	.-446    	; 0x33ca <_Z13userInterfacev+0xbe>
    3588:	81 30       	cpi	r24, 0x01	; 1
		switch(waitButton()){
    358a:	08 f4       	brcc	.+2      	; 0x358e <_Z13userInterfacev+0x282>
    358c:	ee c0       	rjmp	.+476    	; 0x376a <_Z13userInterfacev+0x45e>
    358e:	83 30       	cpi	r24, 0x03	; 3
    3590:	09 f0       	breq	.+2      	; 0x3594 <_Z13userInterfacev+0x288>
    3592:	9c c1       	rjmp	.+824    	; 0x38cc <_Z13userInterfacev+0x5c0>
    3594:	40 e0       	ldi	r20, 0x00	; 0
    3596:	60 e0       	ldi	r22, 0x00	; 0
    3598:	8e e2       	ldi	r24, 0x2E	; 46
    359a:	97 e0       	ldi	r25, 0x07	; 7
	MENU_FERMETURE:
		lcd.setCursor(0,0);
		lcd.print("REGLAGE DU MODE ");
		lcd.setCursor(0,1);
		lcd.print("DE FERMETURE    ");
		switch(waitButton()){
    359c:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    35a0:	65 e9       	ldi	r22, 0x95	; 149
    35a2:	72 e0       	ldi	r23, 0x02	; 2
    35a4:	8e e2       	ldi	r24, 0x2E	; 46
    35a6:	97 e0       	ldi	r25, 0x07	; 7
		default:
			goto MENU_ERROR;
		}

	MENU_FERMETURE_SOLEIL:
		lcd.setCursor(0,0);
    35a8:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN5Print5printEPKc>
    35ac:	41 e0       	ldi	r20, 0x01	; 1
    35ae:	60 e0       	ldi	r22, 0x00	; 0
    35b0:	8e e2       	ldi	r24, 0x2E	; 46
    35b2:	97 e0       	ldi	r25, 0x07	; 7
		lcd.print("FERMETURE       ");
    35b4:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    35b8:	66 ea       	ldi	r22, 0xA6	; 166
    35ba:	72 e0       	ldi	r23, 0x02	; 2
    35bc:	8e e2       	ldi	r24, 0x2E	; 46
    35be:	97 e0       	ldi	r25, 0x07	; 7
		lcd.setCursor(0,1);
    35c0:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN5Print5printEPKc>
    35c4:	80 91 12 01 	lds	r24, 0x0112
    35c8:	81 30       	cpi	r24, 0x01	; 1
    35ca:	59 f4       	brne	.+22     	; 0x35e2 <_Z13userInterfacev+0x2d6>
		lcd.print("COUCHE DU SOLEIL");
    35cc:	40 e0       	ldi	r20, 0x00	; 0
    35ce:	6f e0       	ldi	r22, 0x0F	; 15
    35d0:	8e e2       	ldi	r24, 0x2E	; 46
    35d2:	97 e0       	ldi	r25, 0x07	; 7
    35d4:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
		if (closeMode==SOLEIL){
    35d8:	60 e0       	ldi	r22, 0x00	; 0
    35da:	8e e2       	ldi	r24, 0x2E	; 46
    35dc:	97 e0       	ldi	r25, 0x07	; 7
    35de:	0e 94 45 12 	call	0x248a	; 0x248a <_ZN17LiquidCrystal_I2C5writeEh>
			lcd.setCursor(15,0);
    35e2:	e1 d9       	rcall	.-3134   	; 0x29a6 <_Z10waitButtonv>
    35e4:	81 30       	cpi	r24, 0x01	; 1
    35e6:	b1 f2       	breq	.-84     	; 0x3594 <_Z13userInterfacev+0x288>
    35e8:	08 f0       	brcs	.+2      	; 0x35ec <_Z13userInterfacev+0x2e0>
    35ea:	97 c0       	rjmp	.+302    	; 0x371a <_Z13userInterfacev+0x40e>
			lcd.write(CHECK_CHAR);
    35ec:	40 e0       	ldi	r20, 0x00	; 0
    35ee:	60 e0       	ldi	r22, 0x00	; 0
    35f0:	8e e2       	ldi	r24, 0x2E	; 46
    35f2:	97 e0       	ldi	r25, 0x07	; 7
    35f4:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
		}
		switch(waitButton()){
    35f8:	65 e9       	ldi	r22, 0x95	; 149
    35fa:	72 e0       	ldi	r23, 0x02	; 2
    35fc:	8e e2       	ldi	r24, 0x2E	; 46
    35fe:	97 e0       	ldi	r25, 0x07	; 7
    3600:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN5Print5printEPKc>
		default:
			goto MENU_ERROR;
		}

	MENU_FERMETURE_FIXE:
		lcd.setCursor(0,0);
    3604:	41 e0       	ldi	r20, 0x01	; 1
    3606:	60 e0       	ldi	r22, 0x00	; 0
    3608:	8e e2       	ldi	r24, 0x2E	; 46
    360a:	97 e0       	ldi	r25, 0x07	; 7
    360c:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
		lcd.print("FERMETURE       ");
    3610:	61 e5       	ldi	r22, 0x51	; 81
    3612:	72 e0       	ldi	r23, 0x02	; 2
    3614:	8e e2       	ldi	r24, 0x2E	; 46
    3616:	97 e0       	ldi	r25, 0x07	; 7
    3618:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN5Print5printEPKc>
		lcd.setCursor(0,1);
    361c:	80 91 12 01 	lds	r24, 0x0112
    3620:	82 30       	cpi	r24, 0x02	; 2
    3622:	59 f4       	brne	.+22     	; 0x363a <_Z13userInterfacev+0x32e>
    3624:	40 e0       	ldi	r20, 0x00	; 0
		lcd.print("HEURE FIXE      ");
    3626:	6f e0       	ldi	r22, 0x0F	; 15
    3628:	8e e2       	ldi	r24, 0x2E	; 46
    362a:	97 e0       	ldi	r25, 0x07	; 7
    362c:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    3630:	60 e0       	ldi	r22, 0x00	; 0
		if (closeMode==FIXE){
    3632:	8e e2       	ldi	r24, 0x2E	; 46
    3634:	97 e0       	ldi	r25, 0x07	; 7
    3636:	0e 94 45 12 	call	0x248a	; 0x248a <_ZN17LiquidCrystal_I2C5writeEh>
			lcd.setCursor(15,0);
    363a:	b5 d9       	rcall	.-3222   	; 0x29a6 <_Z10waitButtonv>
    363c:	81 30       	cpi	r24, 0x01	; 1
    363e:	09 f4       	brne	.+2      	; 0x3642 <_Z13userInterfacev+0x336>
    3640:	a9 cf       	rjmp	.-174    	; 0x3594 <_Z13userInterfacev+0x288>
    3642:	08 f0       	brcs	.+2      	; 0x3646 <_Z13userInterfacev+0x33a>
    3644:	71 c0       	rjmp	.+226    	; 0x3728 <_Z13userInterfacev+0x41c>
			lcd.write(CHECK_CHAR);
    3646:	40 e0       	ldi	r20, 0x00	; 0
    3648:	60 e0       	ldi	r22, 0x00	; 0
    364a:	8e e2       	ldi	r24, 0x2E	; 46
    364c:	97 e0       	ldi	r25, 0x07	; 7
    364e:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
		}
		switch(waitButton()){
    3652:	65 e9       	ldi	r22, 0x95	; 149
    3654:	72 e0       	ldi	r23, 0x02	; 2
    3656:	8e e2       	ldi	r24, 0x2E	; 46
    3658:	97 e0       	ldi	r25, 0x07	; 7
    365a:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN5Print5printEPKc>
		default:
			goto MENU_ERROR;
		}

	MENU_FERMETURE_MINIMUM:
		lcd.setCursor(0,0);
    365e:	41 e0       	ldi	r20, 0x01	; 1
    3660:	60 e0       	ldi	r22, 0x00	; 0
    3662:	8e e2       	ldi	r24, 0x2E	; 46
    3664:	97 e0       	ldi	r25, 0x07	; 7
    3666:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
		lcd.print("FERMETURE       ");
    366a:	62 e6       	ldi	r22, 0x62	; 98
    366c:	72 e0       	ldi	r23, 0x02	; 2
    366e:	8e e2       	ldi	r24, 0x2E	; 46
    3670:	97 e0       	ldi	r25, 0x07	; 7
    3672:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN5Print5printEPKc>
		lcd.setCursor(0,1);
    3676:	80 91 12 01 	lds	r24, 0x0112
    367a:	83 30       	cpi	r24, 0x03	; 3
    367c:	59 f4       	brne	.+22     	; 0x3694 <_Z13userInterfacev+0x388>
    367e:	40 e0       	ldi	r20, 0x00	; 0
    3680:	6f e0       	ldi	r22, 0x0F	; 15
		lcd.print("HEURE MINIMUM   ");
    3682:	8e e2       	ldi	r24, 0x2E	; 46
    3684:	97 e0       	ldi	r25, 0x07	; 7
    3686:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    368a:	60 e0       	ldi	r22, 0x00	; 0
    368c:	8e e2       	ldi	r24, 0x2E	; 46
		if (closeMode==MINIMUM){
    368e:	97 e0       	ldi	r25, 0x07	; 7
    3690:	0e 94 45 12 	call	0x248a	; 0x248a <_ZN17LiquidCrystal_I2C5writeEh>
    3694:	88 d9       	rcall	.-3312   	; 0x29a6 <_Z10waitButtonv>
			lcd.setCursor(15,0);
    3696:	81 30       	cpi	r24, 0x01	; 1
    3698:	09 f4       	brne	.+2      	; 0x369c <_Z13userInterfacev+0x390>
    369a:	a8 cf       	rjmp	.-176    	; 0x35ec <_Z13userInterfacev+0x2e0>
    369c:	08 f0       	brcs	.+2      	; 0x36a0 <_Z13userInterfacev+0x394>
    369e:	4a c0       	rjmp	.+148    	; 0x3734 <_Z13userInterfacev+0x428>
    36a0:	40 e0       	ldi	r20, 0x00	; 0
			lcd.write(CHECK_CHAR);
    36a2:	60 e0       	ldi	r22, 0x00	; 0
    36a4:	8e e2       	ldi	r24, 0x2E	; 46
    36a6:	97 e0       	ldi	r25, 0x07	; 7
    36a8:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
		}
		switch(waitButton()){
    36ac:	63 e7       	ldi	r22, 0x73	; 115
    36ae:	72 e0       	ldi	r23, 0x02	; 2
    36b0:	8e e2       	ldi	r24, 0x2E	; 46
    36b2:	97 e0       	ldi	r25, 0x07	; 7
    36b4:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN5Print5printEPKc>
    36b8:	41 e0       	ldi	r20, 0x01	; 1
		default:
			goto MENU_ERROR;
		}

	MENU_FERMETURE_RETOUR:
		lcd.setCursor(0,0);
    36ba:	60 e0       	ldi	r22, 0x00	; 0
    36bc:	8e e2       	ldi	r24, 0x2E	; 46
    36be:	97 e0       	ldi	r25, 0x07	; 7
    36c0:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    36c4:	6b ea       	ldi	r22, 0xAB	; 171
		lcd.print("RETOUR          ");
    36c6:	71 e0       	ldi	r23, 0x01	; 1
    36c8:	8e e2       	ldi	r24, 0x2E	; 46
    36ca:	97 e0       	ldi	r25, 0x07	; 7
    36cc:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN5Print5printEPKc>
    36d0:	6a d9       	rcall	.-3372   	; 0x29a6 <_Z10waitButtonv>
		lcd.setCursor(0,1);
    36d2:	81 30       	cpi	r24, 0x01	; 1
    36d4:	09 f4       	brne	.+2      	; 0x36d8 <_Z13userInterfacev+0x3cc>
    36d6:	b7 cf       	rjmp	.-146    	; 0x3646 <_Z13userInterfacev+0x33a>
    36d8:	18 f3       	brcs	.-58     	; 0x36a0 <_Z13userInterfacev+0x394>
    36da:	83 30       	cpi	r24, 0x03	; 3
    36dc:	09 f0       	breq	.+2      	; 0x36e0 <_Z13userInterfacev+0x3d4>
		lcd.print("                ");
    36de:	f6 c0       	rjmp	.+492    	; 0x38cc <_Z13userInterfacev+0x5c0>
    36e0:	40 e0       	ldi	r20, 0x00	; 0
    36e2:	60 e0       	ldi	r22, 0x00	; 0
    36e4:	8e e2       	ldi	r24, 0x2E	; 46
    36e6:	97 e0       	ldi	r25, 0x07	; 7
    36e8:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
		switch(waitButton()){
    36ec:	6d e0       	ldi	r22, 0x0D	; 13
    36ee:	72 e0       	ldi	r23, 0x02	; 2
    36f0:	8e e2       	ldi	r24, 0x2E	; 46
    36f2:	97 e0       	ldi	r25, 0x07	; 7
    36f4:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN5Print5printEPKc>
    36f8:	41 e0       	ldi	r20, 0x01	; 1
    36fa:	60 e0       	ldi	r22, 0x00	; 0
			goto MENU_ERROR;
		}


	MENU_FERMETURE:
		lcd.setCursor(0,0);
    36fc:	8e e2       	ldi	r24, 0x2E	; 46
    36fe:	97 e0       	ldi	r25, 0x07	; 7
    3700:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    3704:	64 e8       	ldi	r22, 0x84	; 132
    3706:	72 e0       	ldi	r23, 0x02	; 2
		lcd.print("REGLAGE DU MODE ");
    3708:	8e e2       	ldi	r24, 0x2E	; 46
    370a:	97 e0       	ldi	r25, 0x07	; 7
    370c:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN5Print5printEPKc>
    3710:	4a d9       	rcall	.-3436   	; 0x29a6 <_Z10waitButtonv>
    3712:	81 30       	cpi	r24, 0x01	; 1
		lcd.setCursor(0,1);
    3714:	09 f0       	breq	.+2      	; 0x3718 <_Z13userInterfacev+0x40c>
    3716:	38 cf       	rjmp	.-400    	; 0x3588 <_Z13userInterfacev+0x27c>
    3718:	58 ce       	rjmp	.-848    	; 0x33ca <_Z13userInterfacev+0xbe>
    371a:	83 30       	cpi	r24, 0x03	; 3
    371c:	09 f0       	breq	.+2      	; 0x3720 <_Z13userInterfacev+0x414>
    371e:	d6 c0       	rjmp	.+428    	; 0x38cc <_Z13userInterfacev+0x5c0>
		lcd.print("DE FERMETURE    ");
    3720:	81 e0       	ldi	r24, 0x01	; 1
    3722:	80 93 12 01 	sts	0x0112, r24
    3726:	36 cf       	rjmp	.-404    	; 0x3594 <_Z13userInterfacev+0x288>
    3728:	83 30       	cpi	r24, 0x03	; 3
    372a:	09 f0       	breq	.+2      	; 0x372e <_Z13userInterfacev+0x422>
		switch(waitButton()){
    372c:	cf c0       	rjmp	.+414    	; 0x38cc <_Z13userInterfacev+0x5c0>
    372e:	d0 93 12 01 	sts	0x0112, r29
    3732:	5c cf       	rjmp	.-328    	; 0x35ec <_Z13userInterfacev+0x2e0>
    3734:	83 30       	cpi	r24, 0x03	; 3
    3736:	09 f0       	breq	.+2      	; 0x373a <_Z13userInterfacev+0x42e>
		lcd.print("COUCHE DU SOLEIL");
		if (closeMode==SOLEIL){
			lcd.setCursor(15,0);
			lcd.write(CHECK_CHAR);
		}
		switch(waitButton()){
    3738:	c9 c0       	rjmp	.+402    	; 0x38cc <_Z13userInterfacev+0x5c0>
    373a:	80 93 12 01 	sts	0x0112, r24
		case BPDW:
			goto MENU_FERMETURE_FIXE;
		case TIMEOUT:
			goto MENU_TIMEOUT;
		case BPOK:
			closeMode=SOLEIL;
    373e:	83 cf       	rjmp	.-250    	; 0x3646 <_Z13userInterfacev+0x33a>
    3740:	81 30       	cpi	r24, 0x01	; 1
    3742:	08 f4       	brcc	.+2      	; 0x3746 <_Z13userInterfacev+0x43a>
			goto MENU_FERMETURE_SOLEIL;
    3744:	4c c0       	rjmp	.+152    	; 0x37de <_Z13userInterfacev+0x4d2>
		lcd.print("HEURE FIXE      ");
		if (closeMode==FIXE){
			lcd.setCursor(15,0);
			lcd.write(CHECK_CHAR);
		}
		switch(waitButton()){
    3746:	83 30       	cpi	r24, 0x03	; 3
    3748:	09 f0       	breq	.+2      	; 0x374c <_Z13userInterfacev+0x440>
    374a:	c0 c0       	rjmp	.+384    	; 0x38cc <_Z13userInterfacev+0x5c0>
		case BPDW:
			goto MENU_FERMETURE_MINIMUM;
		case TIMEOUT:
			goto MENU_TIMEOUT;
		case BPOK:
			closeMode=FIXE;
    374c:	60 e0       	ldi	r22, 0x00	; 0
    374e:	70 e0       	ldi	r23, 0x00	; 0
			goto MENU_FERMETURE_FIXE;
    3750:	8c e3       	ldi	r24, 0x3C	; 60
		lcd.print("HEURE MINIMUM   ");
		if (closeMode==MINIMUM){
			lcd.setCursor(15,0);
			lcd.write(CHECK_CHAR);
		}
		switch(waitButton()){
    3752:	97 e0       	ldi	r25, 0x07	; 7
    3754:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <_ZN9DS1337RTC4readER12tmElements_ti>
		case BPDW:
			goto MENU_FERMETURE_RETOUR;
		case TIMEOUT:
			goto MENU_TIMEOUT;
		case BPOK:
			closeMode=MINIMUM;
    3758:	8c e3       	ldi	r24, 0x3C	; 60
    375a:	97 e0       	ldi	r25, 0x07	; 7
			goto MENU_FERMETURE_MINIMUM;
    375c:	88 d9       	rcall	.-3312   	; 0x2a6e <_Z9enterTimeP12tmElements_t>
	MENU_HEURE:
		lcd.setCursor(0,0);
		lcd.print("REGLAGE HEURE   ");
		lcd.setCursor(0,1);
		lcd.print("                ");
		switch(waitButton()){
    375e:	60 e0       	ldi	r22, 0x00	; 0
    3760:	70 e0       	ldi	r23, 0x00	; 0
    3762:	8c e3       	ldi	r24, 0x3C	; 60
    3764:	97 e0       	ldi	r25, 0x07	; 7
    3766:	0e 94 53 13 	call	0x26a6	; 0x26a6 <_ZN9DS1337RTC5writeER12tmElements_ti>
		case BPDW:
			goto MENU_DATE;
		case TIMEOUT:
			goto MENU_TIMEOUT;
		case BPOK:
			RTC.read(timeElements,CLOCK_ADDRESS);
    376a:	40 e0       	ldi	r20, 0x00	; 0
    376c:	60 e0       	ldi	r22, 0x00	; 0
    376e:	8e e2       	ldi	r24, 0x2E	; 46
    3770:	97 e0       	ldi	r25, 0x07	; 7
    3772:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
			enterTime(&timeElements);
    3776:	67 eb       	ldi	r22, 0xB7	; 183
    3778:	72 e0       	ldi	r23, 0x02	; 2
    377a:	8e e2       	ldi	r24, 0x2E	; 46
    377c:	97 e0       	ldi	r25, 0x07	; 7
			RTC.write(timeElements,CLOCK_ADDRESS);
    377e:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN5Print5printEPKc>
    3782:	41 e0       	ldi	r20, 0x01	; 1
    3784:	60 e0       	ldi	r22, 0x00	; 0
    3786:	8e e2       	ldi	r24, 0x2E	; 46
    3788:	97 e0       	ldi	r25, 0x07	; 7
		default:
			goto MENU_ERROR;
		}

	MENU_HEURE:
		lcd.setCursor(0,0);
    378a:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    378e:	6b ea       	ldi	r22, 0xAB	; 171
    3790:	71 e0       	ldi	r23, 0x01	; 1
    3792:	8e e2       	ldi	r24, 0x2E	; 46
    3794:	97 e0       	ldi	r25, 0x07	; 7
		lcd.print("REGLAGE HEURE   ");
    3796:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN5Print5printEPKc>
    379a:	05 d9       	rcall	.-3574   	; 0x29a6 <_Z10waitButtonv>
    379c:	81 30       	cpi	r24, 0x01	; 1
    379e:	81 f6       	brne	.-96     	; 0x3740 <_Z13userInterfacev+0x434>
    37a0:	9f cf       	rjmp	.-194    	; 0x36e0 <_Z13userInterfacev+0x3d4>
		lcd.setCursor(0,1);
    37a2:	81 30       	cpi	r24, 0x01	; 1
    37a4:	08 f0       	brcs	.+2      	; 0x37a8 <_Z13userInterfacev+0x49c>
    37a6:	92 c0       	rjmp	.+292    	; 0x38cc <_Z13userInterfacev+0x5c0>
    37a8:	40 e0       	ldi	r20, 0x00	; 0
    37aa:	60 e0       	ldi	r22, 0x00	; 0
    37ac:	8e e2       	ldi	r24, 0x2E	; 46
		lcd.print("                ");
    37ae:	97 e0       	ldi	r25, 0x07	; 7
    37b0:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    37b4:	69 ed       	ldi	r22, 0xD9	; 217
    37b6:	72 e0       	ldi	r23, 0x02	; 2
    37b8:	8e e2       	ldi	r24, 0x2E	; 46
		switch(waitButton()){
    37ba:	97 e0       	ldi	r25, 0x07	; 7
    37bc:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN5Print5printEPKc>
    37c0:	41 e0       	ldi	r20, 0x01	; 1
    37c2:	60 e0       	ldi	r22, 0x00	; 0
	MENU_DATE:
		lcd.setCursor(0,0);
		lcd.print("REGLAGE DATE    ");
		lcd.setCursor(0,1);
		lcd.print("                ");
		switch(waitButton()){
    37c4:	8e e2       	ldi	r24, 0x2E	; 46
    37c6:	97 e0       	ldi	r25, 0x07	; 7
    37c8:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
		default:
			goto MENU_ERROR;
		}

	MENU_HAUTEUR:
		lcd.setCursor(0,0);
    37cc:	6a ee       	ldi	r22, 0xEA	; 234
    37ce:	72 e0       	ldi	r23, 0x02	; 2
    37d0:	8e e2       	ldi	r24, 0x2E	; 46
    37d2:	97 e0       	ldi	r25, 0x07	; 7
    37d4:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN5Print5printEPKc>
		lcd.print("REGLAGE HAUTEUR ");
    37d8:	e6 d8       	rcall	.-3636   	; 0x29a6 <_Z10waitButtonv>
    37da:	81 30       	cpi	r24, 0x01	; 1
    37dc:	e1 f4       	brne	.+56     	; 0x3816 <_Z13userInterfacev+0x50a>
    37de:	40 e0       	ldi	r20, 0x00	; 0
    37e0:	60 e0       	ldi	r22, 0x00	; 0
		lcd.setCursor(0,1);
    37e2:	8e e2       	ldi	r24, 0x2E	; 46
    37e4:	97 e0       	ldi	r25, 0x07	; 7
    37e6:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    37ea:	68 ec       	ldi	r22, 0xC8	; 200
    37ec:	72 e0       	ldi	r23, 0x02	; 2
		lcd.print("DE LA TRAPPE    ");
    37ee:	8e e2       	ldi	r24, 0x2E	; 46
    37f0:	97 e0       	ldi	r25, 0x07	; 7
    37f2:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN5Print5printEPKc>
    37f6:	41 e0       	ldi	r20, 0x01	; 1
    37f8:	60 e0       	ldi	r22, 0x00	; 0
		switch(waitButton()){
    37fa:	8e e2       	ldi	r24, 0x2E	; 46
    37fc:	97 e0       	ldi	r25, 0x07	; 7
    37fe:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
		default:
			goto MENU_ERROR;
		}

	MENU_DATE:
		lcd.setCursor(0,0);
    3802:	6b ea       	ldi	r22, 0xAB	; 171
    3804:	71 e0       	ldi	r23, 0x01	; 1
    3806:	8e e2       	ldi	r24, 0x2E	; 46
    3808:	97 e0       	ldi	r25, 0x07	; 7
    380a:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN5Print5printEPKc>
		lcd.print("REGLAGE DATE    ");
    380e:	cb d8       	rcall	.-3690   	; 0x29a6 <_Z10waitButtonv>
    3810:	81 30       	cpi	r24, 0x01	; 1
    3812:	39 f6       	brne	.-114    	; 0x37a2 <_Z13userInterfacev+0x496>
    3814:	aa cf       	rjmp	.-172    	; 0x376a <_Z13userInterfacev+0x45e>
    3816:	81 30       	cpi	r24, 0x01	; 1
    3818:	08 f0       	brcs	.+2      	; 0x381c <_Z13userInterfacev+0x510>
		lcd.setCursor(0,1);
    381a:	58 c0       	rjmp	.+176    	; 0x38cc <_Z13userInterfacev+0x5c0>
    381c:	40 e0       	ldi	r20, 0x00	; 0
    381e:	60 e0       	ldi	r22, 0x00	; 0
    3820:	8e e2       	ldi	r24, 0x2E	; 46
    3822:	97 e0       	ldi	r25, 0x07	; 7
    3824:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
		lcd.print("                ");
    3828:	6b ef       	ldi	r22, 0xFB	; 251
    382a:	72 e0       	ldi	r23, 0x02	; 2
    382c:	8e e2       	ldi	r24, 0x2E	; 46
    382e:	97 e0       	ldi	r25, 0x07	; 7
    3830:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN5Print5printEPKc>
		switch(waitButton()){
    3834:	41 e0       	ldi	r20, 0x01	; 1
    3836:	60 e0       	ldi	r22, 0x00	; 0
    3838:	8e e2       	ldi	r24, 0x2E	; 46
    383a:	97 e0       	ldi	r25, 0x07	; 7
	MENU_HAUTEUR:
		lcd.setCursor(0,0);
		lcd.print("REGLAGE HAUTEUR ");
		lcd.setCursor(0,1);
		lcd.print("DE LA TRAPPE    ");
		switch(waitButton()){
    383c:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    3840:	6c e0       	ldi	r22, 0x0C	; 12
		default:
			goto MENU_ERROR;
		}

	MENU_GPS:
		lcd.setCursor(0,0);
    3842:	73 e0       	ldi	r23, 0x03	; 3
    3844:	8e e2       	ldi	r24, 0x2E	; 46
    3846:	97 e0       	ldi	r25, 0x07	; 7
    3848:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN5Print5printEPKc>
    384c:	ac d8       	rcall	.-3752   	; 0x29a6 <_Z10waitButtonv>
		lcd.print("REGLAGE DE LA   ");
    384e:	81 30       	cpi	r24, 0x01	; 1
    3850:	09 f4       	brne	.+2      	; 0x3854 <_Z13userInterfacev+0x548>
    3852:	aa cf       	rjmp	.-172    	; 0x37a8 <_Z13userInterfacev+0x49c>
    3854:	d8 f5       	brcc	.+118    	; 0x38cc <_Z13userInterfacev+0x5c0>
    3856:	40 e0       	ldi	r20, 0x00	; 0
    3858:	60 e0       	ldi	r22, 0x00	; 0
		lcd.setCursor(0,1);
    385a:	8e e2       	ldi	r24, 0x2E	; 46
    385c:	97 e0       	ldi	r25, 0x07	; 7
    385e:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    3862:	6d e1       	ldi	r22, 0x1D	; 29
    3864:	73 e0       	ldi	r23, 0x03	; 3
		lcd.print("POSITION GPS    ");
    3866:	8e e2       	ldi	r24, 0x2E	; 46
    3868:	97 e0       	ldi	r25, 0x07	; 7
    386a:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN5Print5printEPKc>
    386e:	41 e0       	ldi	r20, 0x01	; 1
    3870:	60 e0       	ldi	r22, 0x00	; 0
		switch(waitButton()){
    3872:	8e e2       	ldi	r24, 0x2E	; 46
    3874:	97 e0       	ldi	r25, 0x07	; 7
    3876:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    387a:	6b ea       	ldi	r22, 0xAB	; 171
    387c:	71 e0       	ldi	r23, 0x01	; 1
		default:
			goto MENU_ERROR;
		}

	MENU_EXPERT:
		lcd.setCursor(0,0);
    387e:	8e e2       	ldi	r24, 0x2E	; 46
    3880:	97 e0       	ldi	r25, 0x07	; 7
    3882:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN5Print5printEPKc>
    3886:	8f d8       	rcall	.-3810   	; 0x29a6 <_Z10waitButtonv>
    3888:	81 30       	cpi	r24, 0x01	; 1
		lcd.print("REGLAGE AVANCES ");
    388a:	41 f2       	breq	.-112    	; 0x381c <_Z13userInterfacev+0x510>
    388c:	f8 f4       	brcc	.+62     	; 0x38cc <_Z13userInterfacev+0x5c0>
    388e:	40 e0       	ldi	r20, 0x00	; 0
    3890:	60 e0       	ldi	r22, 0x00	; 0
    3892:	8e e2       	ldi	r24, 0x2E	; 46
    3894:	97 e0       	ldi	r25, 0x07	; 7
		lcd.setCursor(0,1);
    3896:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    389a:	6e e2       	ldi	r22, 0x2E	; 46
    389c:	73 e0       	ldi	r23, 0x03	; 3
    389e:	8e e2       	ldi	r24, 0x2E	; 46
    38a0:	97 e0       	ldi	r25, 0x07	; 7
		lcd.print("                ");
    38a2:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN5Print5printEPKc>
    38a6:	41 e0       	ldi	r20, 0x01	; 1
    38a8:	60 e0       	ldi	r22, 0x00	; 0
    38aa:	8e e2       	ldi	r24, 0x2E	; 46
    38ac:	97 e0       	ldi	r25, 0x07	; 7
		switch(waitButton()){
    38ae:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    38b2:	6b ea       	ldi	r22, 0xAB	; 171
    38b4:	71 e0       	ldi	r23, 0x01	; 1
    38b6:	8e e2       	ldi	r24, 0x2E	; 46
		default:
			goto MENU_ERROR;
		}

	MENU_QUITTER:
		lcd.setCursor(0,0);
    38b8:	97 e0       	ldi	r25, 0x07	; 7
    38ba:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN5Print5printEPKc>
    38be:	73 d8       	rcall	.-3866   	; 0x29a6 <_Z10waitButtonv>
    38c0:	81 30       	cpi	r24, 0x01	; 1
    38c2:	49 f2       	breq	.-110    	; 0x3856 <_Z13userInterfacev+0x54a>
		lcd.print("QUITTER         ");
    38c4:	20 f3       	brcs	.-56     	; 0x388e <_Z13userInterfacev+0x582>
    38c6:	83 30       	cpi	r24, 0x03	; 3
    38c8:	09 f4       	brne	.+2      	; 0x38cc <_Z13userInterfacev+0x5c0>
    38ca:	24 cd       	rjmp	.-1464   	; 0x3314 <_Z13userInterfacev+0x8>
    38cc:	82 33       	cpi	r24, 0x32	; 50
    38ce:	f9 f0       	breq	.+62     	; 0x390e <_Z13userInterfacev+0x602>
		lcd.setCursor(0,1);
    38d0:	40 e0       	ldi	r20, 0x00	; 0
    38d2:	60 e0       	ldi	r22, 0x00	; 0
    38d4:	8e e2       	ldi	r24, 0x2E	; 46
    38d6:	97 e0       	ldi	r25, 0x07	; 7
    38d8:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
		lcd.print("                ");
    38dc:	6f e3       	ldi	r22, 0x3F	; 63
    38de:	73 e0       	ldi	r23, 0x03	; 3
    38e0:	8e e2       	ldi	r24, 0x2E	; 46
    38e2:	97 e0       	ldi	r25, 0x07	; 7
    38e4:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN5Print5printEPKc>
		switch(waitButton()){
    38e8:	41 e0       	ldi	r20, 0x01	; 1
    38ea:	60 e0       	ldi	r22, 0x00	; 0
    38ec:	8e e2       	ldi	r24, 0x2E	; 46
    38ee:	97 e0       	ldi	r25, 0x07	; 7
    38f0:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    38f4:	6b ea       	ldi	r22, 0xAB	; 171
    38f6:	71 e0       	ldi	r23, 0x01	; 1
    38f8:	8e e2       	ldi	r24, 0x2E	; 46
    38fa:	97 e0       	ldi	r25, 0x07	; 7
		default:
			goto MENU_ERROR;
		}

	MENU_ERROR:
		lcd.setCursor(0,0);
    38fc:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN5Print5printEPKc>
    3900:	68 e8       	ldi	r22, 0x88	; 136
    3902:	73 e1       	ldi	r23, 0x13	; 19
    3904:	80 e0       	ldi	r24, 0x00	; 0
    3906:	90 e0       	ldi	r25, 0x00	; 0
		lcd.print("ERREUR MENU     ");
    3908:	0e 94 94 05 	call	0xb28	; 0xb28 <delay>
    390c:	03 cd       	rjmp	.-1530   	; 0x3314 <_Z13userInterfacev+0x8>
    390e:	df 91       	pop	r29
    3910:	cf 91       	pop	r28
    3912:	08 95       	ret

00003914 <loop>:
			lcd.print("    ");
			timeToGo=0;
		}
	*/

		userInterface();
    3914:	fb dc       	rcall	.-1546   	; 0x330c <_Z13userInterfacev>
    3916:	8e e2       	ldi	r24, 0x2E	; 46
		lcd.noBacklight();
    3918:	97 e0       	ldi	r25, 0x07	; 7
    391a:	0e 94 85 11 	call	0x230a	; 0x230a <_ZN17LiquidCrystal_I2C11noBacklightEv>
    391e:	40 e0       	ldi	r20, 0x00	; 0
		lcd.setCursor(0,0);
    3920:	60 e0       	ldi	r22, 0x00	; 0
    3922:	8e e2       	ldi	r24, 0x2E	; 46
    3924:	97 e0       	ldi	r25, 0x07	; 7
    3926:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    392a:	6b ea       	ldi	r22, 0xAB	; 171
		lcd.print("                ");
    392c:	71 e0       	ldi	r23, 0x01	; 1
    392e:	8e e2       	ldi	r24, 0x2E	; 46
    3930:	97 e0       	ldi	r25, 0x07	; 7
    3932:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN5Print5printEPKc>
    3936:	41 e0       	ldi	r20, 0x01	; 1
		lcd.setCursor(0,1);
    3938:	60 e0       	ldi	r22, 0x00	; 0
    393a:	8e e2       	ldi	r24, 0x2E	; 46
    393c:	97 e0       	ldi	r25, 0x07	; 7
    393e:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    3942:	6b ea       	ldi	r22, 0xAB	; 171
		lcd.print("                ");
    3944:	71 e0       	ldi	r23, 0x01	; 1
    3946:	8e e2       	ldi	r24, 0x2E	; 46
    3948:	97 e0       	ldi	r25, 0x07	; 7
    394a:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN5Print5printEPKc>
    394e:	68 ee       	ldi	r22, 0xE8	; 232
		delay(1000);
    3950:	73 e0       	ldi	r23, 0x03	; 3
    3952:	80 e0       	ldi	r24, 0x00	; 0
    3954:	90 e0       	ldi	r25, 0x00	; 0
    3956:	0e 94 94 05 	call	0xb28	; 0xb28 <delay>
    395a:	8e e2       	ldi	r24, 0x2E	; 46
		lcd.backlight();
    395c:	97 e0       	ldi	r25, 0x07	; 7
    395e:	0e 94 89 11 	call	0x2312	; 0x2312 <_ZN17LiquidCrystal_I2C9backlightEv>
    3962:	68 ee       	ldi	r22, 0xE8	; 232
		delay(1000);
    3964:	73 e0       	ldi	r23, 0x03	; 3
    3966:	80 e0       	ldi	r24, 0x00	; 0
    3968:	90 e0       	ldi	r25, 0x00	; 0
    396a:	0e 94 94 05 	call	0xb28	; 0xb28 <delay>
    396e:	d2 cf       	rjmp	.-92     	; 0x3914 <loop>

00003970 <__udivmodqi4>:
    3970:	99 1b       	sub	r25, r25
    3972:	79 e0       	ldi	r23, 0x09	; 9
    3974:	04 c0       	rjmp	.+8      	; 0x397e <__udivmodqi4_ep>

00003976 <__udivmodqi4_loop>:
    3976:	99 1f       	adc	r25, r25
    3978:	96 17       	cp	r25, r22
    397a:	08 f0       	brcs	.+2      	; 0x397e <__udivmodqi4_ep>
    397c:	96 1b       	sub	r25, r22

0000397e <__udivmodqi4_ep>:
    397e:	88 1f       	adc	r24, r24
    3980:	7a 95       	dec	r23
    3982:	c9 f7       	brne	.-14     	; 0x3976 <__udivmodqi4_loop>
    3984:	80 95       	com	r24
    3986:	08 95       	ret

00003988 <__divmodhi4>:
    3988:	97 fb       	bst	r25, 7
    398a:	07 2e       	mov	r0, r23
    398c:	16 f4       	brtc	.+4      	; 0x3992 <__divmodhi4+0xa>
    398e:	00 94       	com	r0
    3990:	06 d0       	rcall	.+12     	; 0x399e <__divmodhi4_neg1>
    3992:	77 fd       	sbrc	r23, 7
    3994:	08 d0       	rcall	.+16     	; 0x39a6 <__divmodhi4_neg2>
    3996:	2d d0       	rcall	.+90     	; 0x39f2 <__udivmodhi4>
    3998:	07 fc       	sbrc	r0, 7
    399a:	05 d0       	rcall	.+10     	; 0x39a6 <__divmodhi4_neg2>
    399c:	3e f4       	brtc	.+14     	; 0x39ac <__divmodhi4_exit>

0000399e <__divmodhi4_neg1>:
    399e:	90 95       	com	r25
    39a0:	81 95       	neg	r24
    39a2:	9f 4f       	sbci	r25, 0xFF	; 255
    39a4:	08 95       	ret

000039a6 <__divmodhi4_neg2>:
    39a6:	70 95       	com	r23
    39a8:	61 95       	neg	r22
    39aa:	7f 4f       	sbci	r23, 0xFF	; 255

000039ac <__divmodhi4_exit>:
    39ac:	08 95       	ret

000039ae <__udivmodsi4>:
    39ae:	a1 e2       	ldi	r26, 0x21	; 33
    39b0:	1a 2e       	mov	r1, r26
    39b2:	aa 1b       	sub	r26, r26
    39b4:	bb 1b       	sub	r27, r27
    39b6:	fd 01       	movw	r30, r26
    39b8:	0d c0       	rjmp	.+26     	; 0x39d4 <__udivmodsi4_ep>

000039ba <__udivmodsi4_loop>:
    39ba:	aa 1f       	adc	r26, r26
    39bc:	bb 1f       	adc	r27, r27
    39be:	ee 1f       	adc	r30, r30
    39c0:	ff 1f       	adc	r31, r31
    39c2:	a2 17       	cp	r26, r18
    39c4:	b3 07       	cpc	r27, r19
    39c6:	e4 07       	cpc	r30, r20
    39c8:	f5 07       	cpc	r31, r21
    39ca:	20 f0       	brcs	.+8      	; 0x39d4 <__udivmodsi4_ep>
    39cc:	a2 1b       	sub	r26, r18
    39ce:	b3 0b       	sbc	r27, r19
    39d0:	e4 0b       	sbc	r30, r20
    39d2:	f5 0b       	sbc	r31, r21

000039d4 <__udivmodsi4_ep>:
    39d4:	66 1f       	adc	r22, r22
    39d6:	77 1f       	adc	r23, r23
    39d8:	88 1f       	adc	r24, r24
    39da:	99 1f       	adc	r25, r25
    39dc:	1a 94       	dec	r1
    39de:	69 f7       	brne	.-38     	; 0x39ba <__udivmodsi4_loop>
    39e0:	60 95       	com	r22
    39e2:	70 95       	com	r23
    39e4:	80 95       	com	r24
    39e6:	90 95       	com	r25
    39e8:	9b 01       	movw	r18, r22
    39ea:	ac 01       	movw	r20, r24
    39ec:	bd 01       	movw	r22, r26
    39ee:	cf 01       	movw	r24, r30
    39f0:	08 95       	ret

000039f2 <__udivmodhi4>:
    39f2:	aa 1b       	sub	r26, r26
    39f4:	bb 1b       	sub	r27, r27
    39f6:	51 e1       	ldi	r21, 0x11	; 17
    39f8:	07 c0       	rjmp	.+14     	; 0x3a08 <__udivmodhi4_ep>

000039fa <__udivmodhi4_loop>:
    39fa:	aa 1f       	adc	r26, r26
    39fc:	bb 1f       	adc	r27, r27
    39fe:	a6 17       	cp	r26, r22
    3a00:	b7 07       	cpc	r27, r23
    3a02:	10 f0       	brcs	.+4      	; 0x3a08 <__udivmodhi4_ep>
    3a04:	a6 1b       	sub	r26, r22
    3a06:	b7 0b       	sbc	r27, r23

00003a08 <__udivmodhi4_ep>:
    3a08:	88 1f       	adc	r24, r24
    3a0a:	99 1f       	adc	r25, r25
    3a0c:	5a 95       	dec	r21
    3a0e:	a9 f7       	brne	.-22     	; 0x39fa <__udivmodhi4_loop>
    3a10:	80 95       	com	r24
    3a12:	90 95       	com	r25
    3a14:	bc 01       	movw	r22, r24
    3a16:	cd 01       	movw	r24, r26
    3a18:	08 95       	ret

00003a1a <__tablejump2__>:
    3a1a:	ee 0f       	add	r30, r30
    3a1c:	ff 1f       	adc	r31, r31

00003a1e <__tablejump__>:
    3a1e:	05 90       	lpm	r0, Z+
    3a20:	f4 91       	lpm	r31, Z
    3a22:	e0 2d       	mov	r30, r0
    3a24:	09 94       	ijmp

00003a26 <malloc>:
    3a26:	cf 93       	push	r28
    3a28:	df 93       	push	r29
    3a2a:	82 30       	cpi	r24, 0x02	; 2
    3a2c:	91 05       	cpc	r25, r1
    3a2e:	10 f4       	brcc	.+4      	; 0x3a34 <malloc+0xe>
    3a30:	82 e0       	ldi	r24, 0x02	; 2
    3a32:	90 e0       	ldi	r25, 0x00	; 0
    3a34:	e0 91 4c 07 	lds	r30, 0x074C
    3a38:	f0 91 4d 07 	lds	r31, 0x074D
    3a3c:	20 e0       	ldi	r18, 0x00	; 0
    3a3e:	30 e0       	ldi	r19, 0x00	; 0
    3a40:	a0 e0       	ldi	r26, 0x00	; 0
    3a42:	b0 e0       	ldi	r27, 0x00	; 0
    3a44:	30 97       	sbiw	r30, 0x00	; 0
    3a46:	39 f1       	breq	.+78     	; 0x3a96 <malloc+0x70>
    3a48:	40 81       	ld	r20, Z
    3a4a:	51 81       	ldd	r21, Z+1	; 0x01
    3a4c:	48 17       	cp	r20, r24
    3a4e:	59 07       	cpc	r21, r25
    3a50:	b8 f0       	brcs	.+46     	; 0x3a80 <malloc+0x5a>
    3a52:	48 17       	cp	r20, r24
    3a54:	59 07       	cpc	r21, r25
    3a56:	71 f4       	brne	.+28     	; 0x3a74 <malloc+0x4e>
    3a58:	82 81       	ldd	r24, Z+2	; 0x02
    3a5a:	93 81       	ldd	r25, Z+3	; 0x03
    3a5c:	10 97       	sbiw	r26, 0x00	; 0
    3a5e:	29 f0       	breq	.+10     	; 0x3a6a <malloc+0x44>
    3a60:	13 96       	adiw	r26, 0x03	; 3
    3a62:	9c 93       	st	X, r25
    3a64:	8e 93       	st	-X, r24
    3a66:	12 97       	sbiw	r26, 0x02	; 2
    3a68:	2c c0       	rjmp	.+88     	; 0x3ac2 <malloc+0x9c>
    3a6a:	90 93 4d 07 	sts	0x074D, r25
    3a6e:	80 93 4c 07 	sts	0x074C, r24
    3a72:	27 c0       	rjmp	.+78     	; 0x3ac2 <malloc+0x9c>
    3a74:	21 15       	cp	r18, r1
    3a76:	31 05       	cpc	r19, r1
    3a78:	31 f0       	breq	.+12     	; 0x3a86 <malloc+0x60>
    3a7a:	42 17       	cp	r20, r18
    3a7c:	53 07       	cpc	r21, r19
    3a7e:	18 f0       	brcs	.+6      	; 0x3a86 <malloc+0x60>
    3a80:	a9 01       	movw	r20, r18
    3a82:	db 01       	movw	r26, r22
    3a84:	01 c0       	rjmp	.+2      	; 0x3a88 <malloc+0x62>
    3a86:	ef 01       	movw	r28, r30
    3a88:	9a 01       	movw	r18, r20
    3a8a:	bd 01       	movw	r22, r26
    3a8c:	df 01       	movw	r26, r30
    3a8e:	02 80       	ldd	r0, Z+2	; 0x02
    3a90:	f3 81       	ldd	r31, Z+3	; 0x03
    3a92:	e0 2d       	mov	r30, r0
    3a94:	d7 cf       	rjmp	.-82     	; 0x3a44 <malloc+0x1e>
    3a96:	21 15       	cp	r18, r1
    3a98:	31 05       	cpc	r19, r1
    3a9a:	f9 f0       	breq	.+62     	; 0x3ada <malloc+0xb4>
    3a9c:	28 1b       	sub	r18, r24
    3a9e:	39 0b       	sbc	r19, r25
    3aa0:	24 30       	cpi	r18, 0x04	; 4
    3aa2:	31 05       	cpc	r19, r1
    3aa4:	80 f4       	brcc	.+32     	; 0x3ac6 <malloc+0xa0>
    3aa6:	8a 81       	ldd	r24, Y+2	; 0x02
    3aa8:	9b 81       	ldd	r25, Y+3	; 0x03
    3aaa:	61 15       	cp	r22, r1
    3aac:	71 05       	cpc	r23, r1
    3aae:	21 f0       	breq	.+8      	; 0x3ab8 <malloc+0x92>
    3ab0:	fb 01       	movw	r30, r22
    3ab2:	93 83       	std	Z+3, r25	; 0x03
    3ab4:	82 83       	std	Z+2, r24	; 0x02
    3ab6:	04 c0       	rjmp	.+8      	; 0x3ac0 <malloc+0x9a>
    3ab8:	90 93 4d 07 	sts	0x074D, r25
    3abc:	80 93 4c 07 	sts	0x074C, r24
    3ac0:	fe 01       	movw	r30, r28
    3ac2:	32 96       	adiw	r30, 0x02	; 2
    3ac4:	44 c0       	rjmp	.+136    	; 0x3b4e <malloc+0x128>
    3ac6:	fe 01       	movw	r30, r28
    3ac8:	e2 0f       	add	r30, r18
    3aca:	f3 1f       	adc	r31, r19
    3acc:	81 93       	st	Z+, r24
    3ace:	91 93       	st	Z+, r25
    3ad0:	22 50       	subi	r18, 0x02	; 2
    3ad2:	31 09       	sbc	r19, r1
    3ad4:	39 83       	std	Y+1, r19	; 0x01
    3ad6:	28 83       	st	Y, r18
    3ad8:	3a c0       	rjmp	.+116    	; 0x3b4e <malloc+0x128>
    3ada:	20 91 4a 07 	lds	r18, 0x074A
    3ade:	30 91 4b 07 	lds	r19, 0x074B
    3ae2:	23 2b       	or	r18, r19
    3ae4:	41 f4       	brne	.+16     	; 0x3af6 <malloc+0xd0>
    3ae6:	20 91 02 01 	lds	r18, 0x0102
    3aea:	30 91 03 01 	lds	r19, 0x0103
    3aee:	30 93 4b 07 	sts	0x074B, r19
    3af2:	20 93 4a 07 	sts	0x074A, r18
    3af6:	20 91 00 01 	lds	r18, 0x0100
    3afa:	30 91 01 01 	lds	r19, 0x0101
    3afe:	21 15       	cp	r18, r1
    3b00:	31 05       	cpc	r19, r1
    3b02:	41 f4       	brne	.+16     	; 0x3b14 <malloc+0xee>
    3b04:	2d b7       	in	r18, 0x3d	; 61
    3b06:	3e b7       	in	r19, 0x3e	; 62
    3b08:	40 91 04 01 	lds	r20, 0x0104
    3b0c:	50 91 05 01 	lds	r21, 0x0105
    3b10:	24 1b       	sub	r18, r20
    3b12:	35 0b       	sbc	r19, r21
    3b14:	e0 91 4a 07 	lds	r30, 0x074A
    3b18:	f0 91 4b 07 	lds	r31, 0x074B
    3b1c:	e2 17       	cp	r30, r18
    3b1e:	f3 07       	cpc	r31, r19
    3b20:	a0 f4       	brcc	.+40     	; 0x3b4a <malloc+0x124>
    3b22:	2e 1b       	sub	r18, r30
    3b24:	3f 0b       	sbc	r19, r31
    3b26:	28 17       	cp	r18, r24
    3b28:	39 07       	cpc	r19, r25
    3b2a:	78 f0       	brcs	.+30     	; 0x3b4a <malloc+0x124>
    3b2c:	ac 01       	movw	r20, r24
    3b2e:	4e 5f       	subi	r20, 0xFE	; 254
    3b30:	5f 4f       	sbci	r21, 0xFF	; 255
    3b32:	24 17       	cp	r18, r20
    3b34:	35 07       	cpc	r19, r21
    3b36:	48 f0       	brcs	.+18     	; 0x3b4a <malloc+0x124>
    3b38:	4e 0f       	add	r20, r30
    3b3a:	5f 1f       	adc	r21, r31
    3b3c:	50 93 4b 07 	sts	0x074B, r21
    3b40:	40 93 4a 07 	sts	0x074A, r20
    3b44:	81 93       	st	Z+, r24
    3b46:	91 93       	st	Z+, r25
    3b48:	02 c0       	rjmp	.+4      	; 0x3b4e <malloc+0x128>
    3b4a:	e0 e0       	ldi	r30, 0x00	; 0
    3b4c:	f0 e0       	ldi	r31, 0x00	; 0
    3b4e:	cf 01       	movw	r24, r30
    3b50:	df 91       	pop	r29
    3b52:	cf 91       	pop	r28
    3b54:	08 95       	ret

00003b56 <free>:
    3b56:	cf 93       	push	r28
    3b58:	df 93       	push	r29
    3b5a:	00 97       	sbiw	r24, 0x00	; 0
    3b5c:	09 f4       	brne	.+2      	; 0x3b60 <free+0xa>
    3b5e:	87 c0       	rjmp	.+270    	; 0x3c6e <free+0x118>
    3b60:	fc 01       	movw	r30, r24
    3b62:	32 97       	sbiw	r30, 0x02	; 2
    3b64:	13 82       	std	Z+3, r1	; 0x03
    3b66:	12 82       	std	Z+2, r1	; 0x02
    3b68:	c0 91 4c 07 	lds	r28, 0x074C
    3b6c:	d0 91 4d 07 	lds	r29, 0x074D
    3b70:	20 97       	sbiw	r28, 0x00	; 0
    3b72:	81 f4       	brne	.+32     	; 0x3b94 <free+0x3e>
    3b74:	20 81       	ld	r18, Z
    3b76:	31 81       	ldd	r19, Z+1	; 0x01
    3b78:	28 0f       	add	r18, r24
    3b7a:	39 1f       	adc	r19, r25
    3b7c:	80 91 4a 07 	lds	r24, 0x074A
    3b80:	90 91 4b 07 	lds	r25, 0x074B
    3b84:	82 17       	cp	r24, r18
    3b86:	93 07       	cpc	r25, r19
    3b88:	79 f5       	brne	.+94     	; 0x3be8 <free+0x92>
    3b8a:	f0 93 4b 07 	sts	0x074B, r31
    3b8e:	e0 93 4a 07 	sts	0x074A, r30
    3b92:	6d c0       	rjmp	.+218    	; 0x3c6e <free+0x118>
    3b94:	de 01       	movw	r26, r28
    3b96:	20 e0       	ldi	r18, 0x00	; 0
    3b98:	30 e0       	ldi	r19, 0x00	; 0
    3b9a:	ae 17       	cp	r26, r30
    3b9c:	bf 07       	cpc	r27, r31
    3b9e:	50 f4       	brcc	.+20     	; 0x3bb4 <free+0x5e>
    3ba0:	12 96       	adiw	r26, 0x02	; 2
    3ba2:	4d 91       	ld	r20, X+
    3ba4:	5c 91       	ld	r21, X
    3ba6:	13 97       	sbiw	r26, 0x03	; 3
    3ba8:	9d 01       	movw	r18, r26
    3baa:	41 15       	cp	r20, r1
    3bac:	51 05       	cpc	r21, r1
    3bae:	09 f1       	breq	.+66     	; 0x3bf2 <free+0x9c>
    3bb0:	da 01       	movw	r26, r20
    3bb2:	f3 cf       	rjmp	.-26     	; 0x3b9a <free+0x44>
    3bb4:	b3 83       	std	Z+3, r27	; 0x03
    3bb6:	a2 83       	std	Z+2, r26	; 0x02
    3bb8:	40 81       	ld	r20, Z
    3bba:	51 81       	ldd	r21, Z+1	; 0x01
    3bbc:	84 0f       	add	r24, r20
    3bbe:	95 1f       	adc	r25, r21
    3bc0:	8a 17       	cp	r24, r26
    3bc2:	9b 07       	cpc	r25, r27
    3bc4:	71 f4       	brne	.+28     	; 0x3be2 <free+0x8c>
    3bc6:	8d 91       	ld	r24, X+
    3bc8:	9c 91       	ld	r25, X
    3bca:	11 97       	sbiw	r26, 0x01	; 1
    3bcc:	84 0f       	add	r24, r20
    3bce:	95 1f       	adc	r25, r21
    3bd0:	02 96       	adiw	r24, 0x02	; 2
    3bd2:	91 83       	std	Z+1, r25	; 0x01
    3bd4:	80 83       	st	Z, r24
    3bd6:	12 96       	adiw	r26, 0x02	; 2
    3bd8:	8d 91       	ld	r24, X+
    3bda:	9c 91       	ld	r25, X
    3bdc:	13 97       	sbiw	r26, 0x03	; 3
    3bde:	93 83       	std	Z+3, r25	; 0x03
    3be0:	82 83       	std	Z+2, r24	; 0x02
    3be2:	21 15       	cp	r18, r1
    3be4:	31 05       	cpc	r19, r1
    3be6:	29 f4       	brne	.+10     	; 0x3bf2 <free+0x9c>
    3be8:	f0 93 4d 07 	sts	0x074D, r31
    3bec:	e0 93 4c 07 	sts	0x074C, r30
    3bf0:	3e c0       	rjmp	.+124    	; 0x3c6e <free+0x118>
    3bf2:	d9 01       	movw	r26, r18
    3bf4:	13 96       	adiw	r26, 0x03	; 3
    3bf6:	fc 93       	st	X, r31
    3bf8:	ee 93       	st	-X, r30
    3bfa:	12 97       	sbiw	r26, 0x02	; 2
    3bfc:	4d 91       	ld	r20, X+
    3bfe:	5d 91       	ld	r21, X+
    3c00:	a4 0f       	add	r26, r20
    3c02:	b5 1f       	adc	r27, r21
    3c04:	ea 17       	cp	r30, r26
    3c06:	fb 07       	cpc	r31, r27
    3c08:	79 f4       	brne	.+30     	; 0x3c28 <free+0xd2>
    3c0a:	80 81       	ld	r24, Z
    3c0c:	91 81       	ldd	r25, Z+1	; 0x01
    3c0e:	84 0f       	add	r24, r20
    3c10:	95 1f       	adc	r25, r21
    3c12:	02 96       	adiw	r24, 0x02	; 2
    3c14:	d9 01       	movw	r26, r18
    3c16:	11 96       	adiw	r26, 0x01	; 1
    3c18:	9c 93       	st	X, r25
    3c1a:	8e 93       	st	-X, r24
    3c1c:	82 81       	ldd	r24, Z+2	; 0x02
    3c1e:	93 81       	ldd	r25, Z+3	; 0x03
    3c20:	13 96       	adiw	r26, 0x03	; 3
    3c22:	9c 93       	st	X, r25
    3c24:	8e 93       	st	-X, r24
    3c26:	12 97       	sbiw	r26, 0x02	; 2
    3c28:	e0 e0       	ldi	r30, 0x00	; 0
    3c2a:	f0 e0       	ldi	r31, 0x00	; 0
    3c2c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c2e:	9b 81       	ldd	r25, Y+3	; 0x03
    3c30:	00 97       	sbiw	r24, 0x00	; 0
    3c32:	19 f0       	breq	.+6      	; 0x3c3a <free+0xe4>
    3c34:	fe 01       	movw	r30, r28
    3c36:	ec 01       	movw	r28, r24
    3c38:	f9 cf       	rjmp	.-14     	; 0x3c2c <free+0xd6>
    3c3a:	ce 01       	movw	r24, r28
    3c3c:	02 96       	adiw	r24, 0x02	; 2
    3c3e:	28 81       	ld	r18, Y
    3c40:	39 81       	ldd	r19, Y+1	; 0x01
    3c42:	82 0f       	add	r24, r18
    3c44:	93 1f       	adc	r25, r19
    3c46:	20 91 4a 07 	lds	r18, 0x074A
    3c4a:	30 91 4b 07 	lds	r19, 0x074B
    3c4e:	28 17       	cp	r18, r24
    3c50:	39 07       	cpc	r19, r25
    3c52:	69 f4       	brne	.+26     	; 0x3c6e <free+0x118>
    3c54:	30 97       	sbiw	r30, 0x00	; 0
    3c56:	29 f4       	brne	.+10     	; 0x3c62 <free+0x10c>
    3c58:	10 92 4d 07 	sts	0x074D, r1
    3c5c:	10 92 4c 07 	sts	0x074C, r1
    3c60:	02 c0       	rjmp	.+4      	; 0x3c66 <free+0x110>
    3c62:	13 82       	std	Z+3, r1	; 0x03
    3c64:	12 82       	std	Z+2, r1	; 0x02
    3c66:	d0 93 4b 07 	sts	0x074B, r29
    3c6a:	c0 93 4a 07 	sts	0x074A, r28
    3c6e:	df 91       	pop	r29
    3c70:	cf 91       	pop	r28
    3c72:	08 95       	ret

00003c74 <realloc>:
    3c74:	a0 e0       	ldi	r26, 0x00	; 0
    3c76:	b0 e0       	ldi	r27, 0x00	; 0
    3c78:	ef e3       	ldi	r30, 0x3F	; 63
    3c7a:	fe e1       	ldi	r31, 0x1E	; 30
    3c7c:	d2 c0       	rjmp	.+420    	; 0x3e22 <__prologue_saves__+0x8>
    3c7e:	ec 01       	movw	r28, r24
    3c80:	cb 01       	movw	r24, r22
    3c82:	20 97       	sbiw	r28, 0x00	; 0
    3c84:	11 f4       	brne	.+4      	; 0x3c8a <realloc+0x16>
    3c86:	cf de       	rcall	.-610    	; 0x3a26 <malloc>
    3c88:	b4 c0       	rjmp	.+360    	; 0x3df2 <realloc+0x17e>
    3c8a:	fe 01       	movw	r30, r28
    3c8c:	e6 0f       	add	r30, r22
    3c8e:	f7 1f       	adc	r31, r23
    3c90:	9e 01       	movw	r18, r28
    3c92:	22 50       	subi	r18, 0x02	; 2
    3c94:	31 09       	sbc	r19, r1
    3c96:	e2 17       	cp	r30, r18
    3c98:	f3 07       	cpc	r31, r19
    3c9a:	08 f4       	brcc	.+2      	; 0x3c9e <realloc+0x2a>
    3c9c:	a8 c0       	rjmp	.+336    	; 0x3dee <realloc+0x17a>
    3c9e:	d9 01       	movw	r26, r18
    3ca0:	0d 91       	ld	r16, X+
    3ca2:	1c 91       	ld	r17, X
    3ca4:	11 97       	sbiw	r26, 0x01	; 1
    3ca6:	06 17       	cp	r16, r22
    3ca8:	17 07       	cpc	r17, r23
    3caa:	b0 f0       	brcs	.+44     	; 0x3cd8 <realloc+0x64>
    3cac:	05 30       	cpi	r16, 0x05	; 5
    3cae:	11 05       	cpc	r17, r1
    3cb0:	08 f4       	brcc	.+2      	; 0x3cb4 <realloc+0x40>
    3cb2:	9b c0       	rjmp	.+310    	; 0x3dea <realloc+0x176>
    3cb4:	a8 01       	movw	r20, r16
    3cb6:	44 50       	subi	r20, 0x04	; 4
    3cb8:	51 09       	sbc	r21, r1
    3cba:	46 17       	cp	r20, r22
    3cbc:	57 07       	cpc	r21, r23
    3cbe:	08 f4       	brcc	.+2      	; 0x3cc2 <realloc+0x4e>
    3cc0:	94 c0       	rjmp	.+296    	; 0x3dea <realloc+0x176>
    3cc2:	02 50       	subi	r16, 0x02	; 2
    3cc4:	11 09       	sbc	r17, r1
    3cc6:	06 1b       	sub	r16, r22
    3cc8:	17 0b       	sbc	r17, r23
    3cca:	01 93       	st	Z+, r16
    3ccc:	11 93       	st	Z+, r17
    3cce:	6d 93       	st	X+, r22
    3cd0:	7c 93       	st	X, r23
    3cd2:	cf 01       	movw	r24, r30
    3cd4:	40 df       	rcall	.-384    	; 0x3b56 <free>
    3cd6:	89 c0       	rjmp	.+274    	; 0x3dea <realloc+0x176>
    3cd8:	5b 01       	movw	r10, r22
    3cda:	a0 1a       	sub	r10, r16
    3cdc:	b1 0a       	sbc	r11, r17
    3cde:	4e 01       	movw	r8, r28
    3ce0:	80 0e       	add	r8, r16
    3ce2:	91 1e       	adc	r9, r17
    3ce4:	a0 91 4c 07 	lds	r26, 0x074C
    3ce8:	b0 91 4d 07 	lds	r27, 0x074D
    3cec:	61 2c       	mov	r6, r1
    3cee:	71 2c       	mov	r7, r1
    3cf0:	60 e0       	ldi	r22, 0x00	; 0
    3cf2:	70 e0       	ldi	r23, 0x00	; 0
    3cf4:	10 97       	sbiw	r26, 0x00	; 0
    3cf6:	09 f4       	brne	.+2      	; 0x3cfa <realloc+0x86>
    3cf8:	49 c0       	rjmp	.+146    	; 0x3d8c <realloc+0x118>
    3cfa:	a8 15       	cp	r26, r8
    3cfc:	b9 05       	cpc	r27, r9
    3cfe:	c9 f5       	brne	.+114    	; 0x3d72 <realloc+0xfe>
    3d00:	ed 90       	ld	r14, X+
    3d02:	fc 90       	ld	r15, X
    3d04:	11 97       	sbiw	r26, 0x01	; 1
    3d06:	67 01       	movw	r12, r14
    3d08:	42 e0       	ldi	r20, 0x02	; 2
    3d0a:	c4 0e       	add	r12, r20
    3d0c:	d1 1c       	adc	r13, r1
    3d0e:	ca 14       	cp	r12, r10
    3d10:	db 04       	cpc	r13, r11
    3d12:	78 f1       	brcs	.+94     	; 0x3d72 <realloc+0xfe>
    3d14:	47 01       	movw	r8, r14
    3d16:	8a 18       	sub	r8, r10
    3d18:	9b 08       	sbc	r9, r11
    3d1a:	64 01       	movw	r12, r8
    3d1c:	42 e0       	ldi	r20, 0x02	; 2
    3d1e:	c4 0e       	add	r12, r20
    3d20:	d1 1c       	adc	r13, r1
    3d22:	12 96       	adiw	r26, 0x02	; 2
    3d24:	bc 90       	ld	r11, X
    3d26:	12 97       	sbiw	r26, 0x02	; 2
    3d28:	13 96       	adiw	r26, 0x03	; 3
    3d2a:	ac 91       	ld	r26, X
    3d2c:	b5 e0       	ldi	r27, 0x05	; 5
    3d2e:	cb 16       	cp	r12, r27
    3d30:	d1 04       	cpc	r13, r1
    3d32:	40 f0       	brcs	.+16     	; 0x3d44 <realloc+0xd0>
    3d34:	b2 82       	std	Z+2, r11	; 0x02
    3d36:	a3 83       	std	Z+3, r26	; 0x03
    3d38:	91 82       	std	Z+1, r9	; 0x01
    3d3a:	80 82       	st	Z, r8
    3d3c:	d9 01       	movw	r26, r18
    3d3e:	8d 93       	st	X+, r24
    3d40:	9c 93       	st	X, r25
    3d42:	09 c0       	rjmp	.+18     	; 0x3d56 <realloc+0xe2>
    3d44:	0e 5f       	subi	r16, 0xFE	; 254
    3d46:	1f 4f       	sbci	r17, 0xFF	; 255
    3d48:	0e 0d       	add	r16, r14
    3d4a:	1f 1d       	adc	r17, r15
    3d4c:	f9 01       	movw	r30, r18
    3d4e:	11 83       	std	Z+1, r17	; 0x01
    3d50:	00 83       	st	Z, r16
    3d52:	eb 2d       	mov	r30, r11
    3d54:	fa 2f       	mov	r31, r26
    3d56:	61 15       	cp	r22, r1
    3d58:	71 05       	cpc	r23, r1
    3d5a:	31 f0       	breq	.+12     	; 0x3d68 <realloc+0xf4>
    3d5c:	db 01       	movw	r26, r22
    3d5e:	13 96       	adiw	r26, 0x03	; 3
    3d60:	fc 93       	st	X, r31
    3d62:	ee 93       	st	-X, r30
    3d64:	12 97       	sbiw	r26, 0x02	; 2
    3d66:	41 c0       	rjmp	.+130    	; 0x3dea <realloc+0x176>
    3d68:	f0 93 4d 07 	sts	0x074D, r31
    3d6c:	e0 93 4c 07 	sts	0x074C, r30
    3d70:	3c c0       	rjmp	.+120    	; 0x3dea <realloc+0x176>
    3d72:	6d 91       	ld	r22, X+
    3d74:	7c 91       	ld	r23, X
    3d76:	11 97       	sbiw	r26, 0x01	; 1
    3d78:	66 16       	cp	r6, r22
    3d7a:	77 06       	cpc	r7, r23
    3d7c:	08 f4       	brcc	.+2      	; 0x3d80 <realloc+0x10c>
    3d7e:	3b 01       	movw	r6, r22
    3d80:	bd 01       	movw	r22, r26
    3d82:	12 96       	adiw	r26, 0x02	; 2
    3d84:	0d 90       	ld	r0, X+
    3d86:	bc 91       	ld	r27, X
    3d88:	a0 2d       	mov	r26, r0
    3d8a:	b4 cf       	rjmp	.-152    	; 0x3cf4 <realloc+0x80>
    3d8c:	60 91 4a 07 	lds	r22, 0x074A
    3d90:	70 91 4b 07 	lds	r23, 0x074B
    3d94:	68 15       	cp	r22, r8
    3d96:	79 05       	cpc	r23, r9
    3d98:	e9 f4       	brne	.+58     	; 0x3dd4 <realloc+0x160>
    3d9a:	68 16       	cp	r6, r24
    3d9c:	79 06       	cpc	r7, r25
    3d9e:	d0 f4       	brcc	.+52     	; 0x3dd4 <realloc+0x160>
    3da0:	40 91 00 01 	lds	r20, 0x0100
    3da4:	50 91 01 01 	lds	r21, 0x0101
    3da8:	41 15       	cp	r20, r1
    3daa:	51 05       	cpc	r21, r1
    3dac:	41 f4       	brne	.+16     	; 0x3dbe <realloc+0x14a>
    3dae:	4d b7       	in	r20, 0x3d	; 61
    3db0:	5e b7       	in	r21, 0x3e	; 62
    3db2:	60 91 04 01 	lds	r22, 0x0104
    3db6:	70 91 05 01 	lds	r23, 0x0105
    3dba:	46 1b       	sub	r20, r22
    3dbc:	57 0b       	sbc	r21, r23
    3dbe:	e4 17       	cp	r30, r20
    3dc0:	f5 07       	cpc	r31, r21
    3dc2:	a8 f4       	brcc	.+42     	; 0x3dee <realloc+0x17a>
    3dc4:	f0 93 4b 07 	sts	0x074B, r31
    3dc8:	e0 93 4a 07 	sts	0x074A, r30
    3dcc:	f9 01       	movw	r30, r18
    3dce:	91 83       	std	Z+1, r25	; 0x01
    3dd0:	80 83       	st	Z, r24
    3dd2:	0b c0       	rjmp	.+22     	; 0x3dea <realloc+0x176>
    3dd4:	28 de       	rcall	.-944    	; 0x3a26 <malloc>
    3dd6:	7c 01       	movw	r14, r24
    3dd8:	00 97       	sbiw	r24, 0x00	; 0
    3dda:	49 f0       	breq	.+18     	; 0x3dee <realloc+0x17a>
    3ddc:	a8 01       	movw	r20, r16
    3dde:	be 01       	movw	r22, r28
    3de0:	0c d0       	rcall	.+24     	; 0x3dfa <memcpy>
    3de2:	ce 01       	movw	r24, r28
    3de4:	b8 de       	rcall	.-656    	; 0x3b56 <free>
    3de6:	c7 01       	movw	r24, r14
    3de8:	04 c0       	rjmp	.+8      	; 0x3df2 <realloc+0x17e>
    3dea:	ce 01       	movw	r24, r28
    3dec:	02 c0       	rjmp	.+4      	; 0x3df2 <realloc+0x17e>
    3dee:	80 e0       	ldi	r24, 0x00	; 0
    3df0:	90 e0       	ldi	r25, 0x00	; 0
    3df2:	cd b7       	in	r28, 0x3d	; 61
    3df4:	de b7       	in	r29, 0x3e	; 62
    3df6:	ee e0       	ldi	r30, 0x0E	; 14
    3df8:	30 c0       	rjmp	.+96     	; 0x3e5a <__epilogue_restores__+0x8>

00003dfa <memcpy>:
    3dfa:	fb 01       	movw	r30, r22
    3dfc:	dc 01       	movw	r26, r24
    3dfe:	02 c0       	rjmp	.+4      	; 0x3e04 <memcpy+0xa>
    3e00:	01 90       	ld	r0, Z+
    3e02:	0d 92       	st	X+, r0
    3e04:	41 50       	subi	r20, 0x01	; 1
    3e06:	50 40       	sbci	r21, 0x00	; 0
    3e08:	d8 f7       	brcc	.-10     	; 0x3e00 <memcpy+0x6>
    3e0a:	08 95       	ret

00003e0c <strcpy>:
    3e0c:	fb 01       	movw	r30, r22
    3e0e:	dc 01       	movw	r26, r24
    3e10:	01 90       	ld	r0, Z+
    3e12:	0d 92       	st	X+, r0
    3e14:	00 20       	and	r0, r0
    3e16:	e1 f7       	brne	.-8      	; 0x3e10 <strcpy+0x4>
    3e18:	08 95       	ret

00003e1a <__prologue_saves__>:
    3e1a:	2f 92       	push	r2
    3e1c:	3f 92       	push	r3
    3e1e:	4f 92       	push	r4
    3e20:	5f 92       	push	r5
    3e22:	6f 92       	push	r6
    3e24:	7f 92       	push	r7
    3e26:	8f 92       	push	r8
    3e28:	9f 92       	push	r9
    3e2a:	af 92       	push	r10
    3e2c:	bf 92       	push	r11
    3e2e:	cf 92       	push	r12
    3e30:	df 92       	push	r13
    3e32:	ef 92       	push	r14
    3e34:	ff 92       	push	r15
    3e36:	0f 93       	push	r16
    3e38:	1f 93       	push	r17
    3e3a:	cf 93       	push	r28
    3e3c:	df 93       	push	r29
    3e3e:	cd b7       	in	r28, 0x3d	; 61
    3e40:	de b7       	in	r29, 0x3e	; 62
    3e42:	ca 1b       	sub	r28, r26
    3e44:	db 0b       	sbc	r29, r27
    3e46:	0f b6       	in	r0, 0x3f	; 63
    3e48:	f8 94       	cli
    3e4a:	de bf       	out	0x3e, r29	; 62
    3e4c:	0f be       	out	0x3f, r0	; 63
    3e4e:	cd bf       	out	0x3d, r28	; 61
    3e50:	09 94       	ijmp

00003e52 <__epilogue_restores__>:
    3e52:	2a 88       	ldd	r2, Y+18	; 0x12
    3e54:	39 88       	ldd	r3, Y+17	; 0x11
    3e56:	48 88       	ldd	r4, Y+16	; 0x10
    3e58:	5f 84       	ldd	r5, Y+15	; 0x0f
    3e5a:	6e 84       	ldd	r6, Y+14	; 0x0e
    3e5c:	7d 84       	ldd	r7, Y+13	; 0x0d
    3e5e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3e60:	9b 84       	ldd	r9, Y+11	; 0x0b
    3e62:	aa 84       	ldd	r10, Y+10	; 0x0a
    3e64:	b9 84       	ldd	r11, Y+9	; 0x09
    3e66:	c8 84       	ldd	r12, Y+8	; 0x08
    3e68:	df 80       	ldd	r13, Y+7	; 0x07
    3e6a:	ee 80       	ldd	r14, Y+6	; 0x06
    3e6c:	fd 80       	ldd	r15, Y+5	; 0x05
    3e6e:	0c 81       	ldd	r16, Y+4	; 0x04
    3e70:	1b 81       	ldd	r17, Y+3	; 0x03
    3e72:	aa 81       	ldd	r26, Y+2	; 0x02
    3e74:	b9 81       	ldd	r27, Y+1	; 0x01
    3e76:	ce 0f       	add	r28, r30
    3e78:	d1 1d       	adc	r29, r1
    3e7a:	0f b6       	in	r0, 0x3f	; 63
    3e7c:	f8 94       	cli
    3e7e:	de bf       	out	0x3e, r29	; 62
    3e80:	0f be       	out	0x3f, r0	; 63
    3e82:	cd bf       	out	0x3d, r28	; 61
    3e84:	ed 01       	movw	r28, r26
    3e86:	08 95       	ret

00003e88 <__do_global_dtors>:
    3e88:	10 e0       	ldi	r17, 0x00	; 0
    3e8a:	c2 ed       	ldi	r28, 0xD2	; 210
    3e8c:	d0 e0       	ldi	r29, 0x00	; 0
    3e8e:	03 c0       	rjmp	.+6      	; 0x3e96 <__do_global_dtors+0xe>
    3e90:	fe 01       	movw	r30, r28
    3e92:	c5 dd       	rcall	.-1142   	; 0x3a1e <__tablejump__>
    3e94:	22 96       	adiw	r28, 0x02	; 2
    3e96:	c4 3d       	cpi	r28, 0xD4	; 212
    3e98:	d1 07       	cpc	r29, r17
    3e9a:	d1 f7       	brne	.-12     	; 0x3e90 <__do_global_dtors+0x8>
    3e9c:	f8 94       	cli

00003e9e <__stop_program>:
    3e9e:	ff cf       	rjmp	.-2      	; 0x3e9e <__stop_program>
